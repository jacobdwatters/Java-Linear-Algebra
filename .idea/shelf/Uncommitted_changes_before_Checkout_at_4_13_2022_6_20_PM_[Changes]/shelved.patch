Index: target/site/jacoco/linalg/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\"><head><meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\"/><link rel=\"stylesheet\" href=\"../jacoco-resources/report.css\" type=\"text/css\"/><link rel=\"shortcut icon\" href=\"../jacoco-resources/report.gif\" type=\"image/gif\"/><title>linalg</title><script type=\"text/javascript\" src=\"../jacoco-resources/sort.js\"></script></head><body onload=\"initialSort(['breadcrumb', 'coveragetable'])\"><div class=\"breadcrumb\" id=\"breadcrumb\"><span class=\"info\"><a href=\"index.source.html\" class=\"el_source\">Source Files</a><a href=\"../jacoco-sessions.html\" class=\"el_session\">Sessions</a></span><a href=\"../index.html\" class=\"el_report\">Java-Linear-Algebra</a> &gt; <span class=\"el_package\">linalg</span></div><h1>linalg</h1><table class=\"coverage\" cellspacing=\"0\" id=\"coveragetable\"><thead><tr><td class=\"sortable\" id=\"a\" onclick=\"toggleSort(this)\">Element</td><td class=\"down sortable bar\" id=\"b\" onclick=\"toggleSort(this)\">Missed Instructions</td><td class=\"sortable ctr2\" id=\"c\" onclick=\"toggleSort(this)\">Cov.</td><td class=\"sortable bar\" id=\"d\" onclick=\"toggleSort(this)\">Missed Branches</td><td class=\"sortable ctr2\" id=\"e\" onclick=\"toggleSort(this)\">Cov.</td><td class=\"sortable ctr1\" id=\"f\" onclick=\"toggleSort(this)\">Missed</td><td class=\"sortable ctr2\" id=\"g\" onclick=\"toggleSort(this)\">Cxty</td><td class=\"sortable ctr1\" id=\"h\" onclick=\"toggleSort(this)\">Missed</td><td class=\"sortable ctr2\" id=\"i\" onclick=\"toggleSort(this)\">Lines</td><td class=\"sortable ctr1\" id=\"j\" onclick=\"toggleSort(this)\">Missed</td><td class=\"sortable ctr2\" id=\"k\" onclick=\"toggleSort(this)\">Methods</td><td class=\"sortable ctr1\" id=\"l\" onclick=\"toggleSort(this)\">Missed</td><td class=\"sortable ctr2\" id=\"m\" onclick=\"toggleSort(this)\">Classes</td></tr></thead><tfoot><tr><td>Total</td><td class=\"bar\">12,246 of 12,442</td><td class=\"ctr2\">1%</td><td class=\"bar\">913 of 927</td><td class=\"ctr2\">1%</td><td class=\"ctr1\">718</td><td class=\"ctr2\">732</td><td class=\"ctr1\">1,738</td><td class=\"ctr2\">1,790</td><td class=\"ctr1\">257</td><td class=\"ctr2\">267</td><td class=\"ctr1\">14</td><td class=\"ctr2\">17</td></tr></tfoot><tbody><tr><td id=\"a9\"><a href=\"MatrixOperations.html\" class=\"el_class\">MatrixOperations</a></td><td class=\"bar\" id=\"b0\"><img src=\"../jacoco-resources/redbar.gif\" width=\"119\" height=\"10\" title=\"2,338\" alt=\"2,338\"/></td><td class=\"ctr2\" id=\"c3\">0%</td><td class=\"bar\" id=\"d1\"><img src=\"../jacoco-resources/redbar.gif\" width=\"113\" height=\"10\" title=\"202\" alt=\"202\"/></td><td class=\"ctr2\" id=\"e1\">0%</td><td class=\"ctr1\" id=\"f1\">144</td><td class=\"ctr2\" id=\"g1\">144</td><td class=\"ctr1\" id=\"h0\">310</td><td class=\"ctr2\" id=\"i0\">310</td><td class=\"ctr1\" id=\"j1\">43</td><td class=\"ctr2\" id=\"k2\">43</td><td class=\"ctr1\" id=\"l0\">1</td><td class=\"ctr2\" id=\"m0\">1</td></tr><tr><td id=\"a10\"><a href=\"MatrixProperties.html\" class=\"el_class\">MatrixProperties</a></td><td class=\"bar\" id=\"b1\"><img src=\"../jacoco-resources/redbar.gif\" width=\"119\" height=\"10\" title=\"2,332\" alt=\"2,332\"/></td><td class=\"ctr2\" id=\"c2\">0%</td><td class=\"bar\" id=\"d0\"><img src=\"../jacoco-resources/redbar.gif\" width=\"120\" height=\"10\" title=\"214\" alt=\"214\"/></td><td class=\"ctr2\" id=\"e2\">0%</td><td class=\"ctr1\" id=\"f0\">149</td><td class=\"ctr2\" id=\"g0\">152</td><td class=\"ctr1\" id=\"h1\">291</td><td class=\"ctr2\" id=\"i2\">297</td><td class=\"ctr1\" id=\"j2\">42</td><td class=\"ctr2\" id=\"k1\">45</td><td class=\"ctr1\" id=\"l14\">0</td><td class=\"ctr2\" id=\"m1\">1</td></tr><tr><td id=\"a7\"><a href=\"MatrixManipulations.html\" class=\"el_class\">MatrixManipulations</a></td><td class=\"bar\" id=\"b2\"><img src=\"../jacoco-resources/redbar.gif\" width=\"96\" height=\"10\" title=\"1,882\" alt=\"1,882\"/></td><td class=\"ctr2\" id=\"c4\">0%</td><td class=\"bar\" id=\"d2\"><img src=\"../jacoco-resources/redbar.gif\" width=\"82\" height=\"10\" title=\"148\" alt=\"148\"/></td><td class=\"ctr2\" id=\"e3\">0%</td><td class=\"ctr1\" id=\"f2\">115</td><td class=\"ctr2\" id=\"g3\">115</td><td class=\"ctr1\" id=\"h2\">271</td><td class=\"ctr2\" id=\"i3\">271</td><td class=\"ctr1\" id=\"j3\">41</td><td class=\"ctr2\" id=\"k3\">41</td><td class=\"ctr1\" id=\"l1\">1</td><td class=\"ctr2\" id=\"m2\">1</td></tr><tr><td id=\"a4\"><a href=\"Matrix.html\" class=\"el_class\">Matrix</a></td><td class=\"bar\" id=\"b3\"><img src=\"../jacoco-resources/redbar.gif\" width=\"78\" height=\"10\" title=\"1,545\" alt=\"1,545\"/><img src=\"../jacoco-resources/greenbar.gif\" width=\"8\" height=\"10\" title=\"169\" alt=\"169\"/></td><td class=\"ctr2\" id=\"c1\">9%</td><td class=\"bar\" id=\"d3\"><img src=\"../jacoco-resources/redbar.gif\" width=\"67\" height=\"10\" title=\"120\" alt=\"120\"/><img src=\"../jacoco-resources/greenbar.gif\" width=\"7\" height=\"10\" title=\"14\" alt=\"14\"/></td><td class=\"ctr2\" id=\"e0\">10%</td><td class=\"ctr1\" id=\"f3\">110</td><td class=\"ctr2\" id=\"g2\">120</td><td class=\"ctr1\" id=\"h3\">256</td><td class=\"ctr2\" id=\"i1\">298</td><td class=\"ctr1\" id=\"j0\">47</td><td class=\"ctr2\" id=\"k0\">53</td><td class=\"ctr1\" id=\"l15\">0</td><td class=\"ctr2\" id=\"m3\">1</td></tr><tr><td id=\"a16\"><a href=\"Vector.html\" class=\"el_class\">Vector</a></td><td class=\"bar\" id=\"b4\"><img src=\"../jacoco-resources/redbar.gif\" width=\"41\" height=\"10\" title=\"806\" alt=\"806\"/></td><td class=\"ctr2\" id=\"c5\">0%</td><td class=\"bar\" id=\"d4\"><img src=\"../jacoco-resources/redbar.gif\" width=\"31\" height=\"10\" title=\"56\" alt=\"56\"/></td><td class=\"ctr2\" id=\"e4\">0%</td><td class=\"ctr1\" id=\"f4\">55</td><td class=\"ctr2\" id=\"g4\">55</td><td class=\"ctr1\" id=\"h4\">175</td><td class=\"ctr2\" id=\"i4\">175</td><td class=\"ctr1\" id=\"j4\">27</td><td class=\"ctr2\" id=\"k4\">27</td><td class=\"ctr1\" id=\"l2\">1</td><td class=\"ctr2\" id=\"m4\">1</td></tr><tr><td id=\"a13\"><a href=\"SchurDecomposition.html\" class=\"el_class\">SchurDecomposition</a></td><td class=\"bar\" id=\"b5\"><img src=\"../jacoco-resources/redbar.gif\" width=\"31\" height=\"10\" title=\"615\" alt=\"615\"/></td><td class=\"ctr2\" id=\"c6\">0%</td><td class=\"bar\" id=\"d9\"><img src=\"../jacoco-resources/redbar.gif\" width=\"8\" height=\"10\" title=\"16\" alt=\"16\"/></td><td class=\"ctr2\" id=\"e5\">0%</td><td class=\"ctr1\" id=\"f9\">11</td><td class=\"ctr2\" id=\"g9\">11</td><td class=\"ctr1\" id=\"h6\">74</td><td class=\"ctr2\" id=\"i6\">74</td><td class=\"ctr1\" id=\"j11\">3</td><td class=\"ctr2\" id=\"k11\">3</td><td class=\"ctr1\" id=\"l3\">1</td><td class=\"ctr2\" id=\"m5\">1</td></tr><tr><td id=\"a12\"><a href=\"QRDecomposition.html\" class=\"el_class\">QRDecomposition</a></td><td class=\"bar\" id=\"b6\"><img src=\"../jacoco-resources/redbar.gif\" width=\"30\" height=\"10\" title=\"592\" alt=\"592\"/></td><td class=\"ctr2\" id=\"c7\">0%</td><td class=\"bar\" id=\"d10\"><img src=\"../jacoco-resources/redbar.gif\" width=\"6\" height=\"10\" title=\"12\" alt=\"12\"/></td><td class=\"ctr2\" id=\"e6\">0%</td><td class=\"ctr1\" id=\"f10\">10</td><td class=\"ctr2\" id=\"g10\">10</td><td class=\"ctr1\" id=\"h8\">48</td><td class=\"ctr2\" id=\"i8\">48</td><td class=\"ctr1\" id=\"j9\">4</td><td class=\"ctr2\" id=\"k9\">4</td><td class=\"ctr1\" id=\"l4\">1</td><td class=\"ctr2\" id=\"m6\">1</td></tr><tr><td id=\"a3\"><a href=\"LUDecomposition.html\" class=\"el_class\">LUDecomposition</a></td><td class=\"bar\" id=\"b7\"><img src=\"../jacoco-resources/redbar.gif\" width=\"27\" height=\"10\" title=\"544\" alt=\"544\"/></td><td class=\"ctr2\" id=\"c8\">0%</td><td class=\"bar\" id=\"d6\"><img src=\"../jacoco-resources/redbar.gif\" width=\"20\" height=\"10\" title=\"37\" alt=\"37\"/></td><td class=\"ctr2\" id=\"e7\">0%</td><td class=\"ctr1\" id=\"f5\">28</td><td class=\"ctr2\" id=\"g5\">28</td><td class=\"ctr1\" id=\"h5\">98</td><td class=\"ctr2\" id=\"i5\">98</td><td class=\"ctr1\" id=\"j6\">8</td><td class=\"ctr2\" id=\"k6\">8</td><td class=\"ctr1\" id=\"l5\">1</td><td class=\"ctr2\" id=\"m7\">1</td></tr><tr><td id=\"a14\"><a href=\"SingularValueDecomposition.html\" class=\"el_class\">SingularValueDecomposition</a></td><td class=\"bar\" id=\"b8\"><img src=\"../jacoco-resources/redbar.gif\" width=\"17\" height=\"10\" title=\"335\" alt=\"335\"/></td><td class=\"ctr2\" id=\"c9\">0%</td><td class=\"bar\" id=\"d14\"/><td class=\"ctr2\" id=\"e14\">n/a</td><td class=\"ctr1\" id=\"f14\">3</td><td class=\"ctr2\" id=\"g14\">3</td><td class=\"ctr1\" id=\"h11\">21</td><td class=\"ctr2\" id=\"i11\">21</td><td class=\"ctr1\" id=\"j12\">3</td><td class=\"ctr2\" id=\"k12\">3</td><td class=\"ctr1\" id=\"l6\">1</td><td class=\"ctr2\" id=\"m8\">1</td></tr><tr><td id=\"a15\"><a href=\"Solvers.html\" class=\"el_class\">Solvers</a></td><td class=\"bar\" id=\"b9\"><img src=\"../jacoco-resources/redbar.gif\" width=\"16\" height=\"10\" title=\"332\" alt=\"332\"/></td><td class=\"ctr2\" id=\"c10\">0%</td><td class=\"bar\" id=\"d7\"><img src=\"../jacoco-resources/redbar.gif\" width=\"11\" height=\"10\" title=\"20\" alt=\"20\"/></td><td class=\"ctr2\" id=\"e8\">0%</td><td class=\"ctr1\" id=\"f8\">18</td><td class=\"ctr2\" id=\"g8\">18</td><td class=\"ctr1\" id=\"h7\">52</td><td class=\"ctr2\" id=\"i7\">52</td><td class=\"ctr1\" id=\"j7\">8</td><td class=\"ctr2\" id=\"k7\">8</td><td class=\"ctr1\" id=\"l7\">1</td><td class=\"ctr2\" id=\"m9\">1</td></tr><tr><td id=\"a8\"><a href=\"MatrixMultiplicationAlgorithms.html\" class=\"el_class\">MatrixMultiplicationAlgorithms</a></td><td class=\"bar\" id=\"b10\"><img src=\"../jacoco-resources/redbar.gif\" width=\"12\" height=\"10\" title=\"242\" alt=\"242\"/></td><td class=\"ctr2\" id=\"c11\">0%</td><td class=\"bar\" id=\"d11\"><img src=\"../jacoco-resources/redbar.gif\" width=\"5\" height=\"10\" title=\"10\" alt=\"10\"/></td><td class=\"ctr2\" id=\"e9\">0%</td><td class=\"ctr1\" id=\"f11\">9</td><td class=\"ctr2\" id=\"g11\">9</td><td class=\"ctr1\" id=\"h12\">18</td><td class=\"ctr2\" id=\"i12\">18</td><td class=\"ctr1\" id=\"j10\">4</td><td class=\"ctr2\" id=\"k10\">4</td><td class=\"ctr1\" id=\"l8\">1</td><td class=\"ctr2\" id=\"m10\">1</td></tr><tr><td id=\"a6\"><a href=\"MatrixComparisons.html\" class=\"el_class\">MatrixComparisons</a></td><td class=\"bar\" id=\"b11\"><img src=\"../jacoco-resources/redbar.gif\" width=\"10\" height=\"10\" title=\"208\" alt=\"208\"/></td><td class=\"ctr2\" id=\"c12\">0%</td><td class=\"bar\" id=\"d5\"><img src=\"../jacoco-resources/redbar.gif\" width=\"23\" height=\"10\" title=\"42\" alt=\"42\"/></td><td class=\"ctr2\" id=\"e10\">0%</td><td class=\"ctr1\" id=\"f6\">28</td><td class=\"ctr2\" id=\"g6\">28</td><td class=\"ctr1\" id=\"h9\">47</td><td class=\"ctr2\" id=\"i9\">47</td><td class=\"ctr1\" id=\"j8\">7</td><td class=\"ctr2\" id=\"k8\">7</td><td class=\"ctr1\" id=\"l9\">1</td><td class=\"ctr2\" id=\"m11\">1</td></tr><tr><td id=\"a2\"><a href=\"LQDecomposition.html\" class=\"el_class\">LQDecomposition</a></td><td class=\"bar\" id=\"b12\"><img src=\"../jacoco-resources/redbar.gif\" width=\"7\" height=\"10\" title=\"156\" alt=\"156\"/></td><td class=\"ctr2\" id=\"c13\">0%</td><td class=\"bar\" id=\"d15\"/><td class=\"ctr2\" id=\"e15\">n/a</td><td class=\"ctr1\" id=\"f15\">3</td><td class=\"ctr2\" id=\"g15\">3</td><td class=\"ctr1\" id=\"h14\">14</td><td class=\"ctr2\" id=\"i14\">14</td><td class=\"ctr1\" id=\"j13\">3</td><td class=\"ctr2\" id=\"k13\">3</td><td class=\"ctr1\" id=\"l10\">1</td><td class=\"ctr2\" id=\"m12\">1</td></tr><tr><td id=\"a1\"><a href=\"Decompose.html\" class=\"el_class\">Decompose</a></td><td class=\"bar\" id=\"b13\"><img src=\"../jacoco-resources/redbar.gif\" width=\"7\" height=\"10\" title=\"142\" alt=\"142\"/></td><td class=\"ctr2\" id=\"c14\">0%</td><td class=\"bar\" id=\"d8\"><img src=\"../jacoco-resources/redbar.gif\" width=\"10\" height=\"10\" title=\"18\" alt=\"18\"/></td><td class=\"ctr2\" id=\"e11\">0%</td><td class=\"ctr1\" id=\"f7\">21</td><td class=\"ctr2\" id=\"g7\">21</td><td class=\"ctr1\" id=\"h10\">31</td><td class=\"ctr2\" id=\"i10\">31</td><td class=\"ctr1\" id=\"j5\">12</td><td class=\"ctr2\" id=\"k5\">12</td><td class=\"ctr1\" id=\"l11\">1</td><td class=\"ctr2\" id=\"m13\">1</td></tr><tr><td id=\"a0\"><a href=\"CholeskyDecomposition.html\" class=\"el_class\">CholeskyDecomposition</a></td><td class=\"bar\" id=\"b14\"><img src=\"../jacoco-resources/redbar.gif\" width=\"6\" height=\"10\" title=\"123\" alt=\"123\"/></td><td class=\"ctr2\" id=\"c15\">0%</td><td class=\"bar\" id=\"d12\"><img src=\"../jacoco-resources/redbar.gif\" width=\"5\" height=\"10\" title=\"10\" alt=\"10\"/></td><td class=\"ctr2\" id=\"e12\">0%</td><td class=\"ctr1\" id=\"f12\">7</td><td class=\"ctr2\" id=\"g12\">7</td><td class=\"ctr1\" id=\"h13\">18</td><td class=\"ctr2\" id=\"i13\">18</td><td class=\"ctr1\" id=\"j14\">2</td><td class=\"ctr2\" id=\"k14\">2</td><td class=\"ctr1\" id=\"l12\">1</td><td class=\"ctr2\" id=\"m14\">1</td></tr><tr><td id=\"a5\"><a href=\"MatrixChecks.html\" class=\"el_class\">MatrixChecks</a></td><td class=\"bar\" id=\"b15\"><img src=\"../jacoco-resources/redbar.gif\" width=\"2\" height=\"10\" title=\"47\" alt=\"47\"/></td><td class=\"ctr2\" id=\"c16\">0%</td><td class=\"bar\" id=\"d13\"><img src=\"../jacoco-resources/redbar.gif\" width=\"4\" height=\"10\" title=\"8\" alt=\"8\"/></td><td class=\"ctr2\" id=\"e13\">0%</td><td class=\"ctr1\" id=\"f13\">6</td><td class=\"ctr2\" id=\"g13\">6</td><td class=\"ctr1\" id=\"h15\">12</td><td class=\"ctr2\" id=\"i15\">12</td><td class=\"ctr1\" id=\"j15\">2</td><td class=\"ctr2\" id=\"k15\">2</td><td class=\"ctr1\" id=\"l13\">1</td><td class=\"ctr2\" id=\"m15\">1</td></tr><tr><td id=\"a11\"><a href=\"PrintOptions.html\" class=\"el_class\">PrintOptions</a></td><td class=\"bar\" id=\"b16\"/><td class=\"ctr2\" id=\"c0\">56%</td><td class=\"bar\" id=\"d16\"/><td class=\"ctr2\" id=\"e16\">n/a</td><td class=\"ctr1\" id=\"f16\">1</td><td class=\"ctr2\" id=\"g16\">2</td><td class=\"ctr1\" id=\"h16\">2</td><td class=\"ctr2\" id=\"i16\">6</td><td class=\"ctr1\" id=\"j16\">1</td><td class=\"ctr2\" id=\"k16\">2</td><td class=\"ctr1\" id=\"l16\">0</td><td class=\"ctr2\" id=\"m16\">1</td></tr></tbody></table><div class=\"footer\"><span class=\"right\">Created with <a href=\"http://www.jacoco.org/jacoco\">JaCoCo</a> 0.8.7.202105040129</span></div></body></html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/site/jacoco/linalg/index.html b/target/site/jacoco/linalg/index.html
--- a/target/site/jacoco/linalg/index.html	(revision 48dc0b3e0abf8d6b081fabfbe0061d32ae01ed50)
+++ b/target/site/jacoco/linalg/index.html	(date 1649895261263)
@@ -1,1 +1,1 @@
-<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../jacoco-resources/report.css" type="text/css"/><link rel="shortcut icon" href="../jacoco-resources/report.gif" type="image/gif"/><title>linalg</title><script type="text/javascript" src="../jacoco-resources/sort.js"></script></head><body onload="initialSort(['breadcrumb', 'coveragetable'])"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="index.source.html" class="el_source">Source Files</a><a href="../jacoco-sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Java-Linear-Algebra</a> &gt; <span class="el_package">linalg</span></div><h1>linalg</h1><table class="coverage" cellspacing="0" id="coveragetable"><thead><tr><td class="sortable" id="a" onclick="toggleSort(this)">Element</td><td class="down sortable bar" id="b" onclick="toggleSort(this)">Missed Instructions</td><td class="sortable ctr2" id="c" onclick="toggleSort(this)">Cov.</td><td class="sortable bar" id="d" onclick="toggleSort(this)">Missed Branches</td><td class="sortable ctr2" id="e" onclick="toggleSort(this)">Cov.</td><td class="sortable ctr1" id="f" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="g" onclick="toggleSort(this)">Cxty</td><td class="sortable ctr1" id="h" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="i" onclick="toggleSort(this)">Lines</td><td class="sortable ctr1" id="j" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="k" onclick="toggleSort(this)">Methods</td><td class="sortable ctr1" id="l" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="m" onclick="toggleSort(this)">Classes</td></tr></thead><tfoot><tr><td>Total</td><td class="bar">12,246 of 12,442</td><td class="ctr2">1%</td><td class="bar">913 of 927</td><td class="ctr2">1%</td><td class="ctr1">718</td><td class="ctr2">732</td><td class="ctr1">1,738</td><td class="ctr2">1,790</td><td class="ctr1">257</td><td class="ctr2">267</td><td class="ctr1">14</td><td class="ctr2">17</td></tr></tfoot><tbody><tr><td id="a9"><a href="MatrixOperations.html" class="el_class">MatrixOperations</a></td><td class="bar" id="b0"><img src="../jacoco-resources/redbar.gif" width="119" height="10" title="2,338" alt="2,338"/></td><td class="ctr2" id="c3">0%</td><td class="bar" id="d1"><img src="../jacoco-resources/redbar.gif" width="113" height="10" title="202" alt="202"/></td><td class="ctr2" id="e1">0%</td><td class="ctr1" id="f1">144</td><td class="ctr2" id="g1">144</td><td class="ctr1" id="h0">310</td><td class="ctr2" id="i0">310</td><td class="ctr1" id="j1">43</td><td class="ctr2" id="k2">43</td><td class="ctr1" id="l0">1</td><td class="ctr2" id="m0">1</td></tr><tr><td id="a10"><a href="MatrixProperties.html" class="el_class">MatrixProperties</a></td><td class="bar" id="b1"><img src="../jacoco-resources/redbar.gif" width="119" height="10" title="2,332" alt="2,332"/></td><td class="ctr2" id="c2">0%</td><td class="bar" id="d0"><img src="../jacoco-resources/redbar.gif" width="120" height="10" title="214" alt="214"/></td><td class="ctr2" id="e2">0%</td><td class="ctr1" id="f0">149</td><td class="ctr2" id="g0">152</td><td class="ctr1" id="h1">291</td><td class="ctr2" id="i2">297</td><td class="ctr1" id="j2">42</td><td class="ctr2" id="k1">45</td><td class="ctr1" id="l14">0</td><td class="ctr2" id="m1">1</td></tr><tr><td id="a7"><a href="MatrixManipulations.html" class="el_class">MatrixManipulations</a></td><td class="bar" id="b2"><img src="../jacoco-resources/redbar.gif" width="96" height="10" title="1,882" alt="1,882"/></td><td class="ctr2" id="c4">0%</td><td class="bar" id="d2"><img src="../jacoco-resources/redbar.gif" width="82" height="10" title="148" alt="148"/></td><td class="ctr2" id="e3">0%</td><td class="ctr1" id="f2">115</td><td class="ctr2" id="g3">115</td><td class="ctr1" id="h2">271</td><td class="ctr2" id="i3">271</td><td class="ctr1" id="j3">41</td><td class="ctr2" id="k3">41</td><td class="ctr1" id="l1">1</td><td class="ctr2" id="m2">1</td></tr><tr><td id="a4"><a href="Matrix.html" class="el_class">Matrix</a></td><td class="bar" id="b3"><img src="../jacoco-resources/redbar.gif" width="78" height="10" title="1,545" alt="1,545"/><img src="../jacoco-resources/greenbar.gif" width="8" height="10" title="169" alt="169"/></td><td class="ctr2" id="c1">9%</td><td class="bar" id="d3"><img src="../jacoco-resources/redbar.gif" width="67" height="10" title="120" alt="120"/><img src="../jacoco-resources/greenbar.gif" width="7" height="10" title="14" alt="14"/></td><td class="ctr2" id="e0">10%</td><td class="ctr1" id="f3">110</td><td class="ctr2" id="g2">120</td><td class="ctr1" id="h3">256</td><td class="ctr2" id="i1">298</td><td class="ctr1" id="j0">47</td><td class="ctr2" id="k0">53</td><td class="ctr1" id="l15">0</td><td class="ctr2" id="m3">1</td></tr><tr><td id="a16"><a href="Vector.html" class="el_class">Vector</a></td><td class="bar" id="b4"><img src="../jacoco-resources/redbar.gif" width="41" height="10" title="806" alt="806"/></td><td class="ctr2" id="c5">0%</td><td class="bar" id="d4"><img src="../jacoco-resources/redbar.gif" width="31" height="10" title="56" alt="56"/></td><td class="ctr2" id="e4">0%</td><td class="ctr1" id="f4">55</td><td class="ctr2" id="g4">55</td><td class="ctr1" id="h4">175</td><td class="ctr2" id="i4">175</td><td class="ctr1" id="j4">27</td><td class="ctr2" id="k4">27</td><td class="ctr1" id="l2">1</td><td class="ctr2" id="m4">1</td></tr><tr><td id="a13"><a href="SchurDecomposition.html" class="el_class">SchurDecomposition</a></td><td class="bar" id="b5"><img src="../jacoco-resources/redbar.gif" width="31" height="10" title="615" alt="615"/></td><td class="ctr2" id="c6">0%</td><td class="bar" id="d9"><img src="../jacoco-resources/redbar.gif" width="8" height="10" title="16" alt="16"/></td><td class="ctr2" id="e5">0%</td><td class="ctr1" id="f9">11</td><td class="ctr2" id="g9">11</td><td class="ctr1" id="h6">74</td><td class="ctr2" id="i6">74</td><td class="ctr1" id="j11">3</td><td class="ctr2" id="k11">3</td><td class="ctr1" id="l3">1</td><td class="ctr2" id="m5">1</td></tr><tr><td id="a12"><a href="QRDecomposition.html" class="el_class">QRDecomposition</a></td><td class="bar" id="b6"><img src="../jacoco-resources/redbar.gif" width="30" height="10" title="592" alt="592"/></td><td class="ctr2" id="c7">0%</td><td class="bar" id="d10"><img src="../jacoco-resources/redbar.gif" width="6" height="10" title="12" alt="12"/></td><td class="ctr2" id="e6">0%</td><td class="ctr1" id="f10">10</td><td class="ctr2" id="g10">10</td><td class="ctr1" id="h8">48</td><td class="ctr2" id="i8">48</td><td class="ctr1" id="j9">4</td><td class="ctr2" id="k9">4</td><td class="ctr1" id="l4">1</td><td class="ctr2" id="m6">1</td></tr><tr><td id="a3"><a href="LUDecomposition.html" class="el_class">LUDecomposition</a></td><td class="bar" id="b7"><img src="../jacoco-resources/redbar.gif" width="27" height="10" title="544" alt="544"/></td><td class="ctr2" id="c8">0%</td><td class="bar" id="d6"><img src="../jacoco-resources/redbar.gif" width="20" height="10" title="37" alt="37"/></td><td class="ctr2" id="e7">0%</td><td class="ctr1" id="f5">28</td><td class="ctr2" id="g5">28</td><td class="ctr1" id="h5">98</td><td class="ctr2" id="i5">98</td><td class="ctr1" id="j6">8</td><td class="ctr2" id="k6">8</td><td class="ctr1" id="l5">1</td><td class="ctr2" id="m7">1</td></tr><tr><td id="a14"><a href="SingularValueDecomposition.html" class="el_class">SingularValueDecomposition</a></td><td class="bar" id="b8"><img src="../jacoco-resources/redbar.gif" width="17" height="10" title="335" alt="335"/></td><td class="ctr2" id="c9">0%</td><td class="bar" id="d14"/><td class="ctr2" id="e14">n/a</td><td class="ctr1" id="f14">3</td><td class="ctr2" id="g14">3</td><td class="ctr1" id="h11">21</td><td class="ctr2" id="i11">21</td><td class="ctr1" id="j12">3</td><td class="ctr2" id="k12">3</td><td class="ctr1" id="l6">1</td><td class="ctr2" id="m8">1</td></tr><tr><td id="a15"><a href="Solvers.html" class="el_class">Solvers</a></td><td class="bar" id="b9"><img src="../jacoco-resources/redbar.gif" width="16" height="10" title="332" alt="332"/></td><td class="ctr2" id="c10">0%</td><td class="bar" id="d7"><img src="../jacoco-resources/redbar.gif" width="11" height="10" title="20" alt="20"/></td><td class="ctr2" id="e8">0%</td><td class="ctr1" id="f8">18</td><td class="ctr2" id="g8">18</td><td class="ctr1" id="h7">52</td><td class="ctr2" id="i7">52</td><td class="ctr1" id="j7">8</td><td class="ctr2" id="k7">8</td><td class="ctr1" id="l7">1</td><td class="ctr2" id="m9">1</td></tr><tr><td id="a8"><a href="MatrixMultiplicationAlgorithms.html" class="el_class">MatrixMultiplicationAlgorithms</a></td><td class="bar" id="b10"><img src="../jacoco-resources/redbar.gif" width="12" height="10" title="242" alt="242"/></td><td class="ctr2" id="c11">0%</td><td class="bar" id="d11"><img src="../jacoco-resources/redbar.gif" width="5" height="10" title="10" alt="10"/></td><td class="ctr2" id="e9">0%</td><td class="ctr1" id="f11">9</td><td class="ctr2" id="g11">9</td><td class="ctr1" id="h12">18</td><td class="ctr2" id="i12">18</td><td class="ctr1" id="j10">4</td><td class="ctr2" id="k10">4</td><td class="ctr1" id="l8">1</td><td class="ctr2" id="m10">1</td></tr><tr><td id="a6"><a href="MatrixComparisons.html" class="el_class">MatrixComparisons</a></td><td class="bar" id="b11"><img src="../jacoco-resources/redbar.gif" width="10" height="10" title="208" alt="208"/></td><td class="ctr2" id="c12">0%</td><td class="bar" id="d5"><img src="../jacoco-resources/redbar.gif" width="23" height="10" title="42" alt="42"/></td><td class="ctr2" id="e10">0%</td><td class="ctr1" id="f6">28</td><td class="ctr2" id="g6">28</td><td class="ctr1" id="h9">47</td><td class="ctr2" id="i9">47</td><td class="ctr1" id="j8">7</td><td class="ctr2" id="k8">7</td><td class="ctr1" id="l9">1</td><td class="ctr2" id="m11">1</td></tr><tr><td id="a2"><a href="LQDecomposition.html" class="el_class">LQDecomposition</a></td><td class="bar" id="b12"><img src="../jacoco-resources/redbar.gif" width="7" height="10" title="156" alt="156"/></td><td class="ctr2" id="c13">0%</td><td class="bar" id="d15"/><td class="ctr2" id="e15">n/a</td><td class="ctr1" id="f15">3</td><td class="ctr2" id="g15">3</td><td class="ctr1" id="h14">14</td><td class="ctr2" id="i14">14</td><td class="ctr1" id="j13">3</td><td class="ctr2" id="k13">3</td><td class="ctr1" id="l10">1</td><td class="ctr2" id="m12">1</td></tr><tr><td id="a1"><a href="Decompose.html" class="el_class">Decompose</a></td><td class="bar" id="b13"><img src="../jacoco-resources/redbar.gif" width="7" height="10" title="142" alt="142"/></td><td class="ctr2" id="c14">0%</td><td class="bar" id="d8"><img src="../jacoco-resources/redbar.gif" width="10" height="10" title="18" alt="18"/></td><td class="ctr2" id="e11">0%</td><td class="ctr1" id="f7">21</td><td class="ctr2" id="g7">21</td><td class="ctr1" id="h10">31</td><td class="ctr2" id="i10">31</td><td class="ctr1" id="j5">12</td><td class="ctr2" id="k5">12</td><td class="ctr1" id="l11">1</td><td class="ctr2" id="m13">1</td></tr><tr><td id="a0"><a href="CholeskyDecomposition.html" class="el_class">CholeskyDecomposition</a></td><td class="bar" id="b14"><img src="../jacoco-resources/redbar.gif" width="6" height="10" title="123" alt="123"/></td><td class="ctr2" id="c15">0%</td><td class="bar" id="d12"><img src="../jacoco-resources/redbar.gif" width="5" height="10" title="10" alt="10"/></td><td class="ctr2" id="e12">0%</td><td class="ctr1" id="f12">7</td><td class="ctr2" id="g12">7</td><td class="ctr1" id="h13">18</td><td class="ctr2" id="i13">18</td><td class="ctr1" id="j14">2</td><td class="ctr2" id="k14">2</td><td class="ctr1" id="l12">1</td><td class="ctr2" id="m14">1</td></tr><tr><td id="a5"><a href="MatrixChecks.html" class="el_class">MatrixChecks</a></td><td class="bar" id="b15"><img src="../jacoco-resources/redbar.gif" width="2" height="10" title="47" alt="47"/></td><td class="ctr2" id="c16">0%</td><td class="bar" id="d13"><img src="../jacoco-resources/redbar.gif" width="4" height="10" title="8" alt="8"/></td><td class="ctr2" id="e13">0%</td><td class="ctr1" id="f13">6</td><td class="ctr2" id="g13">6</td><td class="ctr1" id="h15">12</td><td class="ctr2" id="i15">12</td><td class="ctr1" id="j15">2</td><td class="ctr2" id="k15">2</td><td class="ctr1" id="l13">1</td><td class="ctr2" id="m15">1</td></tr><tr><td id="a11"><a href="PrintOptions.html" class="el_class">PrintOptions</a></td><td class="bar" id="b16"/><td class="ctr2" id="c0">56%</td><td class="bar" id="d16"/><td class="ctr2" id="e16">n/a</td><td class="ctr1" id="f16">1</td><td class="ctr2" id="g16">2</td><td class="ctr1" id="h16">2</td><td class="ctr2" id="i16">6</td><td class="ctr1" id="j16">1</td><td class="ctr2" id="k16">2</td><td class="ctr1" id="l16">0</td><td class="ctr2" id="m16">1</td></tr></tbody></table><div class="footer"><span class="right">Created with <a href="http://www.jacoco.org/jacoco">JaCoCo</a> 0.8.7.202105040129</span></div></body></html>
\ No newline at end of file
+<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../jacoco-resources/report.css" type="text/css"/><link rel="shortcut icon" href="../jacoco-resources/report.gif" type="image/gif"/><title>linalg</title><script type="text/javascript" src="../jacoco-resources/sort.js"></script></head><body onload="initialSort(['breadcrumb', 'coveragetable'])"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="index.source.html" class="el_source">Source Files</a><a href="../jacoco-sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Java-Linear-Algebra</a> &gt; <span class="el_package">linalg</span></div><h1>linalg</h1><table class="coverage" cellspacing="0" id="coveragetable"><thead><tr><td class="sortable" id="a" onclick="toggleSort(this)">Element</td><td class="down sortable bar" id="b" onclick="toggleSort(this)">Missed Instructions</td><td class="sortable ctr2" id="c" onclick="toggleSort(this)">Cov.</td><td class="sortable bar" id="d" onclick="toggleSort(this)">Missed Branches</td><td class="sortable ctr2" id="e" onclick="toggleSort(this)">Cov.</td><td class="sortable ctr1" id="f" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="g" onclick="toggleSort(this)">Cxty</td><td class="sortable ctr1" id="h" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="i" onclick="toggleSort(this)">Lines</td><td class="sortable ctr1" id="j" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="k" onclick="toggleSort(this)">Methods</td><td class="sortable ctr1" id="l" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="m" onclick="toggleSort(this)">Classes</td></tr></thead><tfoot><tr><td>Total</td><td class="bar">12,412 of 12,608</td><td class="ctr2">1%</td><td class="bar">929 of 943</td><td class="ctr2">1%</td><td class="ctr1">729</td><td class="ctr2">743</td><td class="ctr1">1,760</td><td class="ctr2">1,812</td><td class="ctr1">260</td><td class="ctr2">270</td><td class="ctr1">14</td><td class="ctr2">17</td></tr></tfoot><tbody><tr><td id="a9"><a href="MatrixOperations.html" class="el_class">MatrixOperations</a></td><td class="bar" id="b0"><img src="../jacoco-resources/redbar.gif" width="120" height="10" title="2,504" alt="2,504"/></td><td class="ctr2" id="c3">0%</td><td class="bar" id="d0"><img src="../jacoco-resources/redbar.gif" width="120" height="10" title="218" alt="218"/></td><td class="ctr2" id="e1">0%</td><td class="ctr1" id="f0">155</td><td class="ctr2" id="g0">155</td><td class="ctr1" id="h0">332</td><td class="ctr2" id="i0">332</td><td class="ctr1" id="j1">46</td><td class="ctr2" id="k1">46</td><td class="ctr1" id="l0">1</td><td class="ctr2" id="m0">1</td></tr><tr><td id="a10"><a href="MatrixProperties.html" class="el_class">MatrixProperties</a></td><td class="bar" id="b1"><img src="../jacoco-resources/redbar.gif" width="111" height="10" title="2,332" alt="2,332"/></td><td class="ctr2" id="c2">0%</td><td class="bar" id="d1"><img src="../jacoco-resources/redbar.gif" width="117" height="10" title="214" alt="214"/></td><td class="ctr2" id="e2">0%</td><td class="ctr1" id="f1">149</td><td class="ctr2" id="g1">152</td><td class="ctr1" id="h1">291</td><td class="ctr2" id="i2">297</td><td class="ctr1" id="j2">42</td><td class="ctr2" id="k2">45</td><td class="ctr1" id="l14">0</td><td class="ctr2" id="m1">1</td></tr><tr><td id="a7"><a href="MatrixManipulations.html" class="el_class">MatrixManipulations</a></td><td class="bar" id="b2"><img src="../jacoco-resources/redbar.gif" width="90" height="10" title="1,882" alt="1,882"/></td><td class="ctr2" id="c4">0%</td><td class="bar" id="d2"><img src="../jacoco-resources/redbar.gif" width="81" height="10" title="148" alt="148"/></td><td class="ctr2" id="e3">0%</td><td class="ctr1" id="f2">115</td><td class="ctr2" id="g3">115</td><td class="ctr1" id="h2">271</td><td class="ctr2" id="i3">271</td><td class="ctr1" id="j3">41</td><td class="ctr2" id="k3">41</td><td class="ctr1" id="l1">1</td><td class="ctr2" id="m2">1</td></tr><tr><td id="a4"><a href="Matrix.html" class="el_class">Matrix</a></td><td class="bar" id="b3"><img src="../jacoco-resources/redbar.gif" width="74" height="10" title="1,545" alt="1,545"/><img src="../jacoco-resources/greenbar.gif" width="8" height="10" title="169" alt="169"/></td><td class="ctr2" id="c1">9%</td><td class="bar" id="d3"><img src="../jacoco-resources/redbar.gif" width="66" height="10" title="120" alt="120"/><img src="../jacoco-resources/greenbar.gif" width="7" height="10" title="14" alt="14"/></td><td class="ctr2" id="e0">10%</td><td class="ctr1" id="f3">110</td><td class="ctr2" id="g2">120</td><td class="ctr1" id="h3">256</td><td class="ctr2" id="i1">298</td><td class="ctr1" id="j0">47</td><td class="ctr2" id="k0">53</td><td class="ctr1" id="l15">0</td><td class="ctr2" id="m3">1</td></tr><tr><td id="a16"><a href="Vector.html" class="el_class">Vector</a></td><td class="bar" id="b4"><img src="../jacoco-resources/redbar.gif" width="38" height="10" title="806" alt="806"/></td><td class="ctr2" id="c5">0%</td><td class="bar" id="d4"><img src="../jacoco-resources/redbar.gif" width="30" height="10" title="56" alt="56"/></td><td class="ctr2" id="e4">0%</td><td class="ctr1" id="f4">55</td><td class="ctr2" id="g4">55</td><td class="ctr1" id="h4">175</td><td class="ctr2" id="i4">175</td><td class="ctr1" id="j4">27</td><td class="ctr2" id="k4">27</td><td class="ctr1" id="l2">1</td><td class="ctr2" id="m4">1</td></tr><tr><td id="a13"><a href="SchurDecomposition.html" class="el_class">SchurDecomposition</a></td><td class="bar" id="b5"><img src="../jacoco-resources/redbar.gif" width="29" height="10" title="615" alt="615"/></td><td class="ctr2" id="c6">0%</td><td class="bar" id="d9"><img src="../jacoco-resources/redbar.gif" width="8" height="10" title="16" alt="16"/></td><td class="ctr2" id="e5">0%</td><td class="ctr1" id="f9">11</td><td class="ctr2" id="g9">11</td><td class="ctr1" id="h6">74</td><td class="ctr2" id="i6">74</td><td class="ctr1" id="j11">3</td><td class="ctr2" id="k11">3</td><td class="ctr1" id="l3">1</td><td class="ctr2" id="m5">1</td></tr><tr><td id="a12"><a href="QRDecomposition.html" class="el_class">QRDecomposition</a></td><td class="bar" id="b6"><img src="../jacoco-resources/redbar.gif" width="28" height="10" title="592" alt="592"/></td><td class="ctr2" id="c7">0%</td><td class="bar" id="d10"><img src="../jacoco-resources/redbar.gif" width="6" height="10" title="12" alt="12"/></td><td class="ctr2" id="e6">0%</td><td class="ctr1" id="f10">10</td><td class="ctr2" id="g10">10</td><td class="ctr1" id="h8">48</td><td class="ctr2" id="i8">48</td><td class="ctr1" id="j9">4</td><td class="ctr2" id="k9">4</td><td class="ctr1" id="l4">1</td><td class="ctr2" id="m6">1</td></tr><tr><td id="a3"><a href="LUDecomposition.html" class="el_class">LUDecomposition</a></td><td class="bar" id="b7"><img src="../jacoco-resources/redbar.gif" width="26" height="10" title="544" alt="544"/></td><td class="ctr2" id="c8">0%</td><td class="bar" id="d6"><img src="../jacoco-resources/redbar.gif" width="20" height="10" title="37" alt="37"/></td><td class="ctr2" id="e7">0%</td><td class="ctr1" id="f5">28</td><td class="ctr2" id="g5">28</td><td class="ctr1" id="h5">98</td><td class="ctr2" id="i5">98</td><td class="ctr1" id="j6">8</td><td class="ctr2" id="k6">8</td><td class="ctr1" id="l5">1</td><td class="ctr2" id="m7">1</td></tr><tr><td id="a14"><a href="SingularValueDecomposition.html" class="el_class">SingularValueDecomposition</a></td><td class="bar" id="b8"><img src="../jacoco-resources/redbar.gif" width="16" height="10" title="335" alt="335"/></td><td class="ctr2" id="c9">0%</td><td class="bar" id="d14"/><td class="ctr2" id="e14">n/a</td><td class="ctr1" id="f14">3</td><td class="ctr2" id="g14">3</td><td class="ctr1" id="h11">21</td><td class="ctr2" id="i11">21</td><td class="ctr1" id="j12">3</td><td class="ctr2" id="k12">3</td><td class="ctr1" id="l6">1</td><td class="ctr2" id="m8">1</td></tr><tr><td id="a15"><a href="Solvers.html" class="el_class">Solvers</a></td><td class="bar" id="b9"><img src="../jacoco-resources/redbar.gif" width="15" height="10" title="332" alt="332"/></td><td class="ctr2" id="c10">0%</td><td class="bar" id="d7"><img src="../jacoco-resources/redbar.gif" width="11" height="10" title="20" alt="20"/></td><td class="ctr2" id="e8">0%</td><td class="ctr1" id="f8">18</td><td class="ctr2" id="g8">18</td><td class="ctr1" id="h7">52</td><td class="ctr2" id="i7">52</td><td class="ctr1" id="j7">8</td><td class="ctr2" id="k7">8</td><td class="ctr1" id="l7">1</td><td class="ctr2" id="m9">1</td></tr><tr><td id="a8"><a href="MatrixMultiplicationAlgorithms.html" class="el_class">MatrixMultiplicationAlgorithms</a></td><td class="bar" id="b10"><img src="../jacoco-resources/redbar.gif" width="11" height="10" title="242" alt="242"/></td><td class="ctr2" id="c11">0%</td><td class="bar" id="d11"><img src="../jacoco-resources/redbar.gif" width="5" height="10" title="10" alt="10"/></td><td class="ctr2" id="e9">0%</td><td class="ctr1" id="f11">9</td><td class="ctr2" id="g11">9</td><td class="ctr1" id="h12">18</td><td class="ctr2" id="i12">18</td><td class="ctr1" id="j10">4</td><td class="ctr2" id="k10">4</td><td class="ctr1" id="l8">1</td><td class="ctr2" id="m10">1</td></tr><tr><td id="a6"><a href="MatrixComparisons.html" class="el_class">MatrixComparisons</a></td><td class="bar" id="b11"><img src="../jacoco-resources/redbar.gif" width="9" height="10" title="208" alt="208"/></td><td class="ctr2" id="c12">0%</td><td class="bar" id="d5"><img src="../jacoco-resources/redbar.gif" width="23" height="10" title="42" alt="42"/></td><td class="ctr2" id="e10">0%</td><td class="ctr1" id="f6">28</td><td class="ctr2" id="g6">28</td><td class="ctr1" id="h9">47</td><td class="ctr2" id="i9">47</td><td class="ctr1" id="j8">7</td><td class="ctr2" id="k8">7</td><td class="ctr1" id="l9">1</td><td class="ctr2" id="m11">1</td></tr><tr><td id="a2"><a href="LQDecomposition.html" class="el_class">LQDecomposition</a></td><td class="bar" id="b12"><img src="../jacoco-resources/redbar.gif" width="7" height="10" title="156" alt="156"/></td><td class="ctr2" id="c13">0%</td><td class="bar" id="d15"/><td class="ctr2" id="e15">n/a</td><td class="ctr1" id="f15">3</td><td class="ctr2" id="g15">3</td><td class="ctr1" id="h14">14</td><td class="ctr2" id="i14">14</td><td class="ctr1" id="j13">3</td><td class="ctr2" id="k13">3</td><td class="ctr1" id="l10">1</td><td class="ctr2" id="m12">1</td></tr><tr><td id="a1"><a href="Decompose.html" class="el_class">Decompose</a></td><td class="bar" id="b13"><img src="../jacoco-resources/redbar.gif" width="6" height="10" title="142" alt="142"/></td><td class="ctr2" id="c14">0%</td><td class="bar" id="d8"><img src="../jacoco-resources/redbar.gif" width="9" height="10" title="18" alt="18"/></td><td class="ctr2" id="e11">0%</td><td class="ctr1" id="f7">21</td><td class="ctr2" id="g7">21</td><td class="ctr1" id="h10">31</td><td class="ctr2" id="i10">31</td><td class="ctr1" id="j5">12</td><td class="ctr2" id="k5">12</td><td class="ctr1" id="l11">1</td><td class="ctr2" id="m13">1</td></tr><tr><td id="a0"><a href="CholeskyDecomposition.html" class="el_class">CholeskyDecomposition</a></td><td class="bar" id="b14"><img src="../jacoco-resources/redbar.gif" width="5" height="10" title="123" alt="123"/></td><td class="ctr2" id="c15">0%</td><td class="bar" id="d12"><img src="../jacoco-resources/redbar.gif" width="5" height="10" title="10" alt="10"/></td><td class="ctr2" id="e12">0%</td><td class="ctr1" id="f12">7</td><td class="ctr2" id="g12">7</td><td class="ctr1" id="h13">18</td><td class="ctr2" id="i13">18</td><td class="ctr1" id="j14">2</td><td class="ctr2" id="k14">2</td><td class="ctr1" id="l12">1</td><td class="ctr2" id="m14">1</td></tr><tr><td id="a5"><a href="MatrixChecks.html" class="el_class">MatrixChecks</a></td><td class="bar" id="b15"><img src="../jacoco-resources/redbar.gif" width="2" height="10" title="47" alt="47"/></td><td class="ctr2" id="c16">0%</td><td class="bar" id="d13"><img src="../jacoco-resources/redbar.gif" width="4" height="10" title="8" alt="8"/></td><td class="ctr2" id="e13">0%</td><td class="ctr1" id="f13">6</td><td class="ctr2" id="g13">6</td><td class="ctr1" id="h15">12</td><td class="ctr2" id="i15">12</td><td class="ctr1" id="j15">2</td><td class="ctr2" id="k15">2</td><td class="ctr1" id="l13">1</td><td class="ctr2" id="m15">1</td></tr><tr><td id="a11"><a href="PrintOptions.html" class="el_class">PrintOptions</a></td><td class="bar" id="b16"/><td class="ctr2" id="c0">56%</td><td class="bar" id="d16"/><td class="ctr2" id="e16">n/a</td><td class="ctr1" id="f16">1</td><td class="ctr2" id="g16">2</td><td class="ctr1" id="h16">2</td><td class="ctr2" id="i16">6</td><td class="ctr1" id="j16">1</td><td class="ctr2" id="k16">2</td><td class="ctr1" id="l16">0</td><td class="ctr2" id="m16">1</td></tr></tbody></table><div class="footer"><span class="right">Created with <a href="http://www.jacoco.org/jacoco">JaCoCo</a> 0.8.7.202105040129</span></div></body></html>
\ No newline at end of file
Index: target/site/jacoco/linalg/index.source.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\"><head><meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\"/><link rel=\"stylesheet\" href=\"../jacoco-resources/report.css\" type=\"text/css\"/><link rel=\"shortcut icon\" href=\"../jacoco-resources/report.gif\" type=\"image/gif\"/><title>linalg</title><script type=\"text/javascript\" src=\"../jacoco-resources/sort.js\"></script></head><body onload=\"initialSort(['breadcrumb', 'coveragetable'])\"><div class=\"breadcrumb\" id=\"breadcrumb\"><span class=\"info\"><a href=\"index.html\" class=\"el_class\">Classes</a><a href=\"../jacoco-sessions.html\" class=\"el_session\">Sessions</a></span><a href=\"../index.html\" class=\"el_report\">Java-Linear-Algebra</a> &gt; <span class=\"el_package\">linalg</span></div><h1>linalg</h1><table class=\"coverage\" cellspacing=\"0\" id=\"coveragetable\"><thead><tr><td class=\"sortable\" id=\"a\" onclick=\"toggleSort(this)\">Element</td><td class=\"down sortable bar\" id=\"b\" onclick=\"toggleSort(this)\">Missed Instructions</td><td class=\"sortable ctr2\" id=\"c\" onclick=\"toggleSort(this)\">Cov.</td><td class=\"sortable bar\" id=\"d\" onclick=\"toggleSort(this)\">Missed Branches</td><td class=\"sortable ctr2\" id=\"e\" onclick=\"toggleSort(this)\">Cov.</td><td class=\"sortable ctr1\" id=\"f\" onclick=\"toggleSort(this)\">Missed</td><td class=\"sortable ctr2\" id=\"g\" onclick=\"toggleSort(this)\">Cxty</td><td class=\"sortable ctr1\" id=\"h\" onclick=\"toggleSort(this)\">Missed</td><td class=\"sortable ctr2\" id=\"i\" onclick=\"toggleSort(this)\">Lines</td><td class=\"sortable ctr1\" id=\"j\" onclick=\"toggleSort(this)\">Missed</td><td class=\"sortable ctr2\" id=\"k\" onclick=\"toggleSort(this)\">Methods</td><td class=\"sortable ctr1\" id=\"l\" onclick=\"toggleSort(this)\">Missed</td><td class=\"sortable ctr2\" id=\"m\" onclick=\"toggleSort(this)\">Classes</td></tr></thead><tfoot><tr><td>Total</td><td class=\"bar\">12,246 of 12,442</td><td class=\"ctr2\">1%</td><td class=\"bar\">913 of 927</td><td class=\"ctr2\">1%</td><td class=\"ctr1\">718</td><td class=\"ctr2\">732</td><td class=\"ctr1\">1,738</td><td class=\"ctr2\">1,790</td><td class=\"ctr1\">257</td><td class=\"ctr2\">267</td><td class=\"ctr1\">14</td><td class=\"ctr2\">17</td></tr></tfoot><tbody><tr><td id=\"a9\"><a href=\"MatrixOperations.java.html\" class=\"el_source\">MatrixOperations.java</a></td><td class=\"bar\" id=\"b0\"><img src=\"../jacoco-resources/redbar.gif\" width=\"119\" height=\"10\" title=\"2,338\" alt=\"2,338\"/></td><td class=\"ctr2\" id=\"c3\">0%</td><td class=\"bar\" id=\"d1\"><img src=\"../jacoco-resources/redbar.gif\" width=\"113\" height=\"10\" title=\"202\" alt=\"202\"/></td><td class=\"ctr2\" id=\"e1\">0%</td><td class=\"ctr1\" id=\"f1\">144</td><td class=\"ctr2\" id=\"g1\">144</td><td class=\"ctr1\" id=\"h0\">310</td><td class=\"ctr2\" id=\"i0\">310</td><td class=\"ctr1\" id=\"j1\">43</td><td class=\"ctr2\" id=\"k2\">43</td><td class=\"ctr1\" id=\"l0\">1</td><td class=\"ctr2\" id=\"m0\">1</td></tr><tr><td id=\"a10\"><a href=\"MatrixProperties.java.html\" class=\"el_source\">MatrixProperties.java</a></td><td class=\"bar\" id=\"b1\"><img src=\"../jacoco-resources/redbar.gif\" width=\"119\" height=\"10\" title=\"2,332\" alt=\"2,332\"/></td><td class=\"ctr2\" id=\"c2\">0%</td><td class=\"bar\" id=\"d0\"><img src=\"../jacoco-resources/redbar.gif\" width=\"120\" height=\"10\" title=\"214\" alt=\"214\"/></td><td class=\"ctr2\" id=\"e2\">0%</td><td class=\"ctr1\" id=\"f0\">149</td><td class=\"ctr2\" id=\"g0\">152</td><td class=\"ctr1\" id=\"h1\">291</td><td class=\"ctr2\" id=\"i2\">297</td><td class=\"ctr1\" id=\"j2\">42</td><td class=\"ctr2\" id=\"k1\">45</td><td class=\"ctr1\" id=\"l14\">0</td><td class=\"ctr2\" id=\"m1\">1</td></tr><tr><td id=\"a7\"><a href=\"MatrixManipulations.java.html\" class=\"el_source\">MatrixManipulations.java</a></td><td class=\"bar\" id=\"b2\"><img src=\"../jacoco-resources/redbar.gif\" width=\"96\" height=\"10\" title=\"1,882\" alt=\"1,882\"/></td><td class=\"ctr2\" id=\"c4\">0%</td><td class=\"bar\" id=\"d2\"><img src=\"../jacoco-resources/redbar.gif\" width=\"82\" height=\"10\" title=\"148\" alt=\"148\"/></td><td class=\"ctr2\" id=\"e3\">0%</td><td class=\"ctr1\" id=\"f2\">115</td><td class=\"ctr2\" id=\"g3\">115</td><td class=\"ctr1\" id=\"h2\">271</td><td class=\"ctr2\" id=\"i3\">271</td><td class=\"ctr1\" id=\"j3\">41</td><td class=\"ctr2\" id=\"k3\">41</td><td class=\"ctr1\" id=\"l1\">1</td><td class=\"ctr2\" id=\"m2\">1</td></tr><tr><td id=\"a4\"><a href=\"Matrix.java.html\" class=\"el_source\">Matrix.java</a></td><td class=\"bar\" id=\"b3\"><img src=\"../jacoco-resources/redbar.gif\" width=\"78\" height=\"10\" title=\"1,545\" alt=\"1,545\"/><img src=\"../jacoco-resources/greenbar.gif\" width=\"8\" height=\"10\" title=\"169\" alt=\"169\"/></td><td class=\"ctr2\" id=\"c1\">9%</td><td class=\"bar\" id=\"d3\"><img src=\"../jacoco-resources/redbar.gif\" width=\"67\" height=\"10\" title=\"120\" alt=\"120\"/><img src=\"../jacoco-resources/greenbar.gif\" width=\"7\" height=\"10\" title=\"14\" alt=\"14\"/></td><td class=\"ctr2\" id=\"e0\">10%</td><td class=\"ctr1\" id=\"f3\">110</td><td class=\"ctr2\" id=\"g2\">120</td><td class=\"ctr1\" id=\"h3\">256</td><td class=\"ctr2\" id=\"i1\">298</td><td class=\"ctr1\" id=\"j0\">47</td><td class=\"ctr2\" id=\"k0\">53</td><td class=\"ctr1\" id=\"l15\">0</td><td class=\"ctr2\" id=\"m3\">1</td></tr><tr><td id=\"a16\"><a href=\"Vector.java.html\" class=\"el_source\">Vector.java</a></td><td class=\"bar\" id=\"b4\"><img src=\"../jacoco-resources/redbar.gif\" width=\"41\" height=\"10\" title=\"806\" alt=\"806\"/></td><td class=\"ctr2\" id=\"c5\">0%</td><td class=\"bar\" id=\"d4\"><img src=\"../jacoco-resources/redbar.gif\" width=\"31\" height=\"10\" title=\"56\" alt=\"56\"/></td><td class=\"ctr2\" id=\"e4\">0%</td><td class=\"ctr1\" id=\"f4\">55</td><td class=\"ctr2\" id=\"g4\">55</td><td class=\"ctr1\" id=\"h4\">175</td><td class=\"ctr2\" id=\"i4\">175</td><td class=\"ctr1\" id=\"j4\">27</td><td class=\"ctr2\" id=\"k4\">27</td><td class=\"ctr1\" id=\"l2\">1</td><td class=\"ctr2\" id=\"m4\">1</td></tr><tr><td id=\"a13\"><a href=\"SchurDecomposition.java.html\" class=\"el_source\">SchurDecomposition.java</a></td><td class=\"bar\" id=\"b5\"><img src=\"../jacoco-resources/redbar.gif\" width=\"31\" height=\"10\" title=\"615\" alt=\"615\"/></td><td class=\"ctr2\" id=\"c6\">0%</td><td class=\"bar\" id=\"d9\"><img src=\"../jacoco-resources/redbar.gif\" width=\"8\" height=\"10\" title=\"16\" alt=\"16\"/></td><td class=\"ctr2\" id=\"e5\">0%</td><td class=\"ctr1\" id=\"f9\">11</td><td class=\"ctr2\" id=\"g9\">11</td><td class=\"ctr1\" id=\"h6\">74</td><td class=\"ctr2\" id=\"i6\">74</td><td class=\"ctr1\" id=\"j11\">3</td><td class=\"ctr2\" id=\"k11\">3</td><td class=\"ctr1\" id=\"l3\">1</td><td class=\"ctr2\" id=\"m5\">1</td></tr><tr><td id=\"a12\"><a href=\"QRDecomposition.java.html\" class=\"el_source\">QRDecomposition.java</a></td><td class=\"bar\" id=\"b6\"><img src=\"../jacoco-resources/redbar.gif\" width=\"30\" height=\"10\" title=\"592\" alt=\"592\"/></td><td class=\"ctr2\" id=\"c7\">0%</td><td class=\"bar\" id=\"d10\"><img src=\"../jacoco-resources/redbar.gif\" width=\"6\" height=\"10\" title=\"12\" alt=\"12\"/></td><td class=\"ctr2\" id=\"e6\">0%</td><td class=\"ctr1\" id=\"f10\">10</td><td class=\"ctr2\" id=\"g10\">10</td><td class=\"ctr1\" id=\"h8\">48</td><td class=\"ctr2\" id=\"i8\">48</td><td class=\"ctr1\" id=\"j9\">4</td><td class=\"ctr2\" id=\"k9\">4</td><td class=\"ctr1\" id=\"l4\">1</td><td class=\"ctr2\" id=\"m6\">1</td></tr><tr><td id=\"a3\"><a href=\"LUDecomposition.java.html\" class=\"el_source\">LUDecomposition.java</a></td><td class=\"bar\" id=\"b7\"><img src=\"../jacoco-resources/redbar.gif\" width=\"27\" height=\"10\" title=\"544\" alt=\"544\"/></td><td class=\"ctr2\" id=\"c8\">0%</td><td class=\"bar\" id=\"d6\"><img src=\"../jacoco-resources/redbar.gif\" width=\"20\" height=\"10\" title=\"37\" alt=\"37\"/></td><td class=\"ctr2\" id=\"e7\">0%</td><td class=\"ctr1\" id=\"f5\">28</td><td class=\"ctr2\" id=\"g5\">28</td><td class=\"ctr1\" id=\"h5\">98</td><td class=\"ctr2\" id=\"i5\">98</td><td class=\"ctr1\" id=\"j6\">8</td><td class=\"ctr2\" id=\"k6\">8</td><td class=\"ctr1\" id=\"l5\">1</td><td class=\"ctr2\" id=\"m7\">1</td></tr><tr><td id=\"a14\"><a href=\"SingularValueDecomposition.java.html\" class=\"el_source\">SingularValueDecomposition.java</a></td><td class=\"bar\" id=\"b8\"><img src=\"../jacoco-resources/redbar.gif\" width=\"17\" height=\"10\" title=\"335\" alt=\"335\"/></td><td class=\"ctr2\" id=\"c9\">0%</td><td class=\"bar\" id=\"d14\"/><td class=\"ctr2\" id=\"e14\">n/a</td><td class=\"ctr1\" id=\"f14\">3</td><td class=\"ctr2\" id=\"g14\">3</td><td class=\"ctr1\" id=\"h11\">21</td><td class=\"ctr2\" id=\"i11\">21</td><td class=\"ctr1\" id=\"j12\">3</td><td class=\"ctr2\" id=\"k12\">3</td><td class=\"ctr1\" id=\"l6\">1</td><td class=\"ctr2\" id=\"m8\">1</td></tr><tr><td id=\"a15\"><a href=\"Solvers.java.html\" class=\"el_source\">Solvers.java</a></td><td class=\"bar\" id=\"b9\"><img src=\"../jacoco-resources/redbar.gif\" width=\"16\" height=\"10\" title=\"332\" alt=\"332\"/></td><td class=\"ctr2\" id=\"c10\">0%</td><td class=\"bar\" id=\"d7\"><img src=\"../jacoco-resources/redbar.gif\" width=\"11\" height=\"10\" title=\"20\" alt=\"20\"/></td><td class=\"ctr2\" id=\"e8\">0%</td><td class=\"ctr1\" id=\"f8\">18</td><td class=\"ctr2\" id=\"g8\">18</td><td class=\"ctr1\" id=\"h7\">52</td><td class=\"ctr2\" id=\"i7\">52</td><td class=\"ctr1\" id=\"j7\">8</td><td class=\"ctr2\" id=\"k7\">8</td><td class=\"ctr1\" id=\"l7\">1</td><td class=\"ctr2\" id=\"m9\">1</td></tr><tr><td id=\"a8\"><a href=\"MatrixMultiplicationAlgorithms.java.html\" class=\"el_source\">MatrixMultiplicationAlgorithms.java</a></td><td class=\"bar\" id=\"b10\"><img src=\"../jacoco-resources/redbar.gif\" width=\"12\" height=\"10\" title=\"242\" alt=\"242\"/></td><td class=\"ctr2\" id=\"c11\">0%</td><td class=\"bar\" id=\"d11\"><img src=\"../jacoco-resources/redbar.gif\" width=\"5\" height=\"10\" title=\"10\" alt=\"10\"/></td><td class=\"ctr2\" id=\"e9\">0%</td><td class=\"ctr1\" id=\"f11\">9</td><td class=\"ctr2\" id=\"g11\">9</td><td class=\"ctr1\" id=\"h12\">18</td><td class=\"ctr2\" id=\"i12\">18</td><td class=\"ctr1\" id=\"j10\">4</td><td class=\"ctr2\" id=\"k10\">4</td><td class=\"ctr1\" id=\"l8\">1</td><td class=\"ctr2\" id=\"m10\">1</td></tr><tr><td id=\"a6\"><a href=\"MatrixComparisons.java.html\" class=\"el_source\">MatrixComparisons.java</a></td><td class=\"bar\" id=\"b11\"><img src=\"../jacoco-resources/redbar.gif\" width=\"10\" height=\"10\" title=\"208\" alt=\"208\"/></td><td class=\"ctr2\" id=\"c12\">0%</td><td class=\"bar\" id=\"d5\"><img src=\"../jacoco-resources/redbar.gif\" width=\"23\" height=\"10\" title=\"42\" alt=\"42\"/></td><td class=\"ctr2\" id=\"e10\">0%</td><td class=\"ctr1\" id=\"f6\">28</td><td class=\"ctr2\" id=\"g6\">28</td><td class=\"ctr1\" id=\"h9\">47</td><td class=\"ctr2\" id=\"i9\">47</td><td class=\"ctr1\" id=\"j8\">7</td><td class=\"ctr2\" id=\"k8\">7</td><td class=\"ctr1\" id=\"l9\">1</td><td class=\"ctr2\" id=\"m11\">1</td></tr><tr><td id=\"a2\"><a href=\"LQDecomposition.java.html\" class=\"el_source\">LQDecomposition.java</a></td><td class=\"bar\" id=\"b12\"><img src=\"../jacoco-resources/redbar.gif\" width=\"7\" height=\"10\" title=\"156\" alt=\"156\"/></td><td class=\"ctr2\" id=\"c13\">0%</td><td class=\"bar\" id=\"d15\"/><td class=\"ctr2\" id=\"e15\">n/a</td><td class=\"ctr1\" id=\"f15\">3</td><td class=\"ctr2\" id=\"g15\">3</td><td class=\"ctr1\" id=\"h14\">14</td><td class=\"ctr2\" id=\"i14\">14</td><td class=\"ctr1\" id=\"j13\">3</td><td class=\"ctr2\" id=\"k13\">3</td><td class=\"ctr1\" id=\"l10\">1</td><td class=\"ctr2\" id=\"m12\">1</td></tr><tr><td id=\"a1\"><a href=\"Decompose.java.html\" class=\"el_source\">Decompose.java</a></td><td class=\"bar\" id=\"b13\"><img src=\"../jacoco-resources/redbar.gif\" width=\"7\" height=\"10\" title=\"142\" alt=\"142\"/></td><td class=\"ctr2\" id=\"c14\">0%</td><td class=\"bar\" id=\"d8\"><img src=\"../jacoco-resources/redbar.gif\" width=\"10\" height=\"10\" title=\"18\" alt=\"18\"/></td><td class=\"ctr2\" id=\"e11\">0%</td><td class=\"ctr1\" id=\"f7\">21</td><td class=\"ctr2\" id=\"g7\">21</td><td class=\"ctr1\" id=\"h10\">31</td><td class=\"ctr2\" id=\"i10\">31</td><td class=\"ctr1\" id=\"j5\">12</td><td class=\"ctr2\" id=\"k5\">12</td><td class=\"ctr1\" id=\"l11\">1</td><td class=\"ctr2\" id=\"m13\">1</td></tr><tr><td id=\"a0\"><a href=\"CholeskyDecomposition.java.html\" class=\"el_source\">CholeskyDecomposition.java</a></td><td class=\"bar\" id=\"b14\"><img src=\"../jacoco-resources/redbar.gif\" width=\"6\" height=\"10\" title=\"123\" alt=\"123\"/></td><td class=\"ctr2\" id=\"c15\">0%</td><td class=\"bar\" id=\"d12\"><img src=\"../jacoco-resources/redbar.gif\" width=\"5\" height=\"10\" title=\"10\" alt=\"10\"/></td><td class=\"ctr2\" id=\"e12\">0%</td><td class=\"ctr1\" id=\"f12\">7</td><td class=\"ctr2\" id=\"g12\">7</td><td class=\"ctr1\" id=\"h13\">18</td><td class=\"ctr2\" id=\"i13\">18</td><td class=\"ctr1\" id=\"j14\">2</td><td class=\"ctr2\" id=\"k14\">2</td><td class=\"ctr1\" id=\"l12\">1</td><td class=\"ctr2\" id=\"m14\">1</td></tr><tr><td id=\"a5\"><a href=\"MatrixChecks.java.html\" class=\"el_source\">MatrixChecks.java</a></td><td class=\"bar\" id=\"b15\"><img src=\"../jacoco-resources/redbar.gif\" width=\"2\" height=\"10\" title=\"47\" alt=\"47\"/></td><td class=\"ctr2\" id=\"c16\">0%</td><td class=\"bar\" id=\"d13\"><img src=\"../jacoco-resources/redbar.gif\" width=\"4\" height=\"10\" title=\"8\" alt=\"8\"/></td><td class=\"ctr2\" id=\"e13\">0%</td><td class=\"ctr1\" id=\"f13\">6</td><td class=\"ctr2\" id=\"g13\">6</td><td class=\"ctr1\" id=\"h15\">12</td><td class=\"ctr2\" id=\"i15\">12</td><td class=\"ctr1\" id=\"j15\">2</td><td class=\"ctr2\" id=\"k15\">2</td><td class=\"ctr1\" id=\"l13\">1</td><td class=\"ctr2\" id=\"m15\">1</td></tr><tr><td id=\"a11\"><a href=\"PrintOptions.java.html\" class=\"el_source\">PrintOptions.java</a></td><td class=\"bar\" id=\"b16\"/><td class=\"ctr2\" id=\"c0\">56%</td><td class=\"bar\" id=\"d16\"/><td class=\"ctr2\" id=\"e16\">n/a</td><td class=\"ctr1\" id=\"f16\">1</td><td class=\"ctr2\" id=\"g16\">2</td><td class=\"ctr1\" id=\"h16\">2</td><td class=\"ctr2\" id=\"i16\">6</td><td class=\"ctr1\" id=\"j16\">1</td><td class=\"ctr2\" id=\"k16\">2</td><td class=\"ctr1\" id=\"l16\">0</td><td class=\"ctr2\" id=\"m16\">1</td></tr></tbody></table><div class=\"footer\"><span class=\"right\">Created with <a href=\"http://www.jacoco.org/jacoco\">JaCoCo</a> 0.8.7.202105040129</span></div></body></html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/site/jacoco/linalg/index.source.html b/target/site/jacoco/linalg/index.source.html
--- a/target/site/jacoco/linalg/index.source.html	(revision 48dc0b3e0abf8d6b081fabfbe0061d32ae01ed50)
+++ b/target/site/jacoco/linalg/index.source.html	(date 1649895261239)
@@ -1,1 +1,1 @@
-<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../jacoco-resources/report.css" type="text/css"/><link rel="shortcut icon" href="../jacoco-resources/report.gif" type="image/gif"/><title>linalg</title><script type="text/javascript" src="../jacoco-resources/sort.js"></script></head><body onload="initialSort(['breadcrumb', 'coveragetable'])"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="index.html" class="el_class">Classes</a><a href="../jacoco-sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Java-Linear-Algebra</a> &gt; <span class="el_package">linalg</span></div><h1>linalg</h1><table class="coverage" cellspacing="0" id="coveragetable"><thead><tr><td class="sortable" id="a" onclick="toggleSort(this)">Element</td><td class="down sortable bar" id="b" onclick="toggleSort(this)">Missed Instructions</td><td class="sortable ctr2" id="c" onclick="toggleSort(this)">Cov.</td><td class="sortable bar" id="d" onclick="toggleSort(this)">Missed Branches</td><td class="sortable ctr2" id="e" onclick="toggleSort(this)">Cov.</td><td class="sortable ctr1" id="f" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="g" onclick="toggleSort(this)">Cxty</td><td class="sortable ctr1" id="h" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="i" onclick="toggleSort(this)">Lines</td><td class="sortable ctr1" id="j" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="k" onclick="toggleSort(this)">Methods</td><td class="sortable ctr1" id="l" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="m" onclick="toggleSort(this)">Classes</td></tr></thead><tfoot><tr><td>Total</td><td class="bar">12,246 of 12,442</td><td class="ctr2">1%</td><td class="bar">913 of 927</td><td class="ctr2">1%</td><td class="ctr1">718</td><td class="ctr2">732</td><td class="ctr1">1,738</td><td class="ctr2">1,790</td><td class="ctr1">257</td><td class="ctr2">267</td><td class="ctr1">14</td><td class="ctr2">17</td></tr></tfoot><tbody><tr><td id="a9"><a href="MatrixOperations.java.html" class="el_source">MatrixOperations.java</a></td><td class="bar" id="b0"><img src="../jacoco-resources/redbar.gif" width="119" height="10" title="2,338" alt="2,338"/></td><td class="ctr2" id="c3">0%</td><td class="bar" id="d1"><img src="../jacoco-resources/redbar.gif" width="113" height="10" title="202" alt="202"/></td><td class="ctr2" id="e1">0%</td><td class="ctr1" id="f1">144</td><td class="ctr2" id="g1">144</td><td class="ctr1" id="h0">310</td><td class="ctr2" id="i0">310</td><td class="ctr1" id="j1">43</td><td class="ctr2" id="k2">43</td><td class="ctr1" id="l0">1</td><td class="ctr2" id="m0">1</td></tr><tr><td id="a10"><a href="MatrixProperties.java.html" class="el_source">MatrixProperties.java</a></td><td class="bar" id="b1"><img src="../jacoco-resources/redbar.gif" width="119" height="10" title="2,332" alt="2,332"/></td><td class="ctr2" id="c2">0%</td><td class="bar" id="d0"><img src="../jacoco-resources/redbar.gif" width="120" height="10" title="214" alt="214"/></td><td class="ctr2" id="e2">0%</td><td class="ctr1" id="f0">149</td><td class="ctr2" id="g0">152</td><td class="ctr1" id="h1">291</td><td class="ctr2" id="i2">297</td><td class="ctr1" id="j2">42</td><td class="ctr2" id="k1">45</td><td class="ctr1" id="l14">0</td><td class="ctr2" id="m1">1</td></tr><tr><td id="a7"><a href="MatrixManipulations.java.html" class="el_source">MatrixManipulations.java</a></td><td class="bar" id="b2"><img src="../jacoco-resources/redbar.gif" width="96" height="10" title="1,882" alt="1,882"/></td><td class="ctr2" id="c4">0%</td><td class="bar" id="d2"><img src="../jacoco-resources/redbar.gif" width="82" height="10" title="148" alt="148"/></td><td class="ctr2" id="e3">0%</td><td class="ctr1" id="f2">115</td><td class="ctr2" id="g3">115</td><td class="ctr1" id="h2">271</td><td class="ctr2" id="i3">271</td><td class="ctr1" id="j3">41</td><td class="ctr2" id="k3">41</td><td class="ctr1" id="l1">1</td><td class="ctr2" id="m2">1</td></tr><tr><td id="a4"><a href="Matrix.java.html" class="el_source">Matrix.java</a></td><td class="bar" id="b3"><img src="../jacoco-resources/redbar.gif" width="78" height="10" title="1,545" alt="1,545"/><img src="../jacoco-resources/greenbar.gif" width="8" height="10" title="169" alt="169"/></td><td class="ctr2" id="c1">9%</td><td class="bar" id="d3"><img src="../jacoco-resources/redbar.gif" width="67" height="10" title="120" alt="120"/><img src="../jacoco-resources/greenbar.gif" width="7" height="10" title="14" alt="14"/></td><td class="ctr2" id="e0">10%</td><td class="ctr1" id="f3">110</td><td class="ctr2" id="g2">120</td><td class="ctr1" id="h3">256</td><td class="ctr2" id="i1">298</td><td class="ctr1" id="j0">47</td><td class="ctr2" id="k0">53</td><td class="ctr1" id="l15">0</td><td class="ctr2" id="m3">1</td></tr><tr><td id="a16"><a href="Vector.java.html" class="el_source">Vector.java</a></td><td class="bar" id="b4"><img src="../jacoco-resources/redbar.gif" width="41" height="10" title="806" alt="806"/></td><td class="ctr2" id="c5">0%</td><td class="bar" id="d4"><img src="../jacoco-resources/redbar.gif" width="31" height="10" title="56" alt="56"/></td><td class="ctr2" id="e4">0%</td><td class="ctr1" id="f4">55</td><td class="ctr2" id="g4">55</td><td class="ctr1" id="h4">175</td><td class="ctr2" id="i4">175</td><td class="ctr1" id="j4">27</td><td class="ctr2" id="k4">27</td><td class="ctr1" id="l2">1</td><td class="ctr2" id="m4">1</td></tr><tr><td id="a13"><a href="SchurDecomposition.java.html" class="el_source">SchurDecomposition.java</a></td><td class="bar" id="b5"><img src="../jacoco-resources/redbar.gif" width="31" height="10" title="615" alt="615"/></td><td class="ctr2" id="c6">0%</td><td class="bar" id="d9"><img src="../jacoco-resources/redbar.gif" width="8" height="10" title="16" alt="16"/></td><td class="ctr2" id="e5">0%</td><td class="ctr1" id="f9">11</td><td class="ctr2" id="g9">11</td><td class="ctr1" id="h6">74</td><td class="ctr2" id="i6">74</td><td class="ctr1" id="j11">3</td><td class="ctr2" id="k11">3</td><td class="ctr1" id="l3">1</td><td class="ctr2" id="m5">1</td></tr><tr><td id="a12"><a href="QRDecomposition.java.html" class="el_source">QRDecomposition.java</a></td><td class="bar" id="b6"><img src="../jacoco-resources/redbar.gif" width="30" height="10" title="592" alt="592"/></td><td class="ctr2" id="c7">0%</td><td class="bar" id="d10"><img src="../jacoco-resources/redbar.gif" width="6" height="10" title="12" alt="12"/></td><td class="ctr2" id="e6">0%</td><td class="ctr1" id="f10">10</td><td class="ctr2" id="g10">10</td><td class="ctr1" id="h8">48</td><td class="ctr2" id="i8">48</td><td class="ctr1" id="j9">4</td><td class="ctr2" id="k9">4</td><td class="ctr1" id="l4">1</td><td class="ctr2" id="m6">1</td></tr><tr><td id="a3"><a href="LUDecomposition.java.html" class="el_source">LUDecomposition.java</a></td><td class="bar" id="b7"><img src="../jacoco-resources/redbar.gif" width="27" height="10" title="544" alt="544"/></td><td class="ctr2" id="c8">0%</td><td class="bar" id="d6"><img src="../jacoco-resources/redbar.gif" width="20" height="10" title="37" alt="37"/></td><td class="ctr2" id="e7">0%</td><td class="ctr1" id="f5">28</td><td class="ctr2" id="g5">28</td><td class="ctr1" id="h5">98</td><td class="ctr2" id="i5">98</td><td class="ctr1" id="j6">8</td><td class="ctr2" id="k6">8</td><td class="ctr1" id="l5">1</td><td class="ctr2" id="m7">1</td></tr><tr><td id="a14"><a href="SingularValueDecomposition.java.html" class="el_source">SingularValueDecomposition.java</a></td><td class="bar" id="b8"><img src="../jacoco-resources/redbar.gif" width="17" height="10" title="335" alt="335"/></td><td class="ctr2" id="c9">0%</td><td class="bar" id="d14"/><td class="ctr2" id="e14">n/a</td><td class="ctr1" id="f14">3</td><td class="ctr2" id="g14">3</td><td class="ctr1" id="h11">21</td><td class="ctr2" id="i11">21</td><td class="ctr1" id="j12">3</td><td class="ctr2" id="k12">3</td><td class="ctr1" id="l6">1</td><td class="ctr2" id="m8">1</td></tr><tr><td id="a15"><a href="Solvers.java.html" class="el_source">Solvers.java</a></td><td class="bar" id="b9"><img src="../jacoco-resources/redbar.gif" width="16" height="10" title="332" alt="332"/></td><td class="ctr2" id="c10">0%</td><td class="bar" id="d7"><img src="../jacoco-resources/redbar.gif" width="11" height="10" title="20" alt="20"/></td><td class="ctr2" id="e8">0%</td><td class="ctr1" id="f8">18</td><td class="ctr2" id="g8">18</td><td class="ctr1" id="h7">52</td><td class="ctr2" id="i7">52</td><td class="ctr1" id="j7">8</td><td class="ctr2" id="k7">8</td><td class="ctr1" id="l7">1</td><td class="ctr2" id="m9">1</td></tr><tr><td id="a8"><a href="MatrixMultiplicationAlgorithms.java.html" class="el_source">MatrixMultiplicationAlgorithms.java</a></td><td class="bar" id="b10"><img src="../jacoco-resources/redbar.gif" width="12" height="10" title="242" alt="242"/></td><td class="ctr2" id="c11">0%</td><td class="bar" id="d11"><img src="../jacoco-resources/redbar.gif" width="5" height="10" title="10" alt="10"/></td><td class="ctr2" id="e9">0%</td><td class="ctr1" id="f11">9</td><td class="ctr2" id="g11">9</td><td class="ctr1" id="h12">18</td><td class="ctr2" id="i12">18</td><td class="ctr1" id="j10">4</td><td class="ctr2" id="k10">4</td><td class="ctr1" id="l8">1</td><td class="ctr2" id="m10">1</td></tr><tr><td id="a6"><a href="MatrixComparisons.java.html" class="el_source">MatrixComparisons.java</a></td><td class="bar" id="b11"><img src="../jacoco-resources/redbar.gif" width="10" height="10" title="208" alt="208"/></td><td class="ctr2" id="c12">0%</td><td class="bar" id="d5"><img src="../jacoco-resources/redbar.gif" width="23" height="10" title="42" alt="42"/></td><td class="ctr2" id="e10">0%</td><td class="ctr1" id="f6">28</td><td class="ctr2" id="g6">28</td><td class="ctr1" id="h9">47</td><td class="ctr2" id="i9">47</td><td class="ctr1" id="j8">7</td><td class="ctr2" id="k8">7</td><td class="ctr1" id="l9">1</td><td class="ctr2" id="m11">1</td></tr><tr><td id="a2"><a href="LQDecomposition.java.html" class="el_source">LQDecomposition.java</a></td><td class="bar" id="b12"><img src="../jacoco-resources/redbar.gif" width="7" height="10" title="156" alt="156"/></td><td class="ctr2" id="c13">0%</td><td class="bar" id="d15"/><td class="ctr2" id="e15">n/a</td><td class="ctr1" id="f15">3</td><td class="ctr2" id="g15">3</td><td class="ctr1" id="h14">14</td><td class="ctr2" id="i14">14</td><td class="ctr1" id="j13">3</td><td class="ctr2" id="k13">3</td><td class="ctr1" id="l10">1</td><td class="ctr2" id="m12">1</td></tr><tr><td id="a1"><a href="Decompose.java.html" class="el_source">Decompose.java</a></td><td class="bar" id="b13"><img src="../jacoco-resources/redbar.gif" width="7" height="10" title="142" alt="142"/></td><td class="ctr2" id="c14">0%</td><td class="bar" id="d8"><img src="../jacoco-resources/redbar.gif" width="10" height="10" title="18" alt="18"/></td><td class="ctr2" id="e11">0%</td><td class="ctr1" id="f7">21</td><td class="ctr2" id="g7">21</td><td class="ctr1" id="h10">31</td><td class="ctr2" id="i10">31</td><td class="ctr1" id="j5">12</td><td class="ctr2" id="k5">12</td><td class="ctr1" id="l11">1</td><td class="ctr2" id="m13">1</td></tr><tr><td id="a0"><a href="CholeskyDecomposition.java.html" class="el_source">CholeskyDecomposition.java</a></td><td class="bar" id="b14"><img src="../jacoco-resources/redbar.gif" width="6" height="10" title="123" alt="123"/></td><td class="ctr2" id="c15">0%</td><td class="bar" id="d12"><img src="../jacoco-resources/redbar.gif" width="5" height="10" title="10" alt="10"/></td><td class="ctr2" id="e12">0%</td><td class="ctr1" id="f12">7</td><td class="ctr2" id="g12">7</td><td class="ctr1" id="h13">18</td><td class="ctr2" id="i13">18</td><td class="ctr1" id="j14">2</td><td class="ctr2" id="k14">2</td><td class="ctr1" id="l12">1</td><td class="ctr2" id="m14">1</td></tr><tr><td id="a5"><a href="MatrixChecks.java.html" class="el_source">MatrixChecks.java</a></td><td class="bar" id="b15"><img src="../jacoco-resources/redbar.gif" width="2" height="10" title="47" alt="47"/></td><td class="ctr2" id="c16">0%</td><td class="bar" id="d13"><img src="../jacoco-resources/redbar.gif" width="4" height="10" title="8" alt="8"/></td><td class="ctr2" id="e13">0%</td><td class="ctr1" id="f13">6</td><td class="ctr2" id="g13">6</td><td class="ctr1" id="h15">12</td><td class="ctr2" id="i15">12</td><td class="ctr1" id="j15">2</td><td class="ctr2" id="k15">2</td><td class="ctr1" id="l13">1</td><td class="ctr2" id="m15">1</td></tr><tr><td id="a11"><a href="PrintOptions.java.html" class="el_source">PrintOptions.java</a></td><td class="bar" id="b16"/><td class="ctr2" id="c0">56%</td><td class="bar" id="d16"/><td class="ctr2" id="e16">n/a</td><td class="ctr1" id="f16">1</td><td class="ctr2" id="g16">2</td><td class="ctr1" id="h16">2</td><td class="ctr2" id="i16">6</td><td class="ctr1" id="j16">1</td><td class="ctr2" id="k16">2</td><td class="ctr1" id="l16">0</td><td class="ctr2" id="m16">1</td></tr></tbody></table><div class="footer"><span class="right">Created with <a href="http://www.jacoco.org/jacoco">JaCoCo</a> 0.8.7.202105040129</span></div></body></html>
\ No newline at end of file
+<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../jacoco-resources/report.css" type="text/css"/><link rel="shortcut icon" href="../jacoco-resources/report.gif" type="image/gif"/><title>linalg</title><script type="text/javascript" src="../jacoco-resources/sort.js"></script></head><body onload="initialSort(['breadcrumb', 'coveragetable'])"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="index.html" class="el_class">Classes</a><a href="../jacoco-sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Java-Linear-Algebra</a> &gt; <span class="el_package">linalg</span></div><h1>linalg</h1><table class="coverage" cellspacing="0" id="coveragetable"><thead><tr><td class="sortable" id="a" onclick="toggleSort(this)">Element</td><td class="down sortable bar" id="b" onclick="toggleSort(this)">Missed Instructions</td><td class="sortable ctr2" id="c" onclick="toggleSort(this)">Cov.</td><td class="sortable bar" id="d" onclick="toggleSort(this)">Missed Branches</td><td class="sortable ctr2" id="e" onclick="toggleSort(this)">Cov.</td><td class="sortable ctr1" id="f" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="g" onclick="toggleSort(this)">Cxty</td><td class="sortable ctr1" id="h" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="i" onclick="toggleSort(this)">Lines</td><td class="sortable ctr1" id="j" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="k" onclick="toggleSort(this)">Methods</td><td class="sortable ctr1" id="l" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="m" onclick="toggleSort(this)">Classes</td></tr></thead><tfoot><tr><td>Total</td><td class="bar">12,412 of 12,608</td><td class="ctr2">1%</td><td class="bar">929 of 943</td><td class="ctr2">1%</td><td class="ctr1">729</td><td class="ctr2">743</td><td class="ctr1">1,760</td><td class="ctr2">1,812</td><td class="ctr1">260</td><td class="ctr2">270</td><td class="ctr1">14</td><td class="ctr2">17</td></tr></tfoot><tbody><tr><td id="a9"><a href="MatrixOperations.java.html" class="el_source">MatrixOperations.java</a></td><td class="bar" id="b0"><img src="../jacoco-resources/redbar.gif" width="120" height="10" title="2,504" alt="2,504"/></td><td class="ctr2" id="c3">0%</td><td class="bar" id="d0"><img src="../jacoco-resources/redbar.gif" width="120" height="10" title="218" alt="218"/></td><td class="ctr2" id="e1">0%</td><td class="ctr1" id="f0">155</td><td class="ctr2" id="g0">155</td><td class="ctr1" id="h0">332</td><td class="ctr2" id="i0">332</td><td class="ctr1" id="j1">46</td><td class="ctr2" id="k1">46</td><td class="ctr1" id="l0">1</td><td class="ctr2" id="m0">1</td></tr><tr><td id="a10"><a href="MatrixProperties.java.html" class="el_source">MatrixProperties.java</a></td><td class="bar" id="b1"><img src="../jacoco-resources/redbar.gif" width="111" height="10" title="2,332" alt="2,332"/></td><td class="ctr2" id="c2">0%</td><td class="bar" id="d1"><img src="../jacoco-resources/redbar.gif" width="117" height="10" title="214" alt="214"/></td><td class="ctr2" id="e2">0%</td><td class="ctr1" id="f1">149</td><td class="ctr2" id="g1">152</td><td class="ctr1" id="h1">291</td><td class="ctr2" id="i2">297</td><td class="ctr1" id="j2">42</td><td class="ctr2" id="k2">45</td><td class="ctr1" id="l14">0</td><td class="ctr2" id="m1">1</td></tr><tr><td id="a7"><a href="MatrixManipulations.java.html" class="el_source">MatrixManipulations.java</a></td><td class="bar" id="b2"><img src="../jacoco-resources/redbar.gif" width="90" height="10" title="1,882" alt="1,882"/></td><td class="ctr2" id="c4">0%</td><td class="bar" id="d2"><img src="../jacoco-resources/redbar.gif" width="81" height="10" title="148" alt="148"/></td><td class="ctr2" id="e3">0%</td><td class="ctr1" id="f2">115</td><td class="ctr2" id="g3">115</td><td class="ctr1" id="h2">271</td><td class="ctr2" id="i3">271</td><td class="ctr1" id="j3">41</td><td class="ctr2" id="k3">41</td><td class="ctr1" id="l1">1</td><td class="ctr2" id="m2">1</td></tr><tr><td id="a4"><a href="Matrix.java.html" class="el_source">Matrix.java</a></td><td class="bar" id="b3"><img src="../jacoco-resources/redbar.gif" width="74" height="10" title="1,545" alt="1,545"/><img src="../jacoco-resources/greenbar.gif" width="8" height="10" title="169" alt="169"/></td><td class="ctr2" id="c1">9%</td><td class="bar" id="d3"><img src="../jacoco-resources/redbar.gif" width="66" height="10" title="120" alt="120"/><img src="../jacoco-resources/greenbar.gif" width="7" height="10" title="14" alt="14"/></td><td class="ctr2" id="e0">10%</td><td class="ctr1" id="f3">110</td><td class="ctr2" id="g2">120</td><td class="ctr1" id="h3">256</td><td class="ctr2" id="i1">298</td><td class="ctr1" id="j0">47</td><td class="ctr2" id="k0">53</td><td class="ctr1" id="l15">0</td><td class="ctr2" id="m3">1</td></tr><tr><td id="a16"><a href="Vector.java.html" class="el_source">Vector.java</a></td><td class="bar" id="b4"><img src="../jacoco-resources/redbar.gif" width="38" height="10" title="806" alt="806"/></td><td class="ctr2" id="c5">0%</td><td class="bar" id="d4"><img src="../jacoco-resources/redbar.gif" width="30" height="10" title="56" alt="56"/></td><td class="ctr2" id="e4">0%</td><td class="ctr1" id="f4">55</td><td class="ctr2" id="g4">55</td><td class="ctr1" id="h4">175</td><td class="ctr2" id="i4">175</td><td class="ctr1" id="j4">27</td><td class="ctr2" id="k4">27</td><td class="ctr1" id="l2">1</td><td class="ctr2" id="m4">1</td></tr><tr><td id="a13"><a href="SchurDecomposition.java.html" class="el_source">SchurDecomposition.java</a></td><td class="bar" id="b5"><img src="../jacoco-resources/redbar.gif" width="29" height="10" title="615" alt="615"/></td><td class="ctr2" id="c6">0%</td><td class="bar" id="d9"><img src="../jacoco-resources/redbar.gif" width="8" height="10" title="16" alt="16"/></td><td class="ctr2" id="e5">0%</td><td class="ctr1" id="f9">11</td><td class="ctr2" id="g9">11</td><td class="ctr1" id="h6">74</td><td class="ctr2" id="i6">74</td><td class="ctr1" id="j11">3</td><td class="ctr2" id="k11">3</td><td class="ctr1" id="l3">1</td><td class="ctr2" id="m5">1</td></tr><tr><td id="a12"><a href="QRDecomposition.java.html" class="el_source">QRDecomposition.java</a></td><td class="bar" id="b6"><img src="../jacoco-resources/redbar.gif" width="28" height="10" title="592" alt="592"/></td><td class="ctr2" id="c7">0%</td><td class="bar" id="d10"><img src="../jacoco-resources/redbar.gif" width="6" height="10" title="12" alt="12"/></td><td class="ctr2" id="e6">0%</td><td class="ctr1" id="f10">10</td><td class="ctr2" id="g10">10</td><td class="ctr1" id="h8">48</td><td class="ctr2" id="i8">48</td><td class="ctr1" id="j9">4</td><td class="ctr2" id="k9">4</td><td class="ctr1" id="l4">1</td><td class="ctr2" id="m6">1</td></tr><tr><td id="a3"><a href="LUDecomposition.java.html" class="el_source">LUDecomposition.java</a></td><td class="bar" id="b7"><img src="../jacoco-resources/redbar.gif" width="26" height="10" title="544" alt="544"/></td><td class="ctr2" id="c8">0%</td><td class="bar" id="d6"><img src="../jacoco-resources/redbar.gif" width="20" height="10" title="37" alt="37"/></td><td class="ctr2" id="e7">0%</td><td class="ctr1" id="f5">28</td><td class="ctr2" id="g5">28</td><td class="ctr1" id="h5">98</td><td class="ctr2" id="i5">98</td><td class="ctr1" id="j6">8</td><td class="ctr2" id="k6">8</td><td class="ctr1" id="l5">1</td><td class="ctr2" id="m7">1</td></tr><tr><td id="a14"><a href="SingularValueDecomposition.java.html" class="el_source">SingularValueDecomposition.java</a></td><td class="bar" id="b8"><img src="../jacoco-resources/redbar.gif" width="16" height="10" title="335" alt="335"/></td><td class="ctr2" id="c9">0%</td><td class="bar" id="d14"/><td class="ctr2" id="e14">n/a</td><td class="ctr1" id="f14">3</td><td class="ctr2" id="g14">3</td><td class="ctr1" id="h11">21</td><td class="ctr2" id="i11">21</td><td class="ctr1" id="j12">3</td><td class="ctr2" id="k12">3</td><td class="ctr1" id="l6">1</td><td class="ctr2" id="m8">1</td></tr><tr><td id="a15"><a href="Solvers.java.html" class="el_source">Solvers.java</a></td><td class="bar" id="b9"><img src="../jacoco-resources/redbar.gif" width="15" height="10" title="332" alt="332"/></td><td class="ctr2" id="c10">0%</td><td class="bar" id="d7"><img src="../jacoco-resources/redbar.gif" width="11" height="10" title="20" alt="20"/></td><td class="ctr2" id="e8">0%</td><td class="ctr1" id="f8">18</td><td class="ctr2" id="g8">18</td><td class="ctr1" id="h7">52</td><td class="ctr2" id="i7">52</td><td class="ctr1" id="j7">8</td><td class="ctr2" id="k7">8</td><td class="ctr1" id="l7">1</td><td class="ctr2" id="m9">1</td></tr><tr><td id="a8"><a href="MatrixMultiplicationAlgorithms.java.html" class="el_source">MatrixMultiplicationAlgorithms.java</a></td><td class="bar" id="b10"><img src="../jacoco-resources/redbar.gif" width="11" height="10" title="242" alt="242"/></td><td class="ctr2" id="c11">0%</td><td class="bar" id="d11"><img src="../jacoco-resources/redbar.gif" width="5" height="10" title="10" alt="10"/></td><td class="ctr2" id="e9">0%</td><td class="ctr1" id="f11">9</td><td class="ctr2" id="g11">9</td><td class="ctr1" id="h12">18</td><td class="ctr2" id="i12">18</td><td class="ctr1" id="j10">4</td><td class="ctr2" id="k10">4</td><td class="ctr1" id="l8">1</td><td class="ctr2" id="m10">1</td></tr><tr><td id="a6"><a href="MatrixComparisons.java.html" class="el_source">MatrixComparisons.java</a></td><td class="bar" id="b11"><img src="../jacoco-resources/redbar.gif" width="9" height="10" title="208" alt="208"/></td><td class="ctr2" id="c12">0%</td><td class="bar" id="d5"><img src="../jacoco-resources/redbar.gif" width="23" height="10" title="42" alt="42"/></td><td class="ctr2" id="e10">0%</td><td class="ctr1" id="f6">28</td><td class="ctr2" id="g6">28</td><td class="ctr1" id="h9">47</td><td class="ctr2" id="i9">47</td><td class="ctr1" id="j8">7</td><td class="ctr2" id="k8">7</td><td class="ctr1" id="l9">1</td><td class="ctr2" id="m11">1</td></tr><tr><td id="a2"><a href="LQDecomposition.java.html" class="el_source">LQDecomposition.java</a></td><td class="bar" id="b12"><img src="../jacoco-resources/redbar.gif" width="7" height="10" title="156" alt="156"/></td><td class="ctr2" id="c13">0%</td><td class="bar" id="d15"/><td class="ctr2" id="e15">n/a</td><td class="ctr1" id="f15">3</td><td class="ctr2" id="g15">3</td><td class="ctr1" id="h14">14</td><td class="ctr2" id="i14">14</td><td class="ctr1" id="j13">3</td><td class="ctr2" id="k13">3</td><td class="ctr1" id="l10">1</td><td class="ctr2" id="m12">1</td></tr><tr><td id="a1"><a href="Decompose.java.html" class="el_source">Decompose.java</a></td><td class="bar" id="b13"><img src="../jacoco-resources/redbar.gif" width="6" height="10" title="142" alt="142"/></td><td class="ctr2" id="c14">0%</td><td class="bar" id="d8"><img src="../jacoco-resources/redbar.gif" width="9" height="10" title="18" alt="18"/></td><td class="ctr2" id="e11">0%</td><td class="ctr1" id="f7">21</td><td class="ctr2" id="g7">21</td><td class="ctr1" id="h10">31</td><td class="ctr2" id="i10">31</td><td class="ctr1" id="j5">12</td><td class="ctr2" id="k5">12</td><td class="ctr1" id="l11">1</td><td class="ctr2" id="m13">1</td></tr><tr><td id="a0"><a href="CholeskyDecomposition.java.html" class="el_source">CholeskyDecomposition.java</a></td><td class="bar" id="b14"><img src="../jacoco-resources/redbar.gif" width="5" height="10" title="123" alt="123"/></td><td class="ctr2" id="c15">0%</td><td class="bar" id="d12"><img src="../jacoco-resources/redbar.gif" width="5" height="10" title="10" alt="10"/></td><td class="ctr2" id="e12">0%</td><td class="ctr1" id="f12">7</td><td class="ctr2" id="g12">7</td><td class="ctr1" id="h13">18</td><td class="ctr2" id="i13">18</td><td class="ctr1" id="j14">2</td><td class="ctr2" id="k14">2</td><td class="ctr1" id="l12">1</td><td class="ctr2" id="m14">1</td></tr><tr><td id="a5"><a href="MatrixChecks.java.html" class="el_source">MatrixChecks.java</a></td><td class="bar" id="b15"><img src="../jacoco-resources/redbar.gif" width="2" height="10" title="47" alt="47"/></td><td class="ctr2" id="c16">0%</td><td class="bar" id="d13"><img src="../jacoco-resources/redbar.gif" width="4" height="10" title="8" alt="8"/></td><td class="ctr2" id="e13">0%</td><td class="ctr1" id="f13">6</td><td class="ctr2" id="g13">6</td><td class="ctr1" id="h15">12</td><td class="ctr2" id="i15">12</td><td class="ctr1" id="j15">2</td><td class="ctr2" id="k15">2</td><td class="ctr1" id="l13">1</td><td class="ctr2" id="m15">1</td></tr><tr><td id="a11"><a href="PrintOptions.java.html" class="el_source">PrintOptions.java</a></td><td class="bar" id="b16"/><td class="ctr2" id="c0">56%</td><td class="bar" id="d16"/><td class="ctr2" id="e16">n/a</td><td class="ctr1" id="f16">1</td><td class="ctr2" id="g16">2</td><td class="ctr1" id="h16">2</td><td class="ctr2" id="i16">6</td><td class="ctr1" id="j16">1</td><td class="ctr2" id="k16">2</td><td class="ctr1" id="l16">0</td><td class="ctr2" id="m16">1</td></tr></tbody></table><div class="footer"><span class="right">Created with <a href="http://www.jacoco.org/jacoco">JaCoCo</a> 0.8.7.202105040129</span></div></body></html>
\ No newline at end of file
Index: target/site/jacoco/linalg/MatrixOperations.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\"><head><meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\"/><link rel=\"stylesheet\" href=\"../jacoco-resources/report.css\" type=\"text/css\"/><link rel=\"shortcut icon\" href=\"../jacoco-resources/report.gif\" type=\"image/gif\"/><title>MatrixOperations</title><script type=\"text/javascript\" src=\"../jacoco-resources/sort.js\"></script></head><body onload=\"initialSort(['breadcrumb'])\"><div class=\"breadcrumb\" id=\"breadcrumb\"><span class=\"info\"><a href=\"../jacoco-sessions.html\" class=\"el_session\">Sessions</a></span><a href=\"../index.html\" class=\"el_report\">Java-Linear-Algebra</a> &gt; <a href=\"index.html\" class=\"el_package\">linalg</a> &gt; <span class=\"el_class\">MatrixOperations</span></div><h1>MatrixOperations</h1><table class=\"coverage\" cellspacing=\"0\" id=\"coveragetable\"><thead><tr><td class=\"sortable\" id=\"a\" onclick=\"toggleSort(this)\">Element</td><td class=\"down sortable bar\" id=\"b\" onclick=\"toggleSort(this)\">Missed Instructions</td><td class=\"sortable ctr2\" id=\"c\" onclick=\"toggleSort(this)\">Cov.</td><td class=\"sortable bar\" id=\"d\" onclick=\"toggleSort(this)\">Missed Branches</td><td class=\"sortable ctr2\" id=\"e\" onclick=\"toggleSort(this)\">Cov.</td><td class=\"sortable ctr1\" id=\"f\" onclick=\"toggleSort(this)\">Missed</td><td class=\"sortable ctr2\" id=\"g\" onclick=\"toggleSort(this)\">Cxty</td><td class=\"sortable ctr1\" id=\"h\" onclick=\"toggleSort(this)\">Missed</td><td class=\"sortable ctr2\" id=\"i\" onclick=\"toggleSort(this)\">Lines</td><td class=\"sortable ctr1\" id=\"j\" onclick=\"toggleSort(this)\">Missed</td><td class=\"sortable ctr2\" id=\"k\" onclick=\"toggleSort(this)\">Methods</td></tr></thead><tfoot><tr><td>Total</td><td class=\"bar\">2,338 of 2,338</td><td class=\"ctr2\">0%</td><td class=\"bar\">202 of 202</td><td class=\"ctr2\">0%</td><td class=\"ctr1\">144</td><td class=\"ctr2\">144</td><td class=\"ctr1\">310</td><td class=\"ctr2\">310</td><td class=\"ctr1\">43</td><td class=\"ctr2\">43</td></tr></tfoot><tbody><tr><td id=\"a34\"><a href=\"MatrixOperations.java.html#L611\" class=\"el_method\">stack(Matrix, int)</a></td><td class=\"bar\" id=\"b0\"><img src=\"../jacoco-resources/redbar.gif\" width=\"120\" height=\"10\" title=\"210\" alt=\"210\"/></td><td class=\"ctr2\" id=\"c0\">0%</td><td class=\"bar\" id=\"d1\"><img src=\"../jacoco-resources/redbar.gif\" width=\"109\" height=\"10\" title=\"20\" alt=\"20\"/></td><td class=\"ctr2\" id=\"e0\">0%</td><td class=\"ctr1\" id=\"f1\">11</td><td class=\"ctr2\" id=\"g1\">11</td><td class=\"ctr1\" id=\"h1\">22</td><td class=\"ctr2\" id=\"i1\">22</td><td class=\"ctr1\" id=\"j0\">1</td><td class=\"ctr2\" id=\"k0\">1</td></tr><tr><td id=\"a25\"><a href=\"MatrixOperations.java.html#L779\" class=\"el_method\">rref()</a></td><td class=\"bar\" id=\"b1\"><img src=\"../jacoco-resources/redbar.gif\" width=\"103\" height=\"10\" title=\"181\" alt=\"181\"/></td><td class=\"ctr2\" id=\"c1\">0%</td><td class=\"bar\" id=\"d0\"><img src=\"../jacoco-resources/redbar.gif\" width=\"120\" height=\"10\" title=\"22\" alt=\"22\"/></td><td class=\"ctr2\" id=\"e1\">0%</td><td class=\"ctr1\" id=\"f0\">12</td><td class=\"ctr2\" id=\"g0\">12</td><td class=\"ctr1\" id=\"h0\">30</td><td class=\"ctr2\" id=\"i0\">30</td><td class=\"ctr1\" id=\"j1\">1</td><td class=\"ctr2\" id=\"k1\">1</td></tr><tr><td id=\"a10\"><a href=\"MatrixOperations.java.html#L252\" class=\"el_method\">elemDiv(Matrix)</a></td><td class=\"bar\" id=\"b2\"><img src=\"../jacoco-resources/redbar.gif\" width=\"96\" height=\"10\" title=\"168\" alt=\"168\"/></td><td class=\"ctr2\" id=\"c2\">0%</td><td class=\"bar\" id=\"d13\"><img src=\"../jacoco-resources/redbar.gif\" width=\"21\" height=\"10\" title=\"4\" alt=\"4\"/></td><td class=\"ctr2\" id=\"e2\">0%</td><td class=\"ctr1\" id=\"f13\">3</td><td class=\"ctr2\" id=\"g13\">3</td><td class=\"ctr1\" id=\"h13\">7</td><td class=\"ctr2\" id=\"i13\">7</td><td class=\"ctr1\" id=\"j2\">1</td><td class=\"ctr2\" id=\"k2\">1</td></tr><tr><td id=\"a2\"><a href=\"MatrixOperations.java.html#L21\" class=\"el_method\">add(Matrix)</a></td><td class=\"bar\" id=\"b3\"><img src=\"../jacoco-resources/redbar.gif\" width=\"80\" height=\"10\" title=\"141\" alt=\"141\"/></td><td class=\"ctr2\" id=\"c3\">0%</td><td class=\"bar\" id=\"d2\"><img src=\"../jacoco-resources/redbar.gif\" width=\"87\" height=\"10\" title=\"16\" alt=\"16\"/></td><td class=\"ctr2\" id=\"e3\">0%</td><td class=\"ctr1\" id=\"f2\">9</td><td class=\"ctr2\" id=\"g2\">9</td><td class=\"ctr1\" id=\"h7\">14</td><td class=\"ctr2\" id=\"i7\">14</td><td class=\"ctr1\" id=\"j3\">1</td><td class=\"ctr2\" id=\"k3\">1</td></tr><tr><td id=\"a20\"><a href=\"MatrixOperations.java.html#L166\" class=\"el_method\">mult(Vector)</a></td><td class=\"bar\" id=\"b4\"><img src=\"../jacoco-resources/redbar.gif\" width=\"69\" height=\"10\" title=\"121\" alt=\"121\"/></td><td class=\"ctr2\" id=\"c4\">0%</td><td class=\"bar\" id=\"d8\"><img src=\"../jacoco-resources/redbar.gif\" width=\"32\" height=\"10\" title=\"6\" alt=\"6\"/></td><td class=\"ctr2\" id=\"e4\">0%</td><td class=\"ctr1\" id=\"f8\">4</td><td class=\"ctr2\" id=\"g8\">4</td><td class=\"ctr1\" id=\"h8\">10</td><td class=\"ctr2\" id=\"i8\">10</td><td class=\"ctr1\" id=\"j4\">1</td><td class=\"ctr2\" id=\"k4\">1</td></tr><tr><td id=\"a24\"><a href=\"MatrixOperations.java.html#L688\" class=\"el_method\">ref()</a></td><td class=\"bar\" id=\"b5\"><img src=\"../jacoco-resources/redbar.gif\" width=\"65\" height=\"10\" title=\"114\" alt=\"114\"/></td><td class=\"ctr2\" id=\"c5\">0%</td><td class=\"bar\" id=\"d4\"><img src=\"../jacoco-resources/redbar.gif\" width=\"65\" height=\"10\" title=\"12\" alt=\"12\"/></td><td class=\"ctr2\" id=\"e5\">0%</td><td class=\"ctr1\" id=\"f4\">7</td><td class=\"ctr2\" id=\"g4\">7</td><td class=\"ctr1\" id=\"h2\">17</td><td class=\"ctr2\" id=\"i2\">17</td><td class=\"ctr1\" id=\"j5\">1</td><td class=\"ctr2\" id=\"k5\">1</td></tr><tr><td id=\"a27\"><a href=\"MatrixOperations.java.html#L867\" class=\"el_method\">rrefNoPivot()</a></td><td class=\"bar\" id=\"b6\"><img src=\"../jacoco-resources/redbar.gif\" width=\"61\" height=\"10\" title=\"108\" alt=\"108\"/></td><td class=\"ctr2\" id=\"c6\">0%</td><td class=\"bar\" id=\"d3\"><img src=\"../jacoco-resources/redbar.gif\" width=\"76\" height=\"10\" title=\"14\" alt=\"14\"/></td><td class=\"ctr2\" id=\"e6\">0%</td><td class=\"ctr1\" id=\"f3\">8</td><td class=\"ctr2\" id=\"g3\">8</td><td class=\"ctr1\" id=\"h3\">17</td><td class=\"ctr2\" id=\"i3\">17</td><td class=\"ctr1\" id=\"j6\">1</td><td class=\"ctr2\" id=\"k6\">1</td></tr><tr><td id=\"a11\"><a href=\"MatrixOperations.java.html#L196\" class=\"el_method\">elemMult(Matrix)</a></td><td class=\"bar\" id=\"b7\"><img src=\"../jacoco-resources/redbar.gif\" width=\"59\" height=\"10\" title=\"104\" alt=\"104\"/></td><td class=\"ctr2\" id=\"c7\">0%</td><td class=\"bar\" id=\"d14\"><img src=\"../jacoco-resources/redbar.gif\" width=\"21\" height=\"10\" title=\"4\" alt=\"4\"/></td><td class=\"ctr2\" id=\"e7\">0%</td><td class=\"ctr1\" id=\"f14\">3</td><td class=\"ctr2\" id=\"g14\">3</td><td class=\"ctr1\" id=\"h14\">7</td><td class=\"ctr2\" id=\"i14\">7</td><td class=\"ctr1\" id=\"j7\">1</td><td class=\"ctr2\" id=\"k7\">1</td></tr><tr><td id=\"a8\"><a href=\"MatrixOperations.java.html#L512\" class=\"el_method\">detRec(Matrix)</a></td><td class=\"bar\" id=\"b8\"><img src=\"../jacoco-resources/redbar.gif\" width=\"58\" height=\"10\" title=\"102\" alt=\"102\"/></td><td class=\"ctr2\" id=\"c8\">0%</td><td class=\"bar\" id=\"d6\"><img src=\"../jacoco-resources/redbar.gif\" width=\"54\" height=\"10\" title=\"10\" alt=\"10\"/></td><td class=\"ctr2\" id=\"e8\">0%</td><td class=\"ctr1\" id=\"f6\">6</td><td class=\"ctr2\" id=\"g6\">6</td><td class=\"ctr1\" id=\"h5\">16</td><td class=\"ctr2\" id=\"i5\">16</td><td class=\"ctr1\" id=\"j8\">1</td><td class=\"ctr2\" id=\"k8\">1</td></tr><tr><td id=\"a38\"><a href=\"MatrixOperations.java.html#L342\" class=\"el_method\">sudoDirectSum(Matrix[])</a></td><td class=\"bar\" id=\"b9\"><img src=\"../jacoco-resources/redbar.gif\" width=\"56\" height=\"10\" title=\"99\" alt=\"99\"/></td><td class=\"ctr2\" id=\"c9\">0%</td><td class=\"bar\" id=\"d9\"><img src=\"../jacoco-resources/redbar.gif\" width=\"32\" height=\"10\" title=\"6\" alt=\"6\"/></td><td class=\"ctr2\" id=\"e9\">0%</td><td class=\"ctr1\" id=\"f9\">4</td><td class=\"ctr2\" id=\"g9\">4</td><td class=\"ctr1\" id=\"h4\">17</td><td class=\"ctr2\" id=\"i4\">17</td><td class=\"ctr1\" id=\"j9\">1</td><td class=\"ctr2\" id=\"k9\">1</td></tr><tr><td id=\"a9\"><a href=\"MatrixOperations.java.html#L313\" class=\"el_method\">directSum(Matrix[])</a></td><td class=\"bar\" id=\"b10\"><img src=\"../jacoco-resources/redbar.gif\" width=\"52\" height=\"10\" title=\"91\" alt=\"91\"/></td><td class=\"ctr2\" id=\"c10\">0%</td><td class=\"bar\" id=\"d10\"><img src=\"../jacoco-resources/redbar.gif\" width=\"32\" height=\"10\" title=\"6\" alt=\"6\"/></td><td class=\"ctr2\" id=\"e10\">0%</td><td class=\"ctr1\" id=\"f10\">4</td><td class=\"ctr2\" id=\"g10\">4</td><td class=\"ctr1\" id=\"h6\">16</td><td class=\"ctr2\" id=\"i6\">16</td><td class=\"ctr1\" id=\"j10\">1</td><td class=\"ctr2\" id=\"k10\">1</td></tr><tr><td id=\"a30\"><a href=\"MatrixOperations.java.html#L231\" class=\"el_method\">scalMult(CNumber)</a></td><td class=\"bar\" id=\"b11\"><img src=\"../jacoco-resources/redbar.gif\" width=\"45\" height=\"10\" title=\"80\" alt=\"80\"/></td><td class=\"ctr2\" id=\"c11\">0%</td><td class=\"bar\" id=\"d15\"><img src=\"../jacoco-resources/redbar.gif\" width=\"21\" height=\"10\" title=\"4\" alt=\"4\"/></td><td class=\"ctr2\" id=\"e11\">0%</td><td class=\"ctr1\" id=\"f15\">3</td><td class=\"ctr2\" id=\"g15\">3</td><td class=\"ctr1\" id=\"h19\">6</td><td class=\"ctr2\" id=\"i19\">6</td><td class=\"ctr1\" id=\"j11\">1</td><td class=\"ctr2\" id=\"k11\">1</td></tr><tr><td id=\"a37\"><a href=\"MatrixOperations.java.html#L82\" class=\"el_method\">sub(Matrix)</a></td><td class=\"bar\" id=\"b12\"><img src=\"../jacoco-resources/redbar.gif\" width=\"41\" height=\"10\" title=\"72\" alt=\"72\"/></td><td class=\"ctr2\" id=\"c12\">0%</td><td class=\"bar\" id=\"d16\"><img src=\"../jacoco-resources/redbar.gif\" width=\"21\" height=\"10\" title=\"4\" alt=\"4\"/></td><td class=\"ctr2\" id=\"e12\">0%</td><td class=\"ctr1\" id=\"f16\">3</td><td class=\"ctr2\" id=\"g16\">3</td><td class=\"ctr1\" id=\"h15\">7</td><td class=\"ctr2\" id=\"i15\">7</td><td class=\"ctr1\" id=\"j12\">1</td><td class=\"ctr2\" id=\"k12\">1</td></tr><tr><td id=\"a39\"><a href=\"MatrixOperations.java.html#L428\" class=\"el_method\">T()</a></td><td class=\"bar\" id=\"b13\"><img src=\"../jacoco-resources/redbar.gif\" width=\"39\" height=\"10\" title=\"69\" alt=\"69\"/></td><td class=\"ctr2\" id=\"c13\">0%</td><td class=\"bar\" id=\"d5\"><img src=\"../jacoco-resources/redbar.gif\" width=\"65\" height=\"10\" title=\"12\" alt=\"12\"/></td><td class=\"ctr2\" id=\"e13\">0%</td><td class=\"ctr1\" id=\"f5\">7</td><td class=\"ctr2\" id=\"g5\">7</td><td class=\"ctr1\" id=\"h12\">9</td><td class=\"ctr2\" id=\"i12\">9</td><td class=\"ctr1\" id=\"j13\">1</td><td class=\"ctr2\" id=\"k13\">1</td></tr><tr><td id=\"a6\"><a href=\"MatrixOperations.java.html#L568\" class=\"el_method\">det()</a></td><td class=\"bar\" id=\"b14\"><img src=\"../jacoco-resources/redbar.gif\" width=\"34\" height=\"10\" title=\"60\" alt=\"60\"/></td><td class=\"ctr2\" id=\"c14\">0%</td><td class=\"bar\" id=\"d11\"><img src=\"../jacoco-resources/redbar.gif\" width=\"32\" height=\"10\" title=\"6\" alt=\"6\"/></td><td class=\"ctr2\" id=\"e14\">0%</td><td class=\"ctr1\" id=\"f11\">4</td><td class=\"ctr2\" id=\"g11\">4</td><td class=\"ctr1\" id=\"h9\">10</td><td class=\"ctr2\" id=\"i9\">10</td><td class=\"ctr1\" id=\"j14\">1</td><td class=\"ctr2\" id=\"k14\">1</td></tr><tr><td id=\"a17\"><a href=\"MatrixOperations.java.html#L1001\" class=\"el_method\">inverse()</a></td><td class=\"bar\" id=\"b15\"><img src=\"../jacoco-resources/redbar.gif\" width=\"33\" height=\"10\" title=\"59\" alt=\"59\"/></td><td class=\"ctr2\" id=\"c15\">0%</td><td class=\"bar\" id=\"d12\"><img src=\"../jacoco-resources/redbar.gif\" width=\"32\" height=\"10\" title=\"6\" alt=\"6\"/></td><td class=\"ctr2\" id=\"e15\">0%</td><td class=\"ctr1\" id=\"f12\">4</td><td class=\"ctr2\" id=\"g12\">4</td><td class=\"ctr1\" id=\"h10\">10</td><td class=\"ctr2\" id=\"i10\">10</td><td class=\"ctr1\" id=\"j15\">1</td><td class=\"ctr2\" id=\"k15\">1</td></tr><tr><td id=\"a1\"><a href=\"MatrixOperations.java.html#L62\" class=\"el_method\">add(double)</a></td><td class=\"bar\" id=\"b16\"><img src=\"../jacoco-resources/redbar.gif\" width=\"30\" height=\"10\" title=\"54\" alt=\"54\"/></td><td class=\"ctr2\" id=\"c16\">0%</td><td class=\"bar\" id=\"d17\"><img src=\"../jacoco-resources/redbar.gif\" width=\"21\" height=\"10\" title=\"4\" alt=\"4\"/></td><td class=\"ctr2\" id=\"e16\">0%</td><td class=\"ctr1\" id=\"f17\">3</td><td class=\"ctr2\" id=\"g17\">3</td><td class=\"ctr1\" id=\"h20\">6</td><td class=\"ctr2\" id=\"i20\">6</td><td class=\"ctr1\" id=\"j16\">1</td><td class=\"ctr2\" id=\"k16\">1</td></tr><tr><td id=\"a19\"><a href=\"MatrixOperations.java.html#L137\" class=\"el_method\">mult(Matrix)</a></td><td class=\"bar\" id=\"b17\"><img src=\"../jacoco-resources/redbar.gif\" width=\"29\" height=\"10\" title=\"51\" alt=\"51\"/></td><td class=\"ctr2\" id=\"c17\">0%</td><td class=\"bar\" id=\"d7\"><img src=\"../jacoco-resources/redbar.gif\" width=\"54\" height=\"10\" title=\"10\" alt=\"10\"/></td><td class=\"ctr2\" id=\"e17\">0%</td><td class=\"ctr1\" id=\"f7\">6</td><td class=\"ctr2\" id=\"g7\">6</td><td class=\"ctr1\" id=\"h11\">10</td><td class=\"ctr2\" id=\"i11\">10</td><td class=\"ctr1\" id=\"j17\">1</td><td class=\"ctr2\" id=\"k17\">1</td></tr><tr><td id=\"a7\"><a href=\"MatrixOperations.java.html#L547\" class=\"el_method\">detQR(Matrix)</a></td><td class=\"bar\" id=\"b18\"><img src=\"../jacoco-resources/redbar.gif\" width=\"26\" height=\"10\" title=\"46\" alt=\"46\"/></td><td class=\"ctr2\" id=\"c18\">0%</td><td class=\"bar\" id=\"d26\"><img src=\"../jacoco-resources/redbar.gif\" width=\"10\" height=\"10\" title=\"2\" alt=\"2\"/></td><td class=\"ctr2\" id=\"e18\">0%</td><td class=\"ctr1\" id=\"f26\">2</td><td class=\"ctr2\" id=\"g26\">2</td><td class=\"ctr1\" id=\"h21\">6</td><td class=\"ctr2\" id=\"i21\">6</td><td class=\"ctr1\" id=\"j18\">1</td><td class=\"ctr2\" id=\"k18\">1</td></tr><tr><td id=\"a35\"><a href=\"MatrixOperations.java.html#L113\" class=\"el_method\">sub(CNumber)</a></td><td class=\"bar\" id=\"b19\"><img src=\"../jacoco-resources/redbar.gif\" width=\"24\" height=\"10\" title=\"43\" alt=\"43\"/></td><td class=\"ctr2\" id=\"c19\">0%</td><td class=\"bar\" id=\"d18\"><img src=\"../jacoco-resources/redbar.gif\" width=\"21\" height=\"10\" title=\"4\" alt=\"4\"/></td><td class=\"ctr2\" id=\"e19\">0%</td><td class=\"ctr1\" id=\"f18\">3</td><td class=\"ctr2\" id=\"g18\">3</td><td class=\"ctr1\" id=\"h22\">6</td><td class=\"ctr2\" id=\"i22\">6</td><td class=\"ctr1\" id=\"j19\">1</td><td class=\"ctr2\" id=\"k19\">1</td></tr><tr><td id=\"a32\"><a href=\"MatrixOperations.java.html#L377\" class=\"el_method\">sqrt()</a></td><td class=\"bar\" id=\"b20\"><img src=\"../jacoco-resources/redbar.gif\" width=\"24\" height=\"10\" title=\"42\" alt=\"42\"/></td><td class=\"ctr2\" id=\"c20\">0%</td><td class=\"bar\" id=\"d19\"><img src=\"../jacoco-resources/redbar.gif\" width=\"21\" height=\"10\" title=\"4\" alt=\"4\"/></td><td class=\"ctr2\" id=\"e20\">0%</td><td class=\"ctr1\" id=\"f19\">3</td><td class=\"ctr2\" id=\"g19\">3</td><td class=\"ctr1\" id=\"h23\">6</td><td class=\"ctr2\" id=\"i23\">6</td><td class=\"ctr1\" id=\"j20\">1</td><td class=\"ctr2\" id=\"k20\">1</td></tr><tr><td id=\"a0\"><a href=\"MatrixOperations.java.html#L398\" class=\"el_method\">abs()</a></td><td class=\"bar\" id=\"b21\"><img src=\"../jacoco-resources/redbar.gif\" width=\"24\" height=\"10\" title=\"42\" alt=\"42\"/></td><td class=\"ctr2\" id=\"c21\">0%</td><td class=\"bar\" id=\"d20\"><img src=\"../jacoco-resources/redbar.gif\" width=\"21\" height=\"10\" title=\"4\" alt=\"4\"/></td><td class=\"ctr2\" id=\"e21\">0%</td><td class=\"ctr1\" id=\"f20\">3</td><td class=\"ctr2\" id=\"g20\">3</td><td class=\"ctr1\" id=\"h24\">6</td><td class=\"ctr2\" id=\"i24\">6</td><td class=\"ctr1\" id=\"j21\">1</td><td class=\"ctr2\" id=\"k21\">1</td></tr><tr><td id=\"a5\"><a href=\"MatrixOperations.java.html#L455\" class=\"el_method\">conjugate()</a></td><td class=\"bar\" id=\"b22\"><img src=\"../jacoco-resources/redbar.gif\" width=\"24\" height=\"10\" title=\"42\" alt=\"42\"/></td><td class=\"ctr2\" id=\"c22\">0%</td><td class=\"bar\" id=\"d21\"><img src=\"../jacoco-resources/redbar.gif\" width=\"21\" height=\"10\" title=\"4\" alt=\"4\"/></td><td class=\"ctr2\" id=\"e22\">0%</td><td class=\"ctr1\" id=\"f21\">3</td><td class=\"ctr2\" id=\"g21\">3</td><td class=\"ctr1\" id=\"h25\">6</td><td class=\"ctr2\" id=\"i25\">6</td><td class=\"ctr1\" id=\"j22\">1</td><td class=\"ctr2\" id=\"k22\">1</td></tr><tr><td id=\"a41\"><a href=\"MatrixOperations.java.html#L926\" class=\"el_method\">trace()</a></td><td class=\"bar\" id=\"b23\"><img src=\"../jacoco-resources/redbar.gif\" width=\"22\" height=\"10\" title=\"39\" alt=\"39\"/></td><td class=\"ctr2\" id=\"c23\">0%</td><td class=\"bar\" id=\"d22\"><img src=\"../jacoco-resources/redbar.gif\" width=\"21\" height=\"10\" title=\"4\" alt=\"4\"/></td><td class=\"ctr2\" id=\"e23\">0%</td><td class=\"ctr1\" id=\"f22\">3</td><td class=\"ctr2\" id=\"g22\">3</td><td class=\"ctr1\" id=\"h16\">7</td><td class=\"ctr2\" id=\"i16\">7</td><td class=\"ctr1\" id=\"j23\">1</td><td class=\"ctr2\" id=\"k23\">1</td></tr><tr><td id=\"a18\"><a href=\"MatrixOperations.java.html#L1057\" class=\"el_method\">inverseTriU(Matrix)</a></td><td class=\"bar\" id=\"b24\"><img src=\"../jacoco-resources/redbar.gif\" width=\"21\" height=\"10\" title=\"38\" alt=\"38\"/></td><td class=\"ctr2\" id=\"c24\">0%</td><td class=\"bar\" id=\"d23\"><img src=\"../jacoco-resources/redbar.gif\" width=\"21\" height=\"10\" title=\"4\" alt=\"4\"/></td><td class=\"ctr2\" id=\"e24\">0%</td><td class=\"ctr1\" id=\"f23\">3</td><td class=\"ctr2\" id=\"g23\">3</td><td class=\"ctr1\" id=\"h17\">7</td><td class=\"ctr2\" id=\"i17\">7</td><td class=\"ctr1\" id=\"j24\">1</td><td class=\"ctr2\" id=\"k24\">1</td></tr><tr><td id=\"a23\"><a href=\"MatrixOperations.java.html#L1079\" class=\"el_method\">recep()</a></td><td class=\"bar\" id=\"b25\"><img src=\"../jacoco-resources/redbar.gif\" width=\"21\" height=\"10\" title=\"38\" alt=\"38\"/></td><td class=\"ctr2\" id=\"c25\">0%</td><td class=\"bar\" id=\"d24\"><img src=\"../jacoco-resources/redbar.gif\" width=\"21\" height=\"10\" title=\"4\" alt=\"4\"/></td><td class=\"ctr2\" id=\"e25\">0%</td><td class=\"ctr1\" id=\"f24\">3</td><td class=\"ctr2\" id=\"g24\">3</td><td class=\"ctr1\" id=\"h26\">5</td><td class=\"ctr2\" id=\"i26\">5</td><td class=\"ctr1\" id=\"j25\">1</td><td class=\"ctr2\" id=\"k25\">1</td></tr><tr><td id=\"a22\"><a href=\"MatrixOperations.java.html#L965\" class=\"el_method\">rank()</a></td><td class=\"bar\" id=\"b26\"><img src=\"../jacoco-resources/redbar.gif\" width=\"14\" height=\"10\" title=\"26\" alt=\"26\"/></td><td class=\"ctr2\" id=\"c26\">0%</td><td class=\"bar\" id=\"d25\"><img src=\"../jacoco-resources/redbar.gif\" width=\"21\" height=\"10\" title=\"4\" alt=\"4\"/></td><td class=\"ctr2\" id=\"e26\">0%</td><td class=\"ctr1\" id=\"f25\">3</td><td class=\"ctr2\" id=\"g25\">3</td><td class=\"ctr1\" id=\"h18\">7</td><td class=\"ctr2\" id=\"i18\">7</td><td class=\"ctr1\" id=\"j26\">1</td><td class=\"ctr2\" id=\"k26\">1</td></tr><tr><td id=\"a12\"><a href=\"MatrixOperations.java.html#L909\" class=\"el_method\">erref()</a></td><td class=\"bar\" id=\"b27\"><img src=\"../jacoco-resources/redbar.gif\" width=\"8\" height=\"10\" title=\"14\" alt=\"14\"/></td><td class=\"ctr2\" id=\"c27\">0%</td><td class=\"bar\" id=\"d28\"/><td class=\"ctr2\" id=\"e28\">n/a</td><td class=\"ctr1\" id=\"f28\">1</td><td class=\"ctr2\" id=\"g28\">1</td><td class=\"ctr1\" id=\"h27\">4</td><td class=\"ctr2\" id=\"i27\">4</td><td class=\"ctr1\" id=\"j27\">1</td><td class=\"ctr2\" id=\"k27\">1</td></tr><tr><td id=\"a29\"><a href=\"MatrixOperations.java.html#L278\" class=\"el_method\">scalDiv(double)</a></td><td class=\"bar\" id=\"b28\"><img src=\"../jacoco-resources/redbar.gif\" width=\"6\" height=\"10\" title=\"11\" alt=\"11\"/></td><td class=\"ctr2\" id=\"c28\">0%</td><td class=\"bar\" id=\"d29\"/><td class=\"ctr2\" id=\"e29\">n/a</td><td class=\"ctr1\" id=\"f29\">1</td><td class=\"ctr2\" id=\"g29\">1</td><td class=\"ctr1\" id=\"h28\">2</td><td class=\"ctr2\" id=\"i28\">2</td><td class=\"ctr1\" id=\"j28\">1</td><td class=\"ctr2\" id=\"k28\">1</td></tr><tr><td id=\"a21\"><a href=\"MatrixOperations.java.html#L989\" class=\"el_method\">nullity()</a></td><td class=\"bar\" id=\"b29\"><img src=\"../jacoco-resources/redbar.gif\" width=\"5\" height=\"10\" title=\"9\" alt=\"9\"/></td><td class=\"ctr2\" id=\"c29\">0%</td><td class=\"bar\" id=\"d30\"/><td class=\"ctr2\" id=\"e30\">n/a</td><td class=\"ctr1\" id=\"f30\">1</td><td class=\"ctr2\" id=\"g30\">1</td><td class=\"ctr1\" id=\"h29\">2</td><td class=\"ctr2\" id=\"i29\">2</td><td class=\"ctr1\" id=\"j29\">1</td><td class=\"ctr2\" id=\"k29\">1</td></tr><tr><td id=\"a28\"><a href=\"MatrixOperations.java.html#L290\" class=\"el_method\">scalDiv(CNumber)</a></td><td class=\"bar\" id=\"b30\"><img src=\"../jacoco-resources/redbar.gif\" width=\"4\" height=\"10\" title=\"8\" alt=\"8\"/></td><td class=\"ctr2\" id=\"c30\">0%</td><td class=\"bar\" id=\"d31\"/><td class=\"ctr2\" id=\"e31\">n/a</td><td class=\"ctr1\" id=\"f31\">1</td><td class=\"ctr2\" id=\"g31\">1</td><td class=\"ctr1\" id=\"h30\">2</td><td class=\"ctr2\" id=\"i30\">2</td><td class=\"ctr1\" id=\"j30\">1</td><td class=\"ctr2\" id=\"k30\">1</td></tr><tr><td id=\"a26\"><a href=\"MatrixOperations.java.html#L753\" class=\"el_method\">rref(boolean)</a></td><td class=\"bar\" id=\"b31\"><img src=\"../jacoco-resources/redbar.gif\" width=\"4\" height=\"10\" title=\"8\" alt=\"8\"/></td><td class=\"ctr2\" id=\"c31\">0%</td><td class=\"bar\" id=\"d27\"><img src=\"../jacoco-resources/redbar.gif\" width=\"10\" height=\"10\" title=\"2\" alt=\"2\"/></td><td class=\"ctr2\" id=\"e27\">0%</td><td class=\"ctr1\" id=\"f27\">2</td><td class=\"ctr2\" id=\"g27\">2</td><td class=\"ctr1\" id=\"h31\">2</td><td class=\"ctr2\" id=\"i31\">2</td><td class=\"ctr1\" id=\"j31\">1</td><td class=\"ctr2\" id=\"k31\">1</td></tr><tr><td id=\"a31\"><a href=\"MatrixOperations.java.html#L220\" class=\"el_method\">scalMult(double)</a></td><td class=\"bar\" id=\"b32\"><img src=\"../jacoco-resources/redbar.gif\" width=\"4\" height=\"10\" title=\"7\" alt=\"7\"/></td><td class=\"ctr2\" id=\"c32\">0%</td><td class=\"bar\" id=\"d32\"/><td class=\"ctr2\" id=\"e32\">n/a</td><td class=\"ctr1\" id=\"f32\">1</td><td class=\"ctr2\" id=\"g32\">1</td><td class=\"ctr1\" id=\"h32\">1</td><td class=\"ctr2\" id=\"i32\">1</td><td class=\"ctr1\" id=\"j32\">1</td><td class=\"ctr2\" id=\"k32\">1</td></tr><tr><td id=\"a36\"><a href=\"MatrixOperations.java.html#L103\" class=\"el_method\">sub(double)</a></td><td class=\"bar\" id=\"b33\"><img src=\"../jacoco-resources/redbar.gif\" width=\"2\" height=\"10\" title=\"5\" alt=\"5\"/></td><td class=\"ctr2\" id=\"c33\">0%</td><td class=\"bar\" id=\"d33\"/><td class=\"ctr2\" id=\"e33\">n/a</td><td class=\"ctr1\" id=\"f33\">1</td><td class=\"ctr2\" id=\"g33\">1</td><td class=\"ctr1\" id=\"h33\">1</td><td class=\"ctr2\" id=\"i33\">1</td><td class=\"ctr1\" id=\"j33\">1</td><td class=\"ctr2\" id=\"k33\">1</td></tr><tr><td id=\"a13\"><a href=\"MatrixOperations.java.html#L302\" class=\"el_method\">fip(Matrix)</a></td><td class=\"bar\" id=\"b34\"><img src=\"../jacoco-resources/redbar.gif\" width=\"2\" height=\"10\" title=\"5\" alt=\"5\"/></td><td class=\"ctr2\" id=\"c34\">0%</td><td class=\"bar\" id=\"d34\"/><td class=\"ctr2\" id=\"e34\">n/a</td><td class=\"ctr1\" id=\"f34\">1</td><td class=\"ctr2\" id=\"g34\">1</td><td class=\"ctr1\" id=\"h34\">1</td><td class=\"ctr2\" id=\"i34\">1</td><td class=\"ctr1\" id=\"j34\">1</td><td class=\"ctr2\" id=\"k34\">1</td></tr><tr><td id=\"a33\"><a href=\"MatrixOperations.java.html#L595\" class=\"el_method\">stack(Matrix)</a></td><td class=\"bar\" id=\"b35\"><img src=\"../jacoco-resources/redbar.gif\" width=\"2\" height=\"10\" title=\"5\" alt=\"5\"/></td><td class=\"ctr2\" id=\"c35\">0%</td><td class=\"bar\" id=\"d35\"/><td class=\"ctr2\" id=\"e35\">n/a</td><td class=\"ctr1\" id=\"f35\">1</td><td class=\"ctr2\" id=\"g35\">1</td><td class=\"ctr1\" id=\"h35\">1</td><td class=\"ctr2\" id=\"i35\">1</td><td class=\"ctr1\" id=\"j35\">1</td><td class=\"ctr2\" id=\"k35\">1</td></tr><tr><td id=\"a3\"><a href=\"MatrixOperations.java.html#L665\" class=\"el_method\">augment(Matrix)</a></td><td class=\"bar\" id=\"b36\"><img src=\"../jacoco-resources/redbar.gif\" width=\"2\" height=\"10\" title=\"5\" alt=\"5\"/></td><td class=\"ctr2\" id=\"c36\">0%</td><td class=\"bar\" id=\"d36\"/><td class=\"ctr2\" id=\"e36\">n/a</td><td class=\"ctr1\" id=\"f36\">1</td><td class=\"ctr2\" id=\"g36\">1</td><td class=\"ctr1\" id=\"h36\">1</td><td class=\"ctr2\" id=\"i36\">1</td><td class=\"ctr1\" id=\"j36\">1</td><td class=\"ctr2\" id=\"k36\">1</td></tr><tr><td id=\"a4\"><a href=\"MatrixOperations.java.html#L476\" class=\"el_method\">conjT()</a></td><td class=\"bar\" id=\"b37\"><img src=\"../jacoco-resources/redbar.gif\" width=\"2\" height=\"10\" title=\"4\" alt=\"4\"/></td><td class=\"ctr2\" id=\"c37\">0%</td><td class=\"bar\" id=\"d37\"/><td class=\"ctr2\" id=\"e37\">n/a</td><td class=\"ctr1\" id=\"f37\">1</td><td class=\"ctr2\" id=\"g37\">1</td><td class=\"ctr1\" id=\"h37\">1</td><td class=\"ctr2\" id=\"i37\">1</td><td class=\"ctr1\" id=\"j37\">1</td><td class=\"ctr2\" id=\"k37\">1</td></tr><tr><td id=\"a15\"><a href=\"MatrixOperations.java.html#L488\" class=\"el_method\">hermAdjoint()</a></td><td class=\"bar\" id=\"b38\"><img src=\"../jacoco-resources/redbar.gif\" width=\"2\" height=\"10\" title=\"4\" alt=\"4\"/></td><td class=\"ctr2\" id=\"c38\">0%</td><td class=\"bar\" id=\"d38\"/><td class=\"ctr2\" id=\"e38\">n/a</td><td class=\"ctr1\" id=\"f38\">1</td><td class=\"ctr2\" id=\"g38\">1</td><td class=\"ctr1\" id=\"h38\">1</td><td class=\"ctr2\" id=\"i38\">1</td><td class=\"ctr1\" id=\"j38\">1</td><td class=\"ctr2\" id=\"k38\">1</td></tr><tr><td id=\"a14\"><a href=\"MatrixOperations.java.html#L500\" class=\"el_method\">H()</a></td><td class=\"bar\" id=\"b39\"><img src=\"../jacoco-resources/redbar.gif\" width=\"2\" height=\"10\" title=\"4\" alt=\"4\"/></td><td class=\"ctr2\" id=\"c39\">0%</td><td class=\"bar\" id=\"d39\"/><td class=\"ctr2\" id=\"e39\">n/a</td><td class=\"ctr1\" id=\"f39\">1</td><td class=\"ctr2\" id=\"g39\">1</td><td class=\"ctr1\" id=\"h39\">1</td><td class=\"ctr2\" id=\"i39\">1</td><td class=\"ctr1\" id=\"j39\">1</td><td class=\"ctr2\" id=\"k39\">1</td></tr><tr><td id=\"a42\"><a href=\"MatrixOperations.java.html#L417\" class=\"el_method\">transpose()</a></td><td class=\"bar\" id=\"b40\"><img src=\"../jacoco-resources/redbar.gif\" width=\"1\" height=\"10\" title=\"3\" alt=\"3\"/></td><td class=\"ctr2\" id=\"c40\">0%</td><td class=\"bar\" id=\"d40\"/><td class=\"ctr2\" id=\"e40\">n/a</td><td class=\"ctr1\" id=\"f40\">1</td><td class=\"ctr2\" id=\"g40\">1</td><td class=\"ctr1\" id=\"h40\">1</td><td class=\"ctr2\" id=\"i40\">1</td><td class=\"ctr1\" id=\"j40\">1</td><td class=\"ctr2\" id=\"k40\">1</td></tr><tr><td id=\"a40\"><a href=\"MatrixOperations.java.html#L951\" class=\"el_method\">tr()</a></td><td class=\"bar\" id=\"b41\"><img src=\"../jacoco-resources/redbar.gif\" width=\"1\" height=\"10\" title=\"3\" alt=\"3\"/></td><td class=\"ctr2\" id=\"c41\">0%</td><td class=\"bar\" id=\"d41\"/><td class=\"ctr2\" id=\"e41\">n/a</td><td class=\"ctr1\" id=\"f41\">1</td><td class=\"ctr2\" id=\"g41\">1</td><td class=\"ctr1\" id=\"h41\">1</td><td class=\"ctr2\" id=\"i41\">1</td><td class=\"ctr1\" id=\"j41\">1</td><td class=\"ctr2\" id=\"k41\">1</td></tr><tr><td id=\"a16\"><a href=\"MatrixOperations.java.html#L1038\" class=\"el_method\">inv()</a></td><td class=\"bar\" id=\"b42\"><img src=\"../jacoco-resources/redbar.gif\" width=\"1\" height=\"10\" title=\"3\" alt=\"3\"/></td><td class=\"ctr2\" id=\"c42\">0%</td><td class=\"bar\" id=\"d42\"/><td class=\"ctr2\" id=\"e42\">n/a</td><td class=\"ctr1\" id=\"f42\">1</td><td class=\"ctr2\" id=\"g42\">1</td><td class=\"ctr1\" id=\"h42\">1</td><td class=\"ctr2\" id=\"i42\">1</td><td class=\"ctr1\" id=\"j42\">1</td><td class=\"ctr2\" id=\"k42\">1</td></tr></tbody></table><div class=\"footer\"><span class=\"right\">Created with <a href=\"http://www.jacoco.org/jacoco\">JaCoCo</a> 0.8.7.202105040129</span></div></body></html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/site/jacoco/linalg/MatrixOperations.html b/target/site/jacoco/linalg/MatrixOperations.html
--- a/target/site/jacoco/linalg/MatrixOperations.html	(revision 48dc0b3e0abf8d6b081fabfbe0061d32ae01ed50)
+++ b/target/site/jacoco/linalg/MatrixOperations.html	(date 1649895261244)
@@ -1,1 +1,1 @@
-<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../jacoco-resources/report.css" type="text/css"/><link rel="shortcut icon" href="../jacoco-resources/report.gif" type="image/gif"/><title>MatrixOperations</title><script type="text/javascript" src="../jacoco-resources/sort.js"></script></head><body onload="initialSort(['breadcrumb'])"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../jacoco-sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Java-Linear-Algebra</a> &gt; <a href="index.html" class="el_package">linalg</a> &gt; <span class="el_class">MatrixOperations</span></div><h1>MatrixOperations</h1><table class="coverage" cellspacing="0" id="coveragetable"><thead><tr><td class="sortable" id="a" onclick="toggleSort(this)">Element</td><td class="down sortable bar" id="b" onclick="toggleSort(this)">Missed Instructions</td><td class="sortable ctr2" id="c" onclick="toggleSort(this)">Cov.</td><td class="sortable bar" id="d" onclick="toggleSort(this)">Missed Branches</td><td class="sortable ctr2" id="e" onclick="toggleSort(this)">Cov.</td><td class="sortable ctr1" id="f" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="g" onclick="toggleSort(this)">Cxty</td><td class="sortable ctr1" id="h" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="i" onclick="toggleSort(this)">Lines</td><td class="sortable ctr1" id="j" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="k" onclick="toggleSort(this)">Methods</td></tr></thead><tfoot><tr><td>Total</td><td class="bar">2,338 of 2,338</td><td class="ctr2">0%</td><td class="bar">202 of 202</td><td class="ctr2">0%</td><td class="ctr1">144</td><td class="ctr2">144</td><td class="ctr1">310</td><td class="ctr2">310</td><td class="ctr1">43</td><td class="ctr2">43</td></tr></tfoot><tbody><tr><td id="a34"><a href="MatrixOperations.java.html#L611" class="el_method">stack(Matrix, int)</a></td><td class="bar" id="b0"><img src="../jacoco-resources/redbar.gif" width="120" height="10" title="210" alt="210"/></td><td class="ctr2" id="c0">0%</td><td class="bar" id="d1"><img src="../jacoco-resources/redbar.gif" width="109" height="10" title="20" alt="20"/></td><td class="ctr2" id="e0">0%</td><td class="ctr1" id="f1">11</td><td class="ctr2" id="g1">11</td><td class="ctr1" id="h1">22</td><td class="ctr2" id="i1">22</td><td class="ctr1" id="j0">1</td><td class="ctr2" id="k0">1</td></tr><tr><td id="a25"><a href="MatrixOperations.java.html#L779" class="el_method">rref()</a></td><td class="bar" id="b1"><img src="../jacoco-resources/redbar.gif" width="103" height="10" title="181" alt="181"/></td><td class="ctr2" id="c1">0%</td><td class="bar" id="d0"><img src="../jacoco-resources/redbar.gif" width="120" height="10" title="22" alt="22"/></td><td class="ctr2" id="e1">0%</td><td class="ctr1" id="f0">12</td><td class="ctr2" id="g0">12</td><td class="ctr1" id="h0">30</td><td class="ctr2" id="i0">30</td><td class="ctr1" id="j1">1</td><td class="ctr2" id="k1">1</td></tr><tr><td id="a10"><a href="MatrixOperations.java.html#L252" class="el_method">elemDiv(Matrix)</a></td><td class="bar" id="b2"><img src="../jacoco-resources/redbar.gif" width="96" height="10" title="168" alt="168"/></td><td class="ctr2" id="c2">0%</td><td class="bar" id="d13"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e2">0%</td><td class="ctr1" id="f13">3</td><td class="ctr2" id="g13">3</td><td class="ctr1" id="h13">7</td><td class="ctr2" id="i13">7</td><td class="ctr1" id="j2">1</td><td class="ctr2" id="k2">1</td></tr><tr><td id="a2"><a href="MatrixOperations.java.html#L21" class="el_method">add(Matrix)</a></td><td class="bar" id="b3"><img src="../jacoco-resources/redbar.gif" width="80" height="10" title="141" alt="141"/></td><td class="ctr2" id="c3">0%</td><td class="bar" id="d2"><img src="../jacoco-resources/redbar.gif" width="87" height="10" title="16" alt="16"/></td><td class="ctr2" id="e3">0%</td><td class="ctr1" id="f2">9</td><td class="ctr2" id="g2">9</td><td class="ctr1" id="h7">14</td><td class="ctr2" id="i7">14</td><td class="ctr1" id="j3">1</td><td class="ctr2" id="k3">1</td></tr><tr><td id="a20"><a href="MatrixOperations.java.html#L166" class="el_method">mult(Vector)</a></td><td class="bar" id="b4"><img src="../jacoco-resources/redbar.gif" width="69" height="10" title="121" alt="121"/></td><td class="ctr2" id="c4">0%</td><td class="bar" id="d8"><img src="../jacoco-resources/redbar.gif" width="32" height="10" title="6" alt="6"/></td><td class="ctr2" id="e4">0%</td><td class="ctr1" id="f8">4</td><td class="ctr2" id="g8">4</td><td class="ctr1" id="h8">10</td><td class="ctr2" id="i8">10</td><td class="ctr1" id="j4">1</td><td class="ctr2" id="k4">1</td></tr><tr><td id="a24"><a href="MatrixOperations.java.html#L688" class="el_method">ref()</a></td><td class="bar" id="b5"><img src="../jacoco-resources/redbar.gif" width="65" height="10" title="114" alt="114"/></td><td class="ctr2" id="c5">0%</td><td class="bar" id="d4"><img src="../jacoco-resources/redbar.gif" width="65" height="10" title="12" alt="12"/></td><td class="ctr2" id="e5">0%</td><td class="ctr1" id="f4">7</td><td class="ctr2" id="g4">7</td><td class="ctr1" id="h2">17</td><td class="ctr2" id="i2">17</td><td class="ctr1" id="j5">1</td><td class="ctr2" id="k5">1</td></tr><tr><td id="a27"><a href="MatrixOperations.java.html#L867" class="el_method">rrefNoPivot()</a></td><td class="bar" id="b6"><img src="../jacoco-resources/redbar.gif" width="61" height="10" title="108" alt="108"/></td><td class="ctr2" id="c6">0%</td><td class="bar" id="d3"><img src="../jacoco-resources/redbar.gif" width="76" height="10" title="14" alt="14"/></td><td class="ctr2" id="e6">0%</td><td class="ctr1" id="f3">8</td><td class="ctr2" id="g3">8</td><td class="ctr1" id="h3">17</td><td class="ctr2" id="i3">17</td><td class="ctr1" id="j6">1</td><td class="ctr2" id="k6">1</td></tr><tr><td id="a11"><a href="MatrixOperations.java.html#L196" class="el_method">elemMult(Matrix)</a></td><td class="bar" id="b7"><img src="../jacoco-resources/redbar.gif" width="59" height="10" title="104" alt="104"/></td><td class="ctr2" id="c7">0%</td><td class="bar" id="d14"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e7">0%</td><td class="ctr1" id="f14">3</td><td class="ctr2" id="g14">3</td><td class="ctr1" id="h14">7</td><td class="ctr2" id="i14">7</td><td class="ctr1" id="j7">1</td><td class="ctr2" id="k7">1</td></tr><tr><td id="a8"><a href="MatrixOperations.java.html#L512" class="el_method">detRec(Matrix)</a></td><td class="bar" id="b8"><img src="../jacoco-resources/redbar.gif" width="58" height="10" title="102" alt="102"/></td><td class="ctr2" id="c8">0%</td><td class="bar" id="d6"><img src="../jacoco-resources/redbar.gif" width="54" height="10" title="10" alt="10"/></td><td class="ctr2" id="e8">0%</td><td class="ctr1" id="f6">6</td><td class="ctr2" id="g6">6</td><td class="ctr1" id="h5">16</td><td class="ctr2" id="i5">16</td><td class="ctr1" id="j8">1</td><td class="ctr2" id="k8">1</td></tr><tr><td id="a38"><a href="MatrixOperations.java.html#L342" class="el_method">sudoDirectSum(Matrix[])</a></td><td class="bar" id="b9"><img src="../jacoco-resources/redbar.gif" width="56" height="10" title="99" alt="99"/></td><td class="ctr2" id="c9">0%</td><td class="bar" id="d9"><img src="../jacoco-resources/redbar.gif" width="32" height="10" title="6" alt="6"/></td><td class="ctr2" id="e9">0%</td><td class="ctr1" id="f9">4</td><td class="ctr2" id="g9">4</td><td class="ctr1" id="h4">17</td><td class="ctr2" id="i4">17</td><td class="ctr1" id="j9">1</td><td class="ctr2" id="k9">1</td></tr><tr><td id="a9"><a href="MatrixOperations.java.html#L313" class="el_method">directSum(Matrix[])</a></td><td class="bar" id="b10"><img src="../jacoco-resources/redbar.gif" width="52" height="10" title="91" alt="91"/></td><td class="ctr2" id="c10">0%</td><td class="bar" id="d10"><img src="../jacoco-resources/redbar.gif" width="32" height="10" title="6" alt="6"/></td><td class="ctr2" id="e10">0%</td><td class="ctr1" id="f10">4</td><td class="ctr2" id="g10">4</td><td class="ctr1" id="h6">16</td><td class="ctr2" id="i6">16</td><td class="ctr1" id="j10">1</td><td class="ctr2" id="k10">1</td></tr><tr><td id="a30"><a href="MatrixOperations.java.html#L231" class="el_method">scalMult(CNumber)</a></td><td class="bar" id="b11"><img src="../jacoco-resources/redbar.gif" width="45" height="10" title="80" alt="80"/></td><td class="ctr2" id="c11">0%</td><td class="bar" id="d15"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e11">0%</td><td class="ctr1" id="f15">3</td><td class="ctr2" id="g15">3</td><td class="ctr1" id="h19">6</td><td class="ctr2" id="i19">6</td><td class="ctr1" id="j11">1</td><td class="ctr2" id="k11">1</td></tr><tr><td id="a37"><a href="MatrixOperations.java.html#L82" class="el_method">sub(Matrix)</a></td><td class="bar" id="b12"><img src="../jacoco-resources/redbar.gif" width="41" height="10" title="72" alt="72"/></td><td class="ctr2" id="c12">0%</td><td class="bar" id="d16"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e12">0%</td><td class="ctr1" id="f16">3</td><td class="ctr2" id="g16">3</td><td class="ctr1" id="h15">7</td><td class="ctr2" id="i15">7</td><td class="ctr1" id="j12">1</td><td class="ctr2" id="k12">1</td></tr><tr><td id="a39"><a href="MatrixOperations.java.html#L428" class="el_method">T()</a></td><td class="bar" id="b13"><img src="../jacoco-resources/redbar.gif" width="39" height="10" title="69" alt="69"/></td><td class="ctr2" id="c13">0%</td><td class="bar" id="d5"><img src="../jacoco-resources/redbar.gif" width="65" height="10" title="12" alt="12"/></td><td class="ctr2" id="e13">0%</td><td class="ctr1" id="f5">7</td><td class="ctr2" id="g5">7</td><td class="ctr1" id="h12">9</td><td class="ctr2" id="i12">9</td><td class="ctr1" id="j13">1</td><td class="ctr2" id="k13">1</td></tr><tr><td id="a6"><a href="MatrixOperations.java.html#L568" class="el_method">det()</a></td><td class="bar" id="b14"><img src="../jacoco-resources/redbar.gif" width="34" height="10" title="60" alt="60"/></td><td class="ctr2" id="c14">0%</td><td class="bar" id="d11"><img src="../jacoco-resources/redbar.gif" width="32" height="10" title="6" alt="6"/></td><td class="ctr2" id="e14">0%</td><td class="ctr1" id="f11">4</td><td class="ctr2" id="g11">4</td><td class="ctr1" id="h9">10</td><td class="ctr2" id="i9">10</td><td class="ctr1" id="j14">1</td><td class="ctr2" id="k14">1</td></tr><tr><td id="a17"><a href="MatrixOperations.java.html#L1001" class="el_method">inverse()</a></td><td class="bar" id="b15"><img src="../jacoco-resources/redbar.gif" width="33" height="10" title="59" alt="59"/></td><td class="ctr2" id="c15">0%</td><td class="bar" id="d12"><img src="../jacoco-resources/redbar.gif" width="32" height="10" title="6" alt="6"/></td><td class="ctr2" id="e15">0%</td><td class="ctr1" id="f12">4</td><td class="ctr2" id="g12">4</td><td class="ctr1" id="h10">10</td><td class="ctr2" id="i10">10</td><td class="ctr1" id="j15">1</td><td class="ctr2" id="k15">1</td></tr><tr><td id="a1"><a href="MatrixOperations.java.html#L62" class="el_method">add(double)</a></td><td class="bar" id="b16"><img src="../jacoco-resources/redbar.gif" width="30" height="10" title="54" alt="54"/></td><td class="ctr2" id="c16">0%</td><td class="bar" id="d17"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e16">0%</td><td class="ctr1" id="f17">3</td><td class="ctr2" id="g17">3</td><td class="ctr1" id="h20">6</td><td class="ctr2" id="i20">6</td><td class="ctr1" id="j16">1</td><td class="ctr2" id="k16">1</td></tr><tr><td id="a19"><a href="MatrixOperations.java.html#L137" class="el_method">mult(Matrix)</a></td><td class="bar" id="b17"><img src="../jacoco-resources/redbar.gif" width="29" height="10" title="51" alt="51"/></td><td class="ctr2" id="c17">0%</td><td class="bar" id="d7"><img src="../jacoco-resources/redbar.gif" width="54" height="10" title="10" alt="10"/></td><td class="ctr2" id="e17">0%</td><td class="ctr1" id="f7">6</td><td class="ctr2" id="g7">6</td><td class="ctr1" id="h11">10</td><td class="ctr2" id="i11">10</td><td class="ctr1" id="j17">1</td><td class="ctr2" id="k17">1</td></tr><tr><td id="a7"><a href="MatrixOperations.java.html#L547" class="el_method">detQR(Matrix)</a></td><td class="bar" id="b18"><img src="../jacoco-resources/redbar.gif" width="26" height="10" title="46" alt="46"/></td><td class="ctr2" id="c18">0%</td><td class="bar" id="d26"><img src="../jacoco-resources/redbar.gif" width="10" height="10" title="2" alt="2"/></td><td class="ctr2" id="e18">0%</td><td class="ctr1" id="f26">2</td><td class="ctr2" id="g26">2</td><td class="ctr1" id="h21">6</td><td class="ctr2" id="i21">6</td><td class="ctr1" id="j18">1</td><td class="ctr2" id="k18">1</td></tr><tr><td id="a35"><a href="MatrixOperations.java.html#L113" class="el_method">sub(CNumber)</a></td><td class="bar" id="b19"><img src="../jacoco-resources/redbar.gif" width="24" height="10" title="43" alt="43"/></td><td class="ctr2" id="c19">0%</td><td class="bar" id="d18"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e19">0%</td><td class="ctr1" id="f18">3</td><td class="ctr2" id="g18">3</td><td class="ctr1" id="h22">6</td><td class="ctr2" id="i22">6</td><td class="ctr1" id="j19">1</td><td class="ctr2" id="k19">1</td></tr><tr><td id="a32"><a href="MatrixOperations.java.html#L377" class="el_method">sqrt()</a></td><td class="bar" id="b20"><img src="../jacoco-resources/redbar.gif" width="24" height="10" title="42" alt="42"/></td><td class="ctr2" id="c20">0%</td><td class="bar" id="d19"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e20">0%</td><td class="ctr1" id="f19">3</td><td class="ctr2" id="g19">3</td><td class="ctr1" id="h23">6</td><td class="ctr2" id="i23">6</td><td class="ctr1" id="j20">1</td><td class="ctr2" id="k20">1</td></tr><tr><td id="a0"><a href="MatrixOperations.java.html#L398" class="el_method">abs()</a></td><td class="bar" id="b21"><img src="../jacoco-resources/redbar.gif" width="24" height="10" title="42" alt="42"/></td><td class="ctr2" id="c21">0%</td><td class="bar" id="d20"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e21">0%</td><td class="ctr1" id="f20">3</td><td class="ctr2" id="g20">3</td><td class="ctr1" id="h24">6</td><td class="ctr2" id="i24">6</td><td class="ctr1" id="j21">1</td><td class="ctr2" id="k21">1</td></tr><tr><td id="a5"><a href="MatrixOperations.java.html#L455" class="el_method">conjugate()</a></td><td class="bar" id="b22"><img src="../jacoco-resources/redbar.gif" width="24" height="10" title="42" alt="42"/></td><td class="ctr2" id="c22">0%</td><td class="bar" id="d21"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e22">0%</td><td class="ctr1" id="f21">3</td><td class="ctr2" id="g21">3</td><td class="ctr1" id="h25">6</td><td class="ctr2" id="i25">6</td><td class="ctr1" id="j22">1</td><td class="ctr2" id="k22">1</td></tr><tr><td id="a41"><a href="MatrixOperations.java.html#L926" class="el_method">trace()</a></td><td class="bar" id="b23"><img src="../jacoco-resources/redbar.gif" width="22" height="10" title="39" alt="39"/></td><td class="ctr2" id="c23">0%</td><td class="bar" id="d22"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e23">0%</td><td class="ctr1" id="f22">3</td><td class="ctr2" id="g22">3</td><td class="ctr1" id="h16">7</td><td class="ctr2" id="i16">7</td><td class="ctr1" id="j23">1</td><td class="ctr2" id="k23">1</td></tr><tr><td id="a18"><a href="MatrixOperations.java.html#L1057" class="el_method">inverseTriU(Matrix)</a></td><td class="bar" id="b24"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="38" alt="38"/></td><td class="ctr2" id="c24">0%</td><td class="bar" id="d23"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e24">0%</td><td class="ctr1" id="f23">3</td><td class="ctr2" id="g23">3</td><td class="ctr1" id="h17">7</td><td class="ctr2" id="i17">7</td><td class="ctr1" id="j24">1</td><td class="ctr2" id="k24">1</td></tr><tr><td id="a23"><a href="MatrixOperations.java.html#L1079" class="el_method">recep()</a></td><td class="bar" id="b25"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="38" alt="38"/></td><td class="ctr2" id="c25">0%</td><td class="bar" id="d24"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e25">0%</td><td class="ctr1" id="f24">3</td><td class="ctr2" id="g24">3</td><td class="ctr1" id="h26">5</td><td class="ctr2" id="i26">5</td><td class="ctr1" id="j25">1</td><td class="ctr2" id="k25">1</td></tr><tr><td id="a22"><a href="MatrixOperations.java.html#L965" class="el_method">rank()</a></td><td class="bar" id="b26"><img src="../jacoco-resources/redbar.gif" width="14" height="10" title="26" alt="26"/></td><td class="ctr2" id="c26">0%</td><td class="bar" id="d25"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e26">0%</td><td class="ctr1" id="f25">3</td><td class="ctr2" id="g25">3</td><td class="ctr1" id="h18">7</td><td class="ctr2" id="i18">7</td><td class="ctr1" id="j26">1</td><td class="ctr2" id="k26">1</td></tr><tr><td id="a12"><a href="MatrixOperations.java.html#L909" class="el_method">erref()</a></td><td class="bar" id="b27"><img src="../jacoco-resources/redbar.gif" width="8" height="10" title="14" alt="14"/></td><td class="ctr2" id="c27">0%</td><td class="bar" id="d28"/><td class="ctr2" id="e28">n/a</td><td class="ctr1" id="f28">1</td><td class="ctr2" id="g28">1</td><td class="ctr1" id="h27">4</td><td class="ctr2" id="i27">4</td><td class="ctr1" id="j27">1</td><td class="ctr2" id="k27">1</td></tr><tr><td id="a29"><a href="MatrixOperations.java.html#L278" class="el_method">scalDiv(double)</a></td><td class="bar" id="b28"><img src="../jacoco-resources/redbar.gif" width="6" height="10" title="11" alt="11"/></td><td class="ctr2" id="c28">0%</td><td class="bar" id="d29"/><td class="ctr2" id="e29">n/a</td><td class="ctr1" id="f29">1</td><td class="ctr2" id="g29">1</td><td class="ctr1" id="h28">2</td><td class="ctr2" id="i28">2</td><td class="ctr1" id="j28">1</td><td class="ctr2" id="k28">1</td></tr><tr><td id="a21"><a href="MatrixOperations.java.html#L989" class="el_method">nullity()</a></td><td class="bar" id="b29"><img src="../jacoco-resources/redbar.gif" width="5" height="10" title="9" alt="9"/></td><td class="ctr2" id="c29">0%</td><td class="bar" id="d30"/><td class="ctr2" id="e30">n/a</td><td class="ctr1" id="f30">1</td><td class="ctr2" id="g30">1</td><td class="ctr1" id="h29">2</td><td class="ctr2" id="i29">2</td><td class="ctr1" id="j29">1</td><td class="ctr2" id="k29">1</td></tr><tr><td id="a28"><a href="MatrixOperations.java.html#L290" class="el_method">scalDiv(CNumber)</a></td><td class="bar" id="b30"><img src="../jacoco-resources/redbar.gif" width="4" height="10" title="8" alt="8"/></td><td class="ctr2" id="c30">0%</td><td class="bar" id="d31"/><td class="ctr2" id="e31">n/a</td><td class="ctr1" id="f31">1</td><td class="ctr2" id="g31">1</td><td class="ctr1" id="h30">2</td><td class="ctr2" id="i30">2</td><td class="ctr1" id="j30">1</td><td class="ctr2" id="k30">1</td></tr><tr><td id="a26"><a href="MatrixOperations.java.html#L753" class="el_method">rref(boolean)</a></td><td class="bar" id="b31"><img src="../jacoco-resources/redbar.gif" width="4" height="10" title="8" alt="8"/></td><td class="ctr2" id="c31">0%</td><td class="bar" id="d27"><img src="../jacoco-resources/redbar.gif" width="10" height="10" title="2" alt="2"/></td><td class="ctr2" id="e27">0%</td><td class="ctr1" id="f27">2</td><td class="ctr2" id="g27">2</td><td class="ctr1" id="h31">2</td><td class="ctr2" id="i31">2</td><td class="ctr1" id="j31">1</td><td class="ctr2" id="k31">1</td></tr><tr><td id="a31"><a href="MatrixOperations.java.html#L220" class="el_method">scalMult(double)</a></td><td class="bar" id="b32"><img src="../jacoco-resources/redbar.gif" width="4" height="10" title="7" alt="7"/></td><td class="ctr2" id="c32">0%</td><td class="bar" id="d32"/><td class="ctr2" id="e32">n/a</td><td class="ctr1" id="f32">1</td><td class="ctr2" id="g32">1</td><td class="ctr1" id="h32">1</td><td class="ctr2" id="i32">1</td><td class="ctr1" id="j32">1</td><td class="ctr2" id="k32">1</td></tr><tr><td id="a36"><a href="MatrixOperations.java.html#L103" class="el_method">sub(double)</a></td><td class="bar" id="b33"><img src="../jacoco-resources/redbar.gif" width="2" height="10" title="5" alt="5"/></td><td class="ctr2" id="c33">0%</td><td class="bar" id="d33"/><td class="ctr2" id="e33">n/a</td><td class="ctr1" id="f33">1</td><td class="ctr2" id="g33">1</td><td class="ctr1" id="h33">1</td><td class="ctr2" id="i33">1</td><td class="ctr1" id="j33">1</td><td class="ctr2" id="k33">1</td></tr><tr><td id="a13"><a href="MatrixOperations.java.html#L302" class="el_method">fip(Matrix)</a></td><td class="bar" id="b34"><img src="../jacoco-resources/redbar.gif" width="2" height="10" title="5" alt="5"/></td><td class="ctr2" id="c34">0%</td><td class="bar" id="d34"/><td class="ctr2" id="e34">n/a</td><td class="ctr1" id="f34">1</td><td class="ctr2" id="g34">1</td><td class="ctr1" id="h34">1</td><td class="ctr2" id="i34">1</td><td class="ctr1" id="j34">1</td><td class="ctr2" id="k34">1</td></tr><tr><td id="a33"><a href="MatrixOperations.java.html#L595" class="el_method">stack(Matrix)</a></td><td class="bar" id="b35"><img src="../jacoco-resources/redbar.gif" width="2" height="10" title="5" alt="5"/></td><td class="ctr2" id="c35">0%</td><td class="bar" id="d35"/><td class="ctr2" id="e35">n/a</td><td class="ctr1" id="f35">1</td><td class="ctr2" id="g35">1</td><td class="ctr1" id="h35">1</td><td class="ctr2" id="i35">1</td><td class="ctr1" id="j35">1</td><td class="ctr2" id="k35">1</td></tr><tr><td id="a3"><a href="MatrixOperations.java.html#L665" class="el_method">augment(Matrix)</a></td><td class="bar" id="b36"><img src="../jacoco-resources/redbar.gif" width="2" height="10" title="5" alt="5"/></td><td class="ctr2" id="c36">0%</td><td class="bar" id="d36"/><td class="ctr2" id="e36">n/a</td><td class="ctr1" id="f36">1</td><td class="ctr2" id="g36">1</td><td class="ctr1" id="h36">1</td><td class="ctr2" id="i36">1</td><td class="ctr1" id="j36">1</td><td class="ctr2" id="k36">1</td></tr><tr><td id="a4"><a href="MatrixOperations.java.html#L476" class="el_method">conjT()</a></td><td class="bar" id="b37"><img src="../jacoco-resources/redbar.gif" width="2" height="10" title="4" alt="4"/></td><td class="ctr2" id="c37">0%</td><td class="bar" id="d37"/><td class="ctr2" id="e37">n/a</td><td class="ctr1" id="f37">1</td><td class="ctr2" id="g37">1</td><td class="ctr1" id="h37">1</td><td class="ctr2" id="i37">1</td><td class="ctr1" id="j37">1</td><td class="ctr2" id="k37">1</td></tr><tr><td id="a15"><a href="MatrixOperations.java.html#L488" class="el_method">hermAdjoint()</a></td><td class="bar" id="b38"><img src="../jacoco-resources/redbar.gif" width="2" height="10" title="4" alt="4"/></td><td class="ctr2" id="c38">0%</td><td class="bar" id="d38"/><td class="ctr2" id="e38">n/a</td><td class="ctr1" id="f38">1</td><td class="ctr2" id="g38">1</td><td class="ctr1" id="h38">1</td><td class="ctr2" id="i38">1</td><td class="ctr1" id="j38">1</td><td class="ctr2" id="k38">1</td></tr><tr><td id="a14"><a href="MatrixOperations.java.html#L500" class="el_method">H()</a></td><td class="bar" id="b39"><img src="../jacoco-resources/redbar.gif" width="2" height="10" title="4" alt="4"/></td><td class="ctr2" id="c39">0%</td><td class="bar" id="d39"/><td class="ctr2" id="e39">n/a</td><td class="ctr1" id="f39">1</td><td class="ctr2" id="g39">1</td><td class="ctr1" id="h39">1</td><td class="ctr2" id="i39">1</td><td class="ctr1" id="j39">1</td><td class="ctr2" id="k39">1</td></tr><tr><td id="a42"><a href="MatrixOperations.java.html#L417" class="el_method">transpose()</a></td><td class="bar" id="b40"><img src="../jacoco-resources/redbar.gif" width="1" height="10" title="3" alt="3"/></td><td class="ctr2" id="c40">0%</td><td class="bar" id="d40"/><td class="ctr2" id="e40">n/a</td><td class="ctr1" id="f40">1</td><td class="ctr2" id="g40">1</td><td class="ctr1" id="h40">1</td><td class="ctr2" id="i40">1</td><td class="ctr1" id="j40">1</td><td class="ctr2" id="k40">1</td></tr><tr><td id="a40"><a href="MatrixOperations.java.html#L951" class="el_method">tr()</a></td><td class="bar" id="b41"><img src="../jacoco-resources/redbar.gif" width="1" height="10" title="3" alt="3"/></td><td class="ctr2" id="c41">0%</td><td class="bar" id="d41"/><td class="ctr2" id="e41">n/a</td><td class="ctr1" id="f41">1</td><td class="ctr2" id="g41">1</td><td class="ctr1" id="h41">1</td><td class="ctr2" id="i41">1</td><td class="ctr1" id="j41">1</td><td class="ctr2" id="k41">1</td></tr><tr><td id="a16"><a href="MatrixOperations.java.html#L1038" class="el_method">inv()</a></td><td class="bar" id="b42"><img src="../jacoco-resources/redbar.gif" width="1" height="10" title="3" alt="3"/></td><td class="ctr2" id="c42">0%</td><td class="bar" id="d42"/><td class="ctr2" id="e42">n/a</td><td class="ctr1" id="f42">1</td><td class="ctr2" id="g42">1</td><td class="ctr1" id="h42">1</td><td class="ctr2" id="i42">1</td><td class="ctr1" id="j42">1</td><td class="ctr2" id="k42">1</td></tr></tbody></table><div class="footer"><span class="right">Created with <a href="http://www.jacoco.org/jacoco">JaCoCo</a> 0.8.7.202105040129</span></div></body></html>
\ No newline at end of file
+<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/><link rel="stylesheet" href="../jacoco-resources/report.css" type="text/css"/><link rel="shortcut icon" href="../jacoco-resources/report.gif" type="image/gif"/><title>MatrixOperations</title><script type="text/javascript" src="../jacoco-resources/sort.js"></script></head><body onload="initialSort(['breadcrumb'])"><div class="breadcrumb" id="breadcrumb"><span class="info"><a href="../jacoco-sessions.html" class="el_session">Sessions</a></span><a href="../index.html" class="el_report">Java-Linear-Algebra</a> &gt; <a href="index.html" class="el_package">linalg</a> &gt; <span class="el_class">MatrixOperations</span></div><h1>MatrixOperations</h1><table class="coverage" cellspacing="0" id="coveragetable"><thead><tr><td class="sortable" id="a" onclick="toggleSort(this)">Element</td><td class="down sortable bar" id="b" onclick="toggleSort(this)">Missed Instructions</td><td class="sortable ctr2" id="c" onclick="toggleSort(this)">Cov.</td><td class="sortable bar" id="d" onclick="toggleSort(this)">Missed Branches</td><td class="sortable ctr2" id="e" onclick="toggleSort(this)">Cov.</td><td class="sortable ctr1" id="f" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="g" onclick="toggleSort(this)">Cxty</td><td class="sortable ctr1" id="h" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="i" onclick="toggleSort(this)">Lines</td><td class="sortable ctr1" id="j" onclick="toggleSort(this)">Missed</td><td class="sortable ctr2" id="k" onclick="toggleSort(this)">Methods</td></tr></thead><tfoot><tr><td>Total</td><td class="bar">2,504 of 2,504</td><td class="ctr2">0%</td><td class="bar">218 of 218</td><td class="ctr2">0%</td><td class="ctr1">155</td><td class="ctr2">155</td><td class="ctr1">332</td><td class="ctr2">332</td><td class="ctr1">46</td><td class="ctr2">46</td></tr></tfoot><tbody><tr><td id="a34"><a href="MatrixOperations.java.html#L674" class="el_method">stack(Matrix, int)</a></td><td class="bar" id="b0"><img src="../jacoco-resources/redbar.gif" width="120" height="10" title="210" alt="210"/></td><td class="ctr2" id="c0">0%</td><td class="bar" id="d1"><img src="../jacoco-resources/redbar.gif" width="109" height="10" title="20" alt="20"/></td><td class="ctr2" id="e0">0%</td><td class="ctr1" id="f1">11</td><td class="ctr2" id="g1">11</td><td class="ctr1" id="h1">22</td><td class="ctr2" id="i1">22</td><td class="ctr1" id="j0">1</td><td class="ctr2" id="k0">1</td></tr><tr><td id="a25"><a href="MatrixOperations.java.html#L842" class="el_method">rref()</a></td><td class="bar" id="b1"><img src="../jacoco-resources/redbar.gif" width="103" height="10" title="181" alt="181"/></td><td class="ctr2" id="c1">0%</td><td class="bar" id="d0"><img src="../jacoco-resources/redbar.gif" width="120" height="10" title="22" alt="22"/></td><td class="ctr2" id="e1">0%</td><td class="ctr1" id="f0">12</td><td class="ctr2" id="g0">12</td><td class="ctr1" id="h0">30</td><td class="ctr2" id="i0">30</td><td class="ctr1" id="j1">1</td><td class="ctr2" id="k1">1</td></tr><tr><td id="a10"><a href="MatrixOperations.java.html#L252" class="el_method">elemDiv(Matrix)</a></td><td class="bar" id="b2"><img src="../jacoco-resources/redbar.gif" width="96" height="10" title="168" alt="168"/></td><td class="ctr2" id="c2">0%</td><td class="bar" id="d14"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e2">0%</td><td class="ctr1" id="f14">3</td><td class="ctr2" id="g14">3</td><td class="ctr1" id="h14">7</td><td class="ctr2" id="i14">7</td><td class="ctr1" id="j2">1</td><td class="ctr2" id="k2">1</td></tr><tr><td id="a2"><a href="MatrixOperations.java.html#L21" class="el_method">add(Matrix)</a></td><td class="bar" id="b3"><img src="../jacoco-resources/redbar.gif" width="80" height="10" title="141" alt="141"/></td><td class="ctr2" id="c3">0%</td><td class="bar" id="d2"><img src="../jacoco-resources/redbar.gif" width="87" height="10" title="16" alt="16"/></td><td class="ctr2" id="e3">0%</td><td class="ctr1" id="f2">9</td><td class="ctr2" id="g2">9</td><td class="ctr1" id="h7">14</td><td class="ctr2" id="i7">14</td><td class="ctr1" id="j3">1</td><td class="ctr2" id="k3">1</td></tr><tr><td id="a20"><a href="MatrixOperations.java.html#L166" class="el_method">mult(Vector)</a></td><td class="bar" id="b4"><img src="../jacoco-resources/redbar.gif" width="69" height="10" title="121" alt="121"/></td><td class="ctr2" id="c4">0%</td><td class="bar" id="d9"><img src="../jacoco-resources/redbar.gif" width="32" height="10" title="6" alt="6"/></td><td class="ctr2" id="e4">0%</td><td class="ctr1" id="f9">4</td><td class="ctr2" id="g9">4</td><td class="ctr1" id="h8">10</td><td class="ctr2" id="i8">10</td><td class="ctr1" id="j4">1</td><td class="ctr2" id="k4">1</td></tr><tr><td id="a24"><a href="MatrixOperations.java.html#L751" class="el_method">ref()</a></td><td class="bar" id="b5"><img src="../jacoco-resources/redbar.gif" width="65" height="10" title="114" alt="114"/></td><td class="ctr2" id="c5">0%</td><td class="bar" id="d4"><img src="../jacoco-resources/redbar.gif" width="65" height="10" title="12" alt="12"/></td><td class="ctr2" id="e5">0%</td><td class="ctr1" id="f4">7</td><td class="ctr2" id="g4">7</td><td class="ctr1" id="h2">17</td><td class="ctr2" id="i2">17</td><td class="ctr1" id="j5">1</td><td class="ctr2" id="k5">1</td></tr><tr><td id="a27"><a href="MatrixOperations.java.html#L930" class="el_method">rrefNoPivot()</a></td><td class="bar" id="b6"><img src="../jacoco-resources/redbar.gif" width="61" height="10" title="108" alt="108"/></td><td class="ctr2" id="c6">0%</td><td class="bar" id="d3"><img src="../jacoco-resources/redbar.gif" width="76" height="10" title="14" alt="14"/></td><td class="ctr2" id="e6">0%</td><td class="ctr1" id="f3">8</td><td class="ctr2" id="g3">8</td><td class="ctr1" id="h3">17</td><td class="ctr2" id="i3">17</td><td class="ctr1" id="j6">1</td><td class="ctr2" id="k6">1</td></tr><tr><td id="a11"><a href="MatrixOperations.java.html#L196" class="el_method">elemMult(Matrix)</a></td><td class="bar" id="b7"><img src="../jacoco-resources/redbar.gif" width="59" height="10" title="104" alt="104"/></td><td class="ctr2" id="c7">0%</td><td class="bar" id="d15"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e7">0%</td><td class="ctr1" id="f15">3</td><td class="ctr2" id="g15">3</td><td class="ctr1" id="h15">7</td><td class="ctr2" id="i15">7</td><td class="ctr1" id="j7">1</td><td class="ctr2" id="k7">1</td></tr><tr><td id="a8"><a href="MatrixOperations.java.html#L575" class="el_method">detRec(Matrix)</a></td><td class="bar" id="b8"><img src="../jacoco-resources/redbar.gif" width="58" height="10" title="102" alt="102"/></td><td class="ctr2" id="c8">0%</td><td class="bar" id="d6"><img src="../jacoco-resources/redbar.gif" width="54" height="10" title="10" alt="10"/></td><td class="ctr2" id="e8">0%</td><td class="ctr1" id="f6">6</td><td class="ctr2" id="g6">6</td><td class="ctr1" id="h5">16</td><td class="ctr2" id="i5">16</td><td class="ctr1" id="j8">1</td><td class="ctr2" id="k8">1</td></tr><tr><td id="a38"><a href="MatrixOperations.java.html#L342" class="el_method">sudoDirectSum(Matrix[])</a></td><td class="bar" id="b9"><img src="../jacoco-resources/redbar.gif" width="56" height="10" title="99" alt="99"/></td><td class="ctr2" id="c9">0%</td><td class="bar" id="d10"><img src="../jacoco-resources/redbar.gif" width="32" height="10" title="6" alt="6"/></td><td class="ctr2" id="e9">0%</td><td class="ctr1" id="f10">4</td><td class="ctr2" id="g10">4</td><td class="ctr1" id="h4">17</td><td class="ctr2" id="i4">17</td><td class="ctr1" id="j9">1</td><td class="ctr2" id="k9">1</td></tr><tr><td id="a9"><a href="MatrixOperations.java.html#L313" class="el_method">directSum(Matrix[])</a></td><td class="bar" id="b10"><img src="../jacoco-resources/redbar.gif" width="52" height="10" title="91" alt="91"/></td><td class="ctr2" id="c10">0%</td><td class="bar" id="d11"><img src="../jacoco-resources/redbar.gif" width="32" height="10" title="6" alt="6"/></td><td class="ctr2" id="e10">0%</td><td class="ctr1" id="f11">4</td><td class="ctr2" id="g11">4</td><td class="ctr1" id="h6">16</td><td class="ctr2" id="i6">16</td><td class="ctr1" id="j10">1</td><td class="ctr2" id="k10">1</td></tr><tr><td id="a30"><a href="MatrixOperations.java.html#L231" class="el_method">scalMult(CNumber)</a></td><td class="bar" id="b11"><img src="../jacoco-resources/redbar.gif" width="45" height="10" title="80" alt="80"/></td><td class="ctr2" id="c11">0%</td><td class="bar" id="d16"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e11">0%</td><td class="ctr1" id="f16">3</td><td class="ctr2" id="g16">3</td><td class="ctr1" id="h20">6</td><td class="ctr2" id="i20">6</td><td class="ctr1" id="j11">1</td><td class="ctr2" id="k11">1</td></tr><tr><td id="a37"><a href="MatrixOperations.java.html#L82" class="el_method">sub(Matrix)</a></td><td class="bar" id="b12"><img src="../jacoco-resources/redbar.gif" width="41" height="10" title="72" alt="72"/></td><td class="ctr2" id="c12">0%</td><td class="bar" id="d17"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e12">0%</td><td class="ctr1" id="f17">3</td><td class="ctr2" id="g17">3</td><td class="ctr1" id="h16">7</td><td class="ctr2" id="i16">7</td><td class="ctr1" id="j12">1</td><td class="ctr2" id="k12">1</td></tr><tr><td id="a41"><a href="MatrixOperations.java.html#L413" class="el_method">sumToEachCol(Matrix)</a></td><td class="bar" id="b13"><img src="../jacoco-resources/redbar.gif" width="41" height="10" title="72" alt="72"/></td><td class="ctr2" id="c13">0%</td><td class="bar" id="d8"><img src="../jacoco-resources/redbar.gif" width="43" height="10" title="8" alt="8"/></td><td class="ctr2" id="e13">0%</td><td class="ctr1" id="f8">5</td><td class="ctr2" id="g8">5</td><td class="ctr1" id="h9">10</td><td class="ctr2" id="i9">10</td><td class="ctr1" id="j13">1</td><td class="ctr2" id="k13">1</td></tr><tr><td id="a42"><a href="MatrixOperations.java.html#L491" class="el_method">T()</a></td><td class="bar" id="b14"><img src="../jacoco-resources/redbar.gif" width="39" height="10" title="69" alt="69"/></td><td class="ctr2" id="c14">0%</td><td class="bar" id="d5"><img src="../jacoco-resources/redbar.gif" width="65" height="10" title="12" alt="12"/></td><td class="ctr2" id="e14">0%</td><td class="ctr1" id="f5">7</td><td class="ctr2" id="g5">7</td><td class="ctr1" id="h13">9</td><td class="ctr2" id="i13">9</td><td class="ctr1" id="j14">1</td><td class="ctr2" id="k14">1</td></tr><tr><td id="a6"><a href="MatrixOperations.java.html#L631" class="el_method">det()</a></td><td class="bar" id="b15"><img src="../jacoco-resources/redbar.gif" width="34" height="10" title="60" alt="60"/></td><td class="ctr2" id="c15">0%</td><td class="bar" id="d12"><img src="../jacoco-resources/redbar.gif" width="32" height="10" title="6" alt="6"/></td><td class="ctr2" id="e15">0%</td><td class="ctr1" id="f12">4</td><td class="ctr2" id="g12">4</td><td class="ctr1" id="h10">10</td><td class="ctr2" id="i10">10</td><td class="ctr1" id="j15">1</td><td class="ctr2" id="k15">1</td></tr><tr><td id="a17"><a href="MatrixOperations.java.html#L1064" class="el_method">inverse()</a></td><td class="bar" id="b16"><img src="../jacoco-resources/redbar.gif" width="33" height="10" title="59" alt="59"/></td><td class="ctr2" id="c16">0%</td><td class="bar" id="d13"><img src="../jacoco-resources/redbar.gif" width="32" height="10" title="6" alt="6"/></td><td class="ctr2" id="e16">0%</td><td class="ctr1" id="f13">4</td><td class="ctr2" id="g13">4</td><td class="ctr1" id="h11">10</td><td class="ctr2" id="i11">10</td><td class="ctr1" id="j16">1</td><td class="ctr2" id="k16">1</td></tr><tr><td id="a1"><a href="MatrixOperations.java.html#L62" class="el_method">add(double)</a></td><td class="bar" id="b17"><img src="../jacoco-resources/redbar.gif" width="30" height="10" title="54" alt="54"/></td><td class="ctr2" id="c17">0%</td><td class="bar" id="d18"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e17">0%</td><td class="ctr1" id="f18">3</td><td class="ctr2" id="g18">3</td><td class="ctr1" id="h21">6</td><td class="ctr2" id="i21">6</td><td class="ctr1" id="j17">1</td><td class="ctr2" id="k17">1</td></tr><tr><td id="a19"><a href="MatrixOperations.java.html#L137" class="el_method">mult(Matrix)</a></td><td class="bar" id="b18"><img src="../jacoco-resources/redbar.gif" width="29" height="10" title="51" alt="51"/></td><td class="ctr2" id="c18">0%</td><td class="bar" id="d7"><img src="../jacoco-resources/redbar.gif" width="54" height="10" title="10" alt="10"/></td><td class="ctr2" id="e18">0%</td><td class="ctr1" id="f7">6</td><td class="ctr2" id="g7">6</td><td class="ctr1" id="h12">10</td><td class="ctr2" id="i12">10</td><td class="ctr1" id="j18">1</td><td class="ctr2" id="k18">1</td></tr><tr><td id="a39"><a href="MatrixOperations.java.html#L375" class="el_method">sumCols()</a></td><td class="bar" id="b19"><img src="../jacoco-resources/redbar.gif" width="26" height="10" title="47" alt="47"/></td><td class="ctr2" id="c19">0%</td><td class="bar" id="d19"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e19">0%</td><td class="ctr1" id="f19">3</td><td class="ctr2" id="g19">3</td><td class="ctr1" id="h22">6</td><td class="ctr2" id="i22">6</td><td class="ctr1" id="j19">1</td><td class="ctr2" id="k19">1</td></tr><tr><td id="a40"><a href="MatrixOperations.java.html#L393" class="el_method">sumRows()</a></td><td class="bar" id="b20"><img src="../jacoco-resources/redbar.gif" width="26" height="10" title="47" alt="47"/></td><td class="ctr2" id="c20">0%</td><td class="bar" id="d20"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e20">0%</td><td class="ctr1" id="f20">3</td><td class="ctr2" id="g20">3</td><td class="ctr1" id="h23">6</td><td class="ctr2" id="i23">6</td><td class="ctr1" id="j20">1</td><td class="ctr2" id="k20">1</td></tr><tr><td id="a7"><a href="MatrixOperations.java.html#L610" class="el_method">detQR(Matrix)</a></td><td class="bar" id="b21"><img src="../jacoco-resources/redbar.gif" width="26" height="10" title="46" alt="46"/></td><td class="ctr2" id="c21">0%</td><td class="bar" id="d29"><img src="../jacoco-resources/redbar.gif" width="10" height="10" title="2" alt="2"/></td><td class="ctr2" id="e21">0%</td><td class="ctr1" id="f29">2</td><td class="ctr2" id="g29">2</td><td class="ctr1" id="h24">6</td><td class="ctr2" id="i24">6</td><td class="ctr1" id="j21">1</td><td class="ctr2" id="k21">1</td></tr><tr><td id="a35"><a href="MatrixOperations.java.html#L113" class="el_method">sub(CNumber)</a></td><td class="bar" id="b22"><img src="../jacoco-resources/redbar.gif" width="24" height="10" title="43" alt="43"/></td><td class="ctr2" id="c22">0%</td><td class="bar" id="d21"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e22">0%</td><td class="ctr1" id="f21">3</td><td class="ctr2" id="g21">3</td><td class="ctr1" id="h25">6</td><td class="ctr2" id="i25">6</td><td class="ctr1" id="j22">1</td><td class="ctr2" id="k22">1</td></tr><tr><td id="a32"><a href="MatrixOperations.java.html#L440" class="el_method">sqrt()</a></td><td class="bar" id="b23"><img src="../jacoco-resources/redbar.gif" width="24" height="10" title="42" alt="42"/></td><td class="ctr2" id="c23">0%</td><td class="bar" id="d22"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e23">0%</td><td class="ctr1" id="f22">3</td><td class="ctr2" id="g22">3</td><td class="ctr1" id="h26">6</td><td class="ctr2" id="i26">6</td><td class="ctr1" id="j23">1</td><td class="ctr2" id="k23">1</td></tr><tr><td id="a0"><a href="MatrixOperations.java.html#L461" class="el_method">abs()</a></td><td class="bar" id="b24"><img src="../jacoco-resources/redbar.gif" width="24" height="10" title="42" alt="42"/></td><td class="ctr2" id="c24">0%</td><td class="bar" id="d23"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e24">0%</td><td class="ctr1" id="f23">3</td><td class="ctr2" id="g23">3</td><td class="ctr1" id="h27">6</td><td class="ctr2" id="i27">6</td><td class="ctr1" id="j24">1</td><td class="ctr2" id="k24">1</td></tr><tr><td id="a5"><a href="MatrixOperations.java.html#L518" class="el_method">conjugate()</a></td><td class="bar" id="b25"><img src="../jacoco-resources/redbar.gif" width="24" height="10" title="42" alt="42"/></td><td class="ctr2" id="c25">0%</td><td class="bar" id="d24"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e25">0%</td><td class="ctr1" id="f24">3</td><td class="ctr2" id="g24">3</td><td class="ctr1" id="h28">6</td><td class="ctr2" id="i28">6</td><td class="ctr1" id="j25">1</td><td class="ctr2" id="k25">1</td></tr><tr><td id="a44"><a href="MatrixOperations.java.html#L989" class="el_method">trace()</a></td><td class="bar" id="b26"><img src="../jacoco-resources/redbar.gif" width="22" height="10" title="39" alt="39"/></td><td class="ctr2" id="c26">0%</td><td class="bar" id="d25"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e26">0%</td><td class="ctr1" id="f25">3</td><td class="ctr2" id="g25">3</td><td class="ctr1" id="h17">7</td><td class="ctr2" id="i17">7</td><td class="ctr1" id="j26">1</td><td class="ctr2" id="k26">1</td></tr><tr><td id="a18"><a href="MatrixOperations.java.html#L1120" class="el_method">inverseTriU(Matrix)</a></td><td class="bar" id="b27"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="38" alt="38"/></td><td class="ctr2" id="c27">0%</td><td class="bar" id="d26"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e27">0%</td><td class="ctr1" id="f26">3</td><td class="ctr2" id="g26">3</td><td class="ctr1" id="h18">7</td><td class="ctr2" id="i18">7</td><td class="ctr1" id="j27">1</td><td class="ctr2" id="k27">1</td></tr><tr><td id="a23"><a href="MatrixOperations.java.html#L1142" class="el_method">recep()</a></td><td class="bar" id="b28"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="38" alt="38"/></td><td class="ctr2" id="c28">0%</td><td class="bar" id="d27"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e28">0%</td><td class="ctr1" id="f27">3</td><td class="ctr2" id="g27">3</td><td class="ctr1" id="h29">5</td><td class="ctr2" id="i29">5</td><td class="ctr1" id="j28">1</td><td class="ctr2" id="k28">1</td></tr><tr><td id="a22"><a href="MatrixOperations.java.html#L1028" class="el_method">rank()</a></td><td class="bar" id="b29"><img src="../jacoco-resources/redbar.gif" width="14" height="10" title="26" alt="26"/></td><td class="ctr2" id="c29">0%</td><td class="bar" id="d28"><img src="../jacoco-resources/redbar.gif" width="21" height="10" title="4" alt="4"/></td><td class="ctr2" id="e29">0%</td><td class="ctr1" id="f28">3</td><td class="ctr2" id="g28">3</td><td class="ctr1" id="h19">7</td><td class="ctr2" id="i19">7</td><td class="ctr1" id="j29">1</td><td class="ctr2" id="k29">1</td></tr><tr><td id="a12"><a href="MatrixOperations.java.html#L972" class="el_method">erref()</a></td><td class="bar" id="b30"><img src="../jacoco-resources/redbar.gif" width="8" height="10" title="14" alt="14"/></td><td class="ctr2" id="c30">0%</td><td class="bar" id="d31"/><td class="ctr2" id="e31">n/a</td><td class="ctr1" id="f31">1</td><td class="ctr2" id="g31">1</td><td class="ctr1" id="h30">4</td><td class="ctr2" id="i30">4</td><td class="ctr1" id="j30">1</td><td class="ctr2" id="k30">1</td></tr><tr><td id="a29"><a href="MatrixOperations.java.html#L278" class="el_method">scalDiv(double)</a></td><td class="bar" id="b31"><img src="../jacoco-resources/redbar.gif" width="6" height="10" title="11" alt="11"/></td><td class="ctr2" id="c31">0%</td><td class="bar" id="d32"/><td class="ctr2" id="e32">n/a</td><td class="ctr1" id="f32">1</td><td class="ctr2" id="g32">1</td><td class="ctr1" id="h31">2</td><td class="ctr2" id="i31">2</td><td class="ctr1" id="j31">1</td><td class="ctr2" id="k31">1</td></tr><tr><td id="a21"><a href="MatrixOperations.java.html#L1052" class="el_method">nullity()</a></td><td class="bar" id="b32"><img src="../jacoco-resources/redbar.gif" width="5" height="10" title="9" alt="9"/></td><td class="ctr2" id="c32">0%</td><td class="bar" id="d33"/><td class="ctr2" id="e33">n/a</td><td class="ctr1" id="f33">1</td><td class="ctr2" id="g33">1</td><td class="ctr1" id="h32">2</td><td class="ctr2" id="i32">2</td><td class="ctr1" id="j32">1</td><td class="ctr2" id="k32">1</td></tr><tr><td id="a28"><a href="MatrixOperations.java.html#L290" class="el_method">scalDiv(CNumber)</a></td><td class="bar" id="b33"><img src="../jacoco-resources/redbar.gif" width="4" height="10" title="8" alt="8"/></td><td class="ctr2" id="c33">0%</td><td class="bar" id="d34"/><td class="ctr2" id="e34">n/a</td><td class="ctr1" id="f34">1</td><td class="ctr2" id="g34">1</td><td class="ctr1" id="h33">2</td><td class="ctr2" id="i33">2</td><td class="ctr1" id="j33">1</td><td class="ctr2" id="k33">1</td></tr><tr><td id="a26"><a href="MatrixOperations.java.html#L816" class="el_method">rref(boolean)</a></td><td class="bar" id="b34"><img src="../jacoco-resources/redbar.gif" width="4" height="10" title="8" alt="8"/></td><td class="ctr2" id="c34">0%</td><td class="bar" id="d30"><img src="../jacoco-resources/redbar.gif" width="10" height="10" title="2" alt="2"/></td><td class="ctr2" id="e30">0%</td><td class="ctr1" id="f30">2</td><td class="ctr2" id="g30">2</td><td class="ctr1" id="h34">2</td><td class="ctr2" id="i34">2</td><td class="ctr1" id="j34">1</td><td class="ctr2" id="k34">1</td></tr><tr><td id="a31"><a href="MatrixOperations.java.html#L220" class="el_method">scalMult(double)</a></td><td class="bar" id="b35"><img src="../jacoco-resources/redbar.gif" width="4" height="10" title="7" alt="7"/></td><td class="ctr2" id="c35">0%</td><td class="bar" id="d35"/><td class="ctr2" id="e35">n/a</td><td class="ctr1" id="f35">1</td><td class="ctr2" id="g35">1</td><td class="ctr1" id="h35">1</td><td class="ctr2" id="i35">1</td><td class="ctr1" id="j35">1</td><td class="ctr2" id="k35">1</td></tr><tr><td id="a36"><a href="MatrixOperations.java.html#L103" class="el_method">sub(double)</a></td><td class="bar" id="b36"><img src="../jacoco-resources/redbar.gif" width="2" height="10" title="5" alt="5"/></td><td class="ctr2" id="c36">0%</td><td class="bar" id="d36"/><td class="ctr2" id="e36">n/a</td><td class="ctr1" id="f36">1</td><td class="ctr2" id="g36">1</td><td class="ctr1" id="h36">1</td><td class="ctr2" id="i36">1</td><td class="ctr1" id="j36">1</td><td class="ctr2" id="k36">1</td></tr><tr><td id="a13"><a href="MatrixOperations.java.html#L302" class="el_method">fip(Matrix)</a></td><td class="bar" id="b37"><img src="../jacoco-resources/redbar.gif" width="2" height="10" title="5" alt="5"/></td><td class="ctr2" id="c37">0%</td><td class="bar" id="d37"/><td class="ctr2" id="e37">n/a</td><td class="ctr1" id="f37">1</td><td class="ctr2" id="g37">1</td><td class="ctr1" id="h37">1</td><td class="ctr2" id="i37">1</td><td class="ctr1" id="j37">1</td><td class="ctr2" id="k37">1</td></tr><tr><td id="a33"><a href="MatrixOperations.java.html#L658" class="el_method">stack(Matrix)</a></td><td class="bar" id="b38"><img src="../jacoco-resources/redbar.gif" width="2" height="10" title="5" alt="5"/></td><td class="ctr2" id="c38">0%</td><td class="bar" id="d38"/><td class="ctr2" id="e38">n/a</td><td class="ctr1" id="f38">1</td><td class="ctr2" id="g38">1</td><td class="ctr1" id="h38">1</td><td class="ctr2" id="i38">1</td><td class="ctr1" id="j38">1</td><td class="ctr2" id="k38">1</td></tr><tr><td id="a3"><a href="MatrixOperations.java.html#L728" class="el_method">augment(Matrix)</a></td><td class="bar" id="b39"><img src="../jacoco-resources/redbar.gif" width="2" height="10" title="5" alt="5"/></td><td class="ctr2" id="c39">0%</td><td class="bar" id="d39"/><td class="ctr2" id="e39">n/a</td><td class="ctr1" id="f39">1</td><td class="ctr2" id="g39">1</td><td class="ctr1" id="h39">1</td><td class="ctr2" id="i39">1</td><td class="ctr1" id="j39">1</td><td class="ctr2" id="k39">1</td></tr><tr><td id="a4"><a href="MatrixOperations.java.html#L539" class="el_method">conjT()</a></td><td class="bar" id="b40"><img src="../jacoco-resources/redbar.gif" width="2" height="10" title="4" alt="4"/></td><td class="ctr2" id="c40">0%</td><td class="bar" id="d40"/><td class="ctr2" id="e40">n/a</td><td class="ctr1" id="f40">1</td><td class="ctr2" id="g40">1</td><td class="ctr1" id="h40">1</td><td class="ctr2" id="i40">1</td><td class="ctr1" id="j40">1</td><td class="ctr2" id="k40">1</td></tr><tr><td id="a15"><a href="MatrixOperations.java.html#L551" class="el_method">hermAdjoint()</a></td><td class="bar" id="b41"><img src="../jacoco-resources/redbar.gif" width="2" height="10" title="4" alt="4"/></td><td class="ctr2" id="c41">0%</td><td class="bar" id="d41"/><td class="ctr2" id="e41">n/a</td><td class="ctr1" id="f41">1</td><td class="ctr2" id="g41">1</td><td class="ctr1" id="h41">1</td><td class="ctr2" id="i41">1</td><td class="ctr1" id="j41">1</td><td class="ctr2" id="k41">1</td></tr><tr><td id="a14"><a href="MatrixOperations.java.html#L563" class="el_method">H()</a></td><td class="bar" id="b42"><img src="../jacoco-resources/redbar.gif" width="2" height="10" title="4" alt="4"/></td><td class="ctr2" id="c42">0%</td><td class="bar" id="d42"/><td class="ctr2" id="e42">n/a</td><td class="ctr1" id="f42">1</td><td class="ctr2" id="g42">1</td><td class="ctr1" id="h42">1</td><td class="ctr2" id="i42">1</td><td class="ctr1" id="j42">1</td><td class="ctr2" id="k42">1</td></tr><tr><td id="a45"><a href="MatrixOperations.java.html#L480" class="el_method">transpose()</a></td><td class="bar" id="b43"><img src="../jacoco-resources/redbar.gif" width="1" height="10" title="3" alt="3"/></td><td class="ctr2" id="c43">0%</td><td class="bar" id="d43"/><td class="ctr2" id="e43">n/a</td><td class="ctr1" id="f43">1</td><td class="ctr2" id="g43">1</td><td class="ctr1" id="h43">1</td><td class="ctr2" id="i43">1</td><td class="ctr1" id="j43">1</td><td class="ctr2" id="k43">1</td></tr><tr><td id="a43"><a href="MatrixOperations.java.html#L1014" class="el_method">tr()</a></td><td class="bar" id="b44"><img src="../jacoco-resources/redbar.gif" width="1" height="10" title="3" alt="3"/></td><td class="ctr2" id="c44">0%</td><td class="bar" id="d44"/><td class="ctr2" id="e44">n/a</td><td class="ctr1" id="f44">1</td><td class="ctr2" id="g44">1</td><td class="ctr1" id="h44">1</td><td class="ctr2" id="i44">1</td><td class="ctr1" id="j44">1</td><td class="ctr2" id="k44">1</td></tr><tr><td id="a16"><a href="MatrixOperations.java.html#L1101" class="el_method">inv()</a></td><td class="bar" id="b45"><img src="../jacoco-resources/redbar.gif" width="1" height="10" title="3" alt="3"/></td><td class="ctr2" id="c45">0%</td><td class="bar" id="d45"/><td class="ctr2" id="e45">n/a</td><td class="ctr1" id="f45">1</td><td class="ctr2" id="g45">1</td><td class="ctr1" id="h45">1</td><td class="ctr2" id="i45">1</td><td class="ctr1" id="j45">1</td><td class="ctr2" id="k45">1</td></tr></tbody></table><div class="footer"><span class="right">Created with <a href="http://www.jacoco.org/jacoco">JaCoCo</a> 0.8.7.202105040129</span></div></body></html>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ArtifactsWorkspaceSettings\">\r\n    <artifacts-to-build>\r\n      <artifact name=\"Java-Linear-Algebra-v0.0.1-beta:jar\" />\r\n    </artifacts-to-build>\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"7072a60c-bdbe-44dc-912a-0b1b7f9f3af3\" name=\"Changes\" comment=\"Added Concurrency class for basic constants and methods to do with concurrency.\">\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/linalg/complex_number/CNumber.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/linalg/complex_number/CNumber.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/Java-Linear-Algebra-v0.0.1-beta.jar\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/Java-Linear-Algebra-v0.0.1-beta.jar\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/linalg/complex_number/CNumber.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/linalg/complex_number/CNumber.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/jacoco.exec\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/jacoco.exec\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/site/jacoco/index.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/site/jacoco/index.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/site/jacoco/jacoco-sessions.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/site/jacoco/jacoco-sessions.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/site/jacoco/jacoco.csv\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/site/jacoco/jacoco.csv\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/site/jacoco/jacoco.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/site/jacoco/jacoco.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/site/jacoco/linalg.complex_number/CNumber.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/site/jacoco/linalg.complex_number/CNumber.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/site/jacoco/linalg.complex_number/CNumber.java.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/site/jacoco/linalg.complex_number/CNumber.java.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/site/jacoco/linalg.complex_number/index.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/site/jacoco/linalg.complex_number/index.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/site/jacoco/linalg.complex_number/index.source.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/site/jacoco/linalg.complex_number/index.source.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/surefire-reports/TEST-linalg.matrix.MatrixConstructorTest.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/surefire-reports/TEST-linalg.matrix.MatrixConstructorTest.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/surefire-reports/linalg.matrix.MatrixConstructorTest.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/surefire-reports/linalg.matrix.MatrixConstructorTest.txt\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Enum\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Rebase.Settings\">\r\n    <option name=\"NEW_BASE\" value=\"origin/thread-test\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"develop\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$PROJECT_DIR$/src/main/java/linalg/concurrent/MatrixAdditionWorker.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenRunner\">\r\n    <option name=\"delegateBuildToMaven\" value=\"true\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1yc8grbYeBrYoZturjsTdZ94eiV\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\r\n    <property name=\"node.js.detected.package.tslint\" value=\"true\" />\r\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\r\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\r\n    <property name=\"project.structure.last.edited\" value=\"Artifacts\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.15280464\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.1743421\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"reference.settings.project.maven.runner\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\jacob\\IdeaProjects\\Java-Linear-Algebra\\benchmarks\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.QRDecomposition\">\r\n    <configuration name=\"ConcurrentMatrixAddition\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"linalg.concurrent.ConcurrentMatrixAddition\" />\r\n      <module name=\"Java-Linear-Algebra\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"linalg.concurrent.ConcurrentMatrixAddition\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"LQDecomposition\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"linalg.LQDecomposition\" />\r\n      <module name=\"Java-Linear-Algebra\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"linalg.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"MatrixOperations\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"linalg.MatrixOperations\" />\r\n      <module name=\"Java-Linear-Algebra\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"linalg.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"QRDecomposition\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"linalg.QRDecomposition\" />\r\n      <module name=\"Java-Linear-Algebra\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"linalg.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"SingularValueDecomposition\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"linalg.SingularValueDecomposition\" />\r\n      <module name=\"Java-Linear-Algebra\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"linalg.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Run All Tests\" type=\"JUnit\" factoryName=\"JUnit\">\r\n      <module name=\"Java-Linear-Algebra\" />\r\n      <extension name=\"coverage\" sample_coverage=\"false\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"linalg\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"\" />\r\n      <option name=\"METHOD_NAME\" value=\"\" />\r\n      <option name=\"TEST_OBJECT\" value=\"package\" />\r\n      <dir value=\"$PROJECT_DIR$/../JML/src/test/java\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"MavenRunConfiguration\" factoryName=\"Maven\">\r\n      <MavenSettings>\r\n        <option name=\"myGeneralSettings\" />\r\n        <option name=\"myRunnerSettings\" />\r\n        <option name=\"myRunnerParameters\">\r\n          <MavenRunnerParameters>\r\n            <option name=\"profiles\">\r\n              <set />\r\n            </option>\r\n            <option name=\"goals\">\r\n              <list />\r\n            </option>\r\n            <option name=\"pomFileName\" />\r\n            <option name=\"profilesMap\">\r\n              <map />\r\n            </option>\r\n            <option name=\"resolveToWorkspace\" value=\"false\" />\r\n            <option name=\"workingDirPath\" value=\"\" />\r\n          </MavenRunnerParameters>\r\n        </option>\r\n      </MavenSettings>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.LQDecomposition\" />\r\n        <item itemvalue=\"Application.QRDecomposition\" />\r\n        <item itemvalue=\"Application.SingularValueDecomposition\" />\r\n        <item itemvalue=\"Application.MatrixOperations\" />\r\n        <item itemvalue=\"Application.ConcurrentMatrixAddition\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"7072a60c-bdbe-44dc-912a-0b1b7f9f3af3\" name=\"Changes\" comment=\"\" />\r\n      <created>1632539632382</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1632539632382</updated>\r\n      <workItem from=\"1632539633669\" duration=\"66000\" />\r\n      <workItem from=\"1632539702223\" duration=\"1530000\" />\r\n      <workItem from=\"1632796311477\" duration=\"1142000\" />\r\n      <workItem from=\"1632804621813\" duration=\"1949000\" />\r\n      <workItem from=\"1632853984296\" duration=\"604000\" />\r\n      <workItem from=\"1633560686654\" duration=\"1378000\" />\r\n      <workItem from=\"1633619129483\" duration=\"15000\" />\r\n      <workItem from=\"1633814089150\" duration=\"618000\" />\r\n      <workItem from=\"1634341044636\" duration=\"1183000\" />\r\n      <workItem from=\"1634342400536\" duration=\"264000\" />\r\n      <workItem from=\"1634604329967\" duration=\"4002000\" />\r\n      <workItem from=\"1634926319012\" duration=\"15000\" />\r\n      <workItem from=\"1635100619572\" duration=\"7340000\" />\r\n      <workItem from=\"1635280770365\" duration=\"1759000\" />\r\n      <workItem from=\"1635283112110\" duration=\"877000\" />\r\n      <workItem from=\"1637537007419\" duration=\"158000\" />\r\n      <workItem from=\"1637705135001\" duration=\"600000\" />\r\n      <workItem from=\"1637769778469\" duration=\"2208000\" />\r\n      <workItem from=\"1637876727416\" duration=\"750000\" />\r\n      <workItem from=\"1637963874808\" duration=\"16000\" />\r\n      <workItem from=\"1640365654234\" duration=\"1264000\" />\r\n      <workItem from=\"1640565431424\" duration=\"849000\" />\r\n      <workItem from=\"1640751458485\" duration=\"3619000\" />\r\n      <workItem from=\"1642820072823\" duration=\"991000\" />\r\n      <workItem from=\"1643323926454\" duration=\"4059000\" />\r\n      <workItem from=\"1643419483786\" duration=\"9000\" />\r\n      <workItem from=\"1643423209754\" duration=\"118000\" />\r\n      <workItem from=\"1643426565017\" duration=\"119000\" />\r\n      <workItem from=\"1647985972533\" duration=\"22118000\" />\r\n      <workItem from=\"1648064334675\" duration=\"15677000\" />\r\n      <workItem from=\"1648087481953\" duration=\"10583000\" />\r\n      <workItem from=\"1648106408604\" duration=\"707000\" />\r\n      <workItem from=\"1648146666142\" duration=\"988000\" />\r\n      <workItem from=\"1648407396444\" duration=\"8981000\" />\r\n      <workItem from=\"1648934232474\" duration=\"16239000\" />\r\n      <workItem from=\"1649106844246\" duration=\"6036000\" />\r\n      <workItem from=\"1649278085231\" duration=\"2415000\" />\r\n      <workItem from=\"1649280964757\" duration=\"113000\" />\r\n      <workItem from=\"1649442126377\" duration=\"10000\" />\r\n      <workItem from=\"1649544007055\" duration=\"224000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Add Jar for Release\">\r\n      <created>1632540231649</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1632540231649</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Add Jar for Release\">\r\n      <created>1632540703641</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1632540703641</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Bug Fixes. Added matrix constructor tests.\">\r\n      <created>1632804759524</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1632804759524</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Bug Fixes.\">\r\n      <created>1633561427757</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1633561427757</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Bug Fixes.\">\r\n      <created>1633562184555</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1633562184555</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Bug Fixes.\">\r\n      <created>1633619134302</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1633619134302</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Added extend method to MatrixManipulations\">\r\n      <created>1634342155258</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1634342155258</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Added extend method to MatrixManipulations\">\r\n      <created>1634342642017</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1634342642017</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Added extend method to MatrixManipulations\">\r\n      <created>1634604808227</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1634604808227</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Added extend method to MatrixManipulations\">\r\n      <created>1634604904987</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1634604904987</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Added extend method to MatrixManipulations\">\r\n      <created>1635104552927</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1635104552927</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Added extend method to MatrixManipulations\">\r\n      <created>1635282493022</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1635282493022</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Added extend method to MatrixManipulations\">\r\n      <created>1635282526609</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1635282526609</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Added extend method to MatrixManipulations\">\r\n      <created>1640565882552</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1640565882552</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Added extend method to MatrixManipulations\">\r\n      <created>1640565891492</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1640565891492</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Added ThreadedMatrixAddition and MatrixRowWorker files for computing matrix addition on multiple threads.\">\r\n      <created>1647904510366</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1647904510366</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Several performance improvements.&#10;&#10;Changed several matrix operations so that they do not make unnecessary copies.&#10;&#10;Added MatrixMultiplicationAlgorithms class which contains the standard matrix multiplication algorithm as well as a blocked algorithm which is faster for large matrices. The Matrix.mult(...) algorithm now chooses which algorithm to use based on the size.\">\r\n      <created>1648087165128</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648087165128</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"Several performance improvements.&#10;&#10;Changed several matrix operations so that they do not make unnecessary copies.&#10;&#10;Added MatrixMultiplicationAlgorithms class which contains the standard matrix multiplication algorithm as well as a blocked algorithm which is faster for large matrices. The Matrix.mult(...) algorithm now chooses which algorithm to use based on the size.\">\r\n      <created>1648087174975</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648087174975</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Several performance improvements.&#10;&#10;Changed several matrix operations so that they do not make unnecessary copies.&#10;&#10;Added MatrixMultiplicationAlgorithms class which contains the standard matrix multiplication algorithm as well as a blocked algorithm which is faster for large matrices. The Matrix.mult(...) algorithm now chooses which algorithm to use based on the size.\">\r\n      <created>1648087206220</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648087206220</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"Added multi-threading for matrix multiplication.&#10;&#10;The Matrix.mult(...) method now chooses whether to use the standard algorithm or the concurrent algorithm for the matrix multiplication based on the size of the matrix.\">\r\n      <created>1648106463240</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648106463240</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"21\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Add Jar for Release\" />\r\n    <MESSAGE value=\"Bug Fixes. Added matrix constructor tests.\" />\r\n    <MESSAGE value=\"Bug Fixes. New Javadoc.\" />\r\n    <MESSAGE value=\"Bug Fixes.\" />\r\n    <MESSAGE value=\"Added extend method to MatrixManipulations\" />\r\n    <MESSAGE value=\"Added ThreadedMatrixAddition and MatrixRowWorker files for computing matrix addition on multiple threads.\" />\r\n    <MESSAGE value=\"Several performance improvements.&#10;&#10;Changed several matrix operations so that they do not make unnecessary copies.&#10;&#10;Added MatrixMultiplicationAlgorithms class which contains the standard matrix multiplication algorithm as well as a blocked algorithm which is faster for large matrices. The Matrix.mult(...) algorithm now chooses which algorithm to use based on the size.\" />\r\n    <MESSAGE value=\"Added multi-threading for matrix multiplication.&#10;&#10;The Matrix.mult(...) method now chooses whether to use the standard algorithm or the concurrent algorithm for the matrix multiplication based on the size of the matrix.\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Added multi-threading for matrix multiplication.&#10;&#10;The Matrix.mult(...) method now chooses whether to use the standard algorithm or the concurrent algorithm for the matrix multiplication based on the size of the matrix.\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/Java_Linear_Algebra$Run_All_Tests.exec\" NAME=\"Run All Tests Coverage Results\" MODIFIED=\"1632796540094\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"jacoco\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"true\" />\r\n    <SUITE FILE_PATH=\"coverage/Java_Linear_Algebra$Run_All_Tests.ic\" NAME=\"Run All Tests Coverage Results\" MODIFIED=\"1632796824493\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 48dc0b3e0abf8d6b081fabfbe0061d32ae01ed50)
+++ b/.idea/workspace.xml	(date 1649895358928)
@@ -9,15 +9,12 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="7072a60c-bdbe-44dc-912a-0b1b7f9f3af3" name="Changes" comment="Added Concurrency class for basic constants and methods to do with concurrency.">
+    <list default="true" id="7072a60c-bdbe-44dc-912a-0b1b7f9f3af3" name="Changes" comment="Added sumToEachCol() method in MatrixOperations&#10;&#10;This sums a column vector to each column of a matrix.">
       <change beforePath="$PROJECT_DIR$/src/main/java/linalg/complex_number/CNumber.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/linalg/complex_number/CNumber.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/Java-Linear-Algebra-v0.0.1-beta.jar" beforeDir="false" afterPath="$PROJECT_DIR$/target/Java-Linear-Algebra-v0.0.1-beta.jar" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/linalg/complex_number/CNumber.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/linalg/complex_number/CNumber.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/jacoco.exec" beforeDir="false" afterPath="$PROJECT_DIR$/target/jacoco.exec" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/site/jacoco/index.html" beforeDir="false" afterPath="$PROJECT_DIR$/target/site/jacoco/index.html" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco-sessions.html" beforeDir="false" afterPath="$PROJECT_DIR$/target/site/jacoco/jacoco-sessions.html" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco.csv" beforeDir="false" afterPath="$PROJECT_DIR$/target/site/jacoco/jacoco.csv" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/site/jacoco/jacoco.xml" beforeDir="false" afterPath="$PROJECT_DIR$/target/site/jacoco/jacoco.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/site/jacoco/linalg.complex_number/CNumber.html" beforeDir="false" afterPath="$PROJECT_DIR$/target/site/jacoco/linalg.complex_number/CNumber.html" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/site/jacoco/linalg.complex_number/CNumber.java.html" beforeDir="false" afterPath="$PROJECT_DIR$/target/site/jacoco/linalg.complex_number/CNumber.java.html" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/site/jacoco/linalg.complex_number/index.html" beforeDir="false" afterPath="$PROJECT_DIR$/target/site/jacoco/linalg.complex_number/index.html" afterDir="false" />
@@ -44,7 +41,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="develop" />
+        <entry key="$PROJECT_DIR$" value="NN-Batch" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -394,7 +391,14 @@
       <option name="project" value="LOCAL" />
       <updated>1648106463240</updated>
     </task>
-    <option name="localTasksCounter" value="21" />
+    <task id="LOCAL-00021" summary="Added sumToEachCol() method in MatrixOperations&#10;&#10;This sums a column vector to each column of a matrix.">
+      <created>1649895353627</created>
+      <option name="number" value="00021" />
+      <option name="presentableId" value="LOCAL-00021" />
+      <option name="project" value="LOCAL" />
+      <updated>1649895353627</updated>
+    </task>
+    <option name="localTasksCounter" value="22" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -420,7 +424,8 @@
     <MESSAGE value="Added ThreadedMatrixAddition and MatrixRowWorker files for computing matrix addition on multiple threads." />
     <MESSAGE value="Several performance improvements.&#10;&#10;Changed several matrix operations so that they do not make unnecessary copies.&#10;&#10;Added MatrixMultiplicationAlgorithms class which contains the standard matrix multiplication algorithm as well as a blocked algorithm which is faster for large matrices. The Matrix.mult(...) algorithm now chooses which algorithm to use based on the size." />
     <MESSAGE value="Added multi-threading for matrix multiplication.&#10;&#10;The Matrix.mult(...) method now chooses whether to use the standard algorithm or the concurrent algorithm for the matrix multiplication based on the size of the matrix." />
-    <option name="LAST_COMMIT_MESSAGE" value="Added multi-threading for matrix multiplication.&#10;&#10;The Matrix.mult(...) method now chooses whether to use the standard algorithm or the concurrent algorithm for the matrix multiplication based on the size of the matrix." />
+    <MESSAGE value="Added sumToEachCol() method in MatrixOperations&#10;&#10;This sums a column vector to each column of a matrix." />
+    <option name="LAST_COMMIT_MESSAGE" value="Added sumToEachCol() method in MatrixOperations&#10;&#10;This sums a column vector to each column of a matrix." />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/Java_Linear_Algebra$Run_All_Tests.exec" NAME="Run All Tests Coverage Results" MODIFIED="1632796540094" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="jacoco" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="true" />
Index: target/site/jacoco/linalg/MatrixOperations.java.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\"><head><meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\"/><link rel=\"stylesheet\" href=\"../jacoco-resources/report.css\" type=\"text/css\"/><link rel=\"shortcut icon\" href=\"../jacoco-resources/report.gif\" type=\"image/gif\"/><title>MatrixOperations.java</title><link rel=\"stylesheet\" href=\"../jacoco-resources/prettify.css\" type=\"text/css\"/><script type=\"text/javascript\" src=\"../jacoco-resources/prettify.js\"></script></head><body onload=\"window['PR_TAB_WIDTH']=4;prettyPrint()\"><div class=\"breadcrumb\" id=\"breadcrumb\"><span class=\"info\"><a href=\"../jacoco-sessions.html\" class=\"el_session\">Sessions</a></span><a href=\"../index.html\" class=\"el_report\">Java-Linear-Algebra</a> &gt; <a href=\"index.source.html\" class=\"el_package\">linalg</a> &gt; <span class=\"el_source\">MatrixOperations.java</span></div><h1>MatrixOperations.java</h1><pre class=\"source lang-java linenums\">package linalg;\r\n\r\nimport linalg.complex_number.CNumber;\r\nimport linalg.concurrent.ConcurrentMatrixAddition;\r\n\r\n/**\r\n * This interface provides several methods useful for matrix operations.\r\n *\r\n * @author Jacob Watters\r\n */\r\ninterface MatrixOperations {\r\n\r\n\r\n\t/**\r\n\t * Performs matrix addition on two matrices of the same dimensions.\r\n\t *\r\n\t * @param B - matrix to add to the instance matrix\r\n\t * @return result of matrix addition\r\n\t */\r\n\tdefault Matrix add(Matrix B) {\r\n<span class=\"nc\" id=\"L21\">\t\tMatrix A = (Matrix) this;</span>\r\n\t\tMatrix sum;\r\n\r\n<span class=\"nc\" id=\"L24\">\t\tCNumber[][] C = new CNumber[A.m][A.n];</span>\r\n<span class=\"nc\" id=\"L25\">\t\tMatrixChecks.dimensionCheck(A, B, MatrixChecks.SAME_DIM);</span>\r\n\r\n\t\t// TODO: Is this really the best way to determine if the concurrent algorithm should be used.\r\n<span class=\"nc bnc\" id=\"L28\" title=\"All 8 branches missed.\">\t\tif((A.m &gt; 1200 &amp;&amp; A.n &gt; 1200) || A.m &gt; 80000 || A.n &gt; 80000) {</span>\r\n\r\n\t\t\t// Use concurrent algorithm.\r\n<span class=\"nc\" id=\"L31\">\t\t\tConcurrentMatrixAddition adder = new ConcurrentMatrixAddition(A, B);</span>\r\n<span class=\"nc\" id=\"L32\">\t\t\tsum = adder.add();</span>\r\n\r\n<span class=\"nc\" id=\"L34\">\t\t} else {</span>\r\n\r\n\t\t\t// Use standard algorithm\r\n<span class=\"nc bnc\" id=\"L37\" title=\"All 2 branches missed.\">\t\t\tfor(int i=0; i&lt;A.m; i++) {</span>\r\n<span class=\"nc bnc\" id=\"L38\" title=\"All 2 branches missed.\">\t\t\t\tfor(int j=0; j&lt;A.n; j++) {</span>\r\n<span class=\"nc bnc\" id=\"L39\" title=\"All 4 branches missed.\">\t\t\t\t\tif(A.entries[i][j].isReal() &amp;&amp; B.entries[i][j].isReal()) {</span>\r\n<span class=\"nc\" id=\"L40\">\t\t\t\t\t\tC[i][j] = new CNumber(A.entries[i][j].re + B.entries[i][j].re,</span>\r\n\t\t\t\t\t\t\t\t0);\r\n\t\t\t\t\t} else {\r\n<span class=\"nc\" id=\"L43\">\t\t\t\t\t\tC[i][j] = new CNumber(A.entries[i][j].re + B.entries[i][j].re,</span>\r\n\t\t\t\t\t\t\t\tA.entries[i][j].im + B.entries[i][j].im);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n<span class=\"nc\" id=\"L49\">\t\t\tsum = new Matrix(C);</span>\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L52\">\t\treturn sum;</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Adds the value of a to all entries of matrix.\r\n\t * @param a Value to add to matrix.\r\n\t * @return A new matrix with the value of a added to this matrix.\r\n\t */\r\n\tdefault Matrix add(double a) {\r\n<span class=\"nc\" id=\"L62\">\t\tMatrix A = (Matrix) this;</span>\r\n<span class=\"nc\" id=\"L63\">\t\tCNumber[][] C = new CNumber[A.m][A.n];</span>\r\n\r\n<span class=\"nc bnc\" id=\"L65\" title=\"All 2 branches missed.\">\t\tfor(int i=0; i&lt;A.m; i++) {</span>\r\n<span class=\"nc bnc\" id=\"L66\" title=\"All 2 branches missed.\">\t\t\tfor(int j=0; j&lt;A.n; j++) {</span>\r\n<span class=\"nc\" id=\"L67\">\t\t\t\tC[i][j] = new CNumber(A.entries[i][j].re + a, A.entries[i][j].im);</span>\r\n\t\t\t}\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L71\">\t\treturn new Matrix(C);</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs matrix subtraction on two matrices of the same dimensions.\r\n\t *\r\n\t * @param B - matrix to subtract to the instance matrix\r\n\t * @return result of matrix subtraction\r\n\t */\r\n\tdefault Matrix sub(Matrix B) {\r\n<span class=\"nc\" id=\"L82\">\t\tMatrix A = (Matrix) this;</span>\r\n<span class=\"nc\" id=\"L83\">\t\tCNumber[][] C = new CNumber[A.m][A.n];</span>\r\n<span class=\"nc\" id=\"L84\">\t\tMatrixChecks.dimensionCheck(A, B, MatrixChecks.SAME_DIM);</span>\r\n\r\n<span class=\"nc bnc\" id=\"L86\" title=\"All 2 branches missed.\">\t\tfor(int i=0; i&lt;A.m; i++) {</span>\r\n<span class=\"nc bnc\" id=\"L87\" title=\"All 2 branches missed.\">\t\t\tfor(int j=0; j&lt;A.n; j++) {</span>\r\n<span class=\"nc\" id=\"L88\">\t\t\t\tC[i][j] = new CNumber(A.entries[i][j].re - B.entries[i][j].re,</span>\r\n\t\t\t\t\t\tA.entries[i][j].im - B.entries[i][j].im);\r\n\t\t\t}\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L93\">\t\treturn new Matrix(C);</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Subtracts the value of a from all entries of matrix.\r\n\t * @param a Value to subtract from matrix.\r\n\t * @return A new matrix with the value of a added to this matrix.\r\n\t */\r\n\tdefault Matrix sub(double a) {\r\n<span class=\"nc\" id=\"L103\">\t\treturn this.add(-a);</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Subtracts the value of a from all entries of matrix.\r\n\t * @param a Value to subtract from matrix.\r\n\t * @return A new matrix with the value of a added to this matrix.\r\n\t */\r\n\tdefault Matrix sub(CNumber a) {\r\n<span class=\"nc\" id=\"L113\">\t\tMatrix A = (Matrix) this;</span>\r\n<span class=\"nc\" id=\"L114\">\t\tCNumber[][] difference = new CNumber[A.m][A.n];</span>\r\n\r\n<span class=\"nc bnc\" id=\"L116\" title=\"All 2 branches missed.\">\t\tfor(int i=0; i&lt;A.m; i++) {</span>\r\n<span class=\"nc bnc\" id=\"L117\" title=\"All 2 branches missed.\">\t\t\tfor(int j=0; j&lt;A.n; j++) {</span>\r\n<span class=\"nc\" id=\"L118\">\t\t\t\tdifference[i][j] = CNumber.subtract(A.entries[i][j], a);</span>\r\n\t\t\t}\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L122\">\t\treturn new Matrix(difference);</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs matrix multiplication on two matrices. The instance matrix\r\n\t * must have the same number of columns as the rows of B.\r\n\t *\r\n\t * If the instance matrix is a kxm matrix and B is a\r\n\t * m x n matrix then the result will be a k x n matrix.\r\n\t *\r\n\t * @param B - matrix to multiply to the instance matrix\r\n\t * @return result of matrix multiplication\r\n\t */\r\n\tdefault Matrix mult(Matrix B) {\r\n<span class=\"nc\" id=\"L137\">\t\tMatrix A = (Matrix) this;</span>\r\n\r\n<span class=\"nc bnc\" id=\"L139\" title=\"All 2 branches missed.\">\t\tif(!MatrixComparisons.matMultCheck(A, B)) {</span>\r\n<span class=\"nc\" id=\"L140\">\t\t\tthrow new IllegalArgumentException(&quot;Number of columns in first matrix must match \\n&quot;</span>\r\n<span class=\"nc\" id=\"L141\">\t\t\t\t\t+ &quot;number of rows in second matrix but got &quot; + A.shape() + &quot; and &quot; + B.shape() + &quot;.&quot;);</span>\r\n\t\t}\r\n\r\n\t\tMatrix product;\r\n\r\n<span class=\"nc bnc\" id=\"L146\" title=\"All 2 branches missed.\">\t\tif(B.n==1) { // Then we have a column vector.</span>\r\n<span class=\"nc\" id=\"L147\">\t\t\tproduct = MatrixMultiplicationAlgorithms.matrixVector(A, B);</span>\r\n<span class=\"nc bnc\" id=\"L148\" title=\"All 6 branches missed.\">\t\t} else if(A.n+A.m &gt;= 500 || A.m &gt;= 1000 || A.n &gt;= 1000) {</span>\r\n\t\t\t// TODO: use concurrent\r\n<span class=\"nc\" id=\"L150\">\t\t\tproduct = MatrixMultiplicationAlgorithms.concurrent(A, B);</span>\r\n\t\t} else {\r\n<span class=\"nc\" id=\"L152\">\t\t\tproduct = MatrixMultiplicationAlgorithms.standard(A, B);</span>\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L155\">\t\treturn product;</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs matrix-vector multiplication with a column matrix. The vector MUST be a column vector.\r\n\t *\r\n\t * @param B - Column vector to multiply to the instance matrix.\r\n\t * @return result of matrix-vector multiplication.\r\n\t */\r\n\tdefault Vector mult(Vector B) {\r\n<span class=\"nc\" id=\"L166\">\t\tMatrix A = (Matrix) this;</span>\r\n<span class=\"nc\" id=\"L167\">\t\tVector product = new Vector(A.m);</span>\r\n\t\tVector b;\r\n\r\n<span class=\"nc bnc\" id=\"L170\" title=\"All 2 branches missed.\">\t\tif(B.type==0) { // Then transpose</span>\r\n<span class=\"nc\" id=\"L171\">\t\t\tb = B.T();</span>\r\n\t\t} else {\r\n<span class=\"nc\" id=\"L173\">\t\t\tthrow new IllegalArgumentException(&quot;Expecting column vector but got a row vector.&quot;);</span>\r\n\t\t}\r\n\r\n<span class=\"nc bnc\" id=\"L176\" title=\"All 2 branches missed.\">\t\tfor(int i = 0; i &lt; A.m; i++) {</span>\r\n<span class=\"nc bnc\" id=\"L177\" title=\"All 2 branches missed.\">\t\t\tfor(int j = 0; j &lt; A.n; j++) {</span>\r\n<span class=\"nc\" id=\"L178\">\t\t\t\tproduct.entries[i][0].re += (A.entries[i][j].re*b.entries[0][j].re - A.entries[i][j].im*b.entries[0][j].im);</span>\r\n<span class=\"nc\" id=\"L179\">\t\t\t\tproduct.entries[i][0].im += (A.entries[i][j].re*b.entries[0][j].im + A.entries[i][j].im*b.entries[0][j].re);</span>\r\n\t\t\t}\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L183\">\t\treturn product;</span>\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Performs element-wise multiplication of two matrices.\r\n\t *\r\n\t * @throws IllegalArgumentException If matrices do not have the same dimension.\r\n\t * @param B - matrix to multiply element-wise to this matrix.\r\n\t * @return result of element-wise matrix multiplication.\r\n\t */\r\n\tdefault Matrix elemMult(Matrix B) {\r\n<span class=\"nc\" id=\"L196\">\t\tMatrix A = (Matrix) this;</span>\r\n<span class=\"nc\" id=\"L197\">\t\tCNumber[][] C = new CNumber[A.m][A.n];</span>\r\n<span class=\"nc\" id=\"L198\">\t\tMatrixChecks.dimensionCheck(A, B, MatrixChecks.SAME_DIM);</span>\r\n\r\n<span class=\"nc bnc\" id=\"L200\" title=\"All 2 branches missed.\">\t\tfor(int i=0; i&lt;A.m; i++) {</span>\r\n<span class=\"nc bnc\" id=\"L201\" title=\"All 2 branches missed.\">\t\t\tfor(int j=0; j&lt;A.n; j++) {</span>\r\n\r\n<span class=\"nc\" id=\"L203\">\t\t\t\tC[i][j] = new CNumber(A.entries[i][j].re*B.entries[i][j].re - A.entries[i][j].im*B.entries[i][j].im,</span>\r\n\t\t\t\t\t\tA.entries[i][j].re*B.entries[i][j].im + A.entries[i][j].im*B.entries[i][j].re);\r\n\t\t\t}\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L208\">\t\treturn new Matrix(C);</span>\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Performs scalar multiplication of a matrix.\r\n\t *\r\n\t * @param factor - value to multiply this matrix by.\r\n\t * @return The scalar multiplication of the matrix and the factor.\r\n\t */\r\n\tdefault Matrix scalMult(double factor) {\r\n<span class=\"nc\" id=\"L220\">\t\treturn this.scalMult(new CNumber(factor));</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs scalar multiplication of a matrix.\r\n\t *\r\n\t * @param factor - value to multiply matrix by.\r\n\t * @return The scalar multiplication of the matrix and the factor.\r\n\t */\r\n\tdefault Matrix scalMult(CNumber factor) {\r\n<span class=\"nc\" id=\"L231\">\t\tMatrix A = (Matrix) this;</span>\r\n<span class=\"nc\" id=\"L232\">\t\tCNumber[][] result = new CNumber[A.m][A.n];</span>\r\n\r\n<span class=\"nc bnc\" id=\"L234\" title=\"All 2 branches missed.\">\t\tfor(int i = 0; i &lt; A.m; i++) {</span>\r\n<span class=\"nc bnc\" id=\"L235\" title=\"All 2 branches missed.\">\t\t\tfor(int j = 0; j &lt;  A.n; j++) {</span>\r\n<span class=\"nc\" id=\"L236\">\t\t\t\tresult[i][j] = new CNumber(A.entries[i][j].re*factor.re - A.entries[i][j].im*factor.im,</span>\r\n\t\t\t\t\t\tA.entries[i][j].re*factor.im + A.entries[i][j].im*factor.re);\r\n\t\t\t}\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L241\">\t\treturn new Matrix(result);</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs element-wise division on two matrices of the same dimensions.\r\n\t *\r\n\t * @param B - matrix to divide element-wise the instance matrix with.\r\n\t * @return result of element-wise matrix multiplication.\r\n\t */\r\n\tdefault Matrix elemDiv(Matrix B) {\r\n<span class=\"nc\" id=\"L252\">\t\tMatrix A = (Matrix) this;</span>\r\n<span class=\"nc\" id=\"L253\">\t\tCNumber[][] C = new CNumber[A.m][A.n];</span>\r\n<span class=\"nc\" id=\"L254\">\t\tMatrixChecks.dimensionCheck(A, B, MatrixChecks.SAME_DIM);</span>\r\n\r\n<span class=\"nc bnc\" id=\"L256\" title=\"All 2 branches missed.\">\t\tfor(int i=0; i&lt;A.m; i++) {</span>\r\n<span class=\"nc bnc\" id=\"L257\" title=\"All 2 branches missed.\">\t\t\tfor(int j=0; j&lt;A.n; j++) {</span>\r\n<span class=\"nc\" id=\"L258\">\t\t\t\tC[i][j] = new CNumber((A.entries[i][j].re*B.entries[i][j].re + A.entries[i][j].im*B.entries[i][j].im) /</span>\r\n\t\t\t\t\t\t(B.entries[i][j].re*B.entries[i][j].re + B.entries[i][j].im*B.entries[i][j].im),\r\n\r\n\t\t\t\t\t\t(A.entries[i][j].im*B.entries[i][j].re - A.entries[i][j].re*B.entries[i][j].im) /\r\n\t\t\t\t\t\t\t\t(B.entries[i][j].re*B.entries[i][j].re + B.entries[i][j].im*B.entries[i][j].im)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L267\">\t\treturn new Matrix(C);</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs scalar division of this matrix.\r\n\t *\r\n\t * @param divisor - value to divide matrix by.\r\n\t * @return The scalar division of the matrix and the divisor.\r\n\t */\r\n\tdefault Matrix scalDiv(double divisor) {\r\n<span class=\"nc\" id=\"L278\">\t\tdouble factor = 1/divisor;</span>\r\n<span class=\"nc\" id=\"L279\">\t\treturn this.scalMult(new CNumber(factor));</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs scalar division of this matrix.\r\n\t *\r\n\t * @param divisor - value to divide matrix by.\r\n\t * @return The scalar division of the matrix and the divisor.\r\n\t */\r\n\tdefault Matrix scalDiv(CNumber divisor) {\r\n<span class=\"nc\" id=\"L290\">\t\tCNumber factor = CNumber.divide(CNumber.ONE, divisor);</span>\r\n<span class=\"nc\" id=\"L291\">\t\treturn this.scalMult(factor);</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Computes the Frobenius inner product of two matrices A and B, {@code &lt;A, B&gt;}&lt;sub&gt;F&lt;/sub&gt;.\r\n\t *\r\n\t * @param B - Second matrix for the Frobenius inner product.\r\n\t * @return the Frobenius inner product.\r\n\t */\r\n\tdefault CNumber fip(Matrix B) {\r\n<span class=\"nc\" id=\"L302\">\t\treturn this.mult(B).tr();</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Computes the matrix direct sum. That is, a block diagonal matrix containing all matrices from a set of matrices.\r\n\t *\r\n\t * @param matrixList - List of matrices from which to compute the matrix direct sum.\r\n\t * @return The result of direct summing the matrices in matrixList to this matrix.\r\n\t */\r\n\tdefault Matrix directSum(Matrix... matrixList) { // TODO: Because this is not static, include &quot;this&quot; in the direct sum.\r\n<span class=\"nc\" id=\"L313\">\t\tMatrix A = (Matrix) this;</span>\r\n<span class=\"nc\" id=\"L314\">\t\tint new_m = A.m, new_n = A.n,</span>\r\n<span class=\"nc\" id=\"L315\">\t\t\t\tcurrent_m = 0, current_n = 0;</span>\r\n\r\n<span class=\"nc bnc\" id=\"L317\" title=\"All 2 branches missed.\">\t\tfor(int i=0; i&lt;matrixList.length; i++) {</span>\r\n<span class=\"nc\" id=\"L318\">\t\t\tnew_m += matrixList[i].m;</span>\r\n<span class=\"nc\" id=\"L319\">\t\t\tnew_n += matrixList[i].n;</span>\r\n\t\t}\r\n\r\n\r\n<span class=\"nc\" id=\"L323\">\t\tMatrix directSum = new Matrix(new_m, new_n);</span>\r\n\r\n<span class=\"nc bnc\" id=\"L325\" title=\"All 2 branches missed.\">\t\tfor(int i=-1; i&lt;matrixList.length; i++) {</span>\r\n<span class=\"nc bnc\" id=\"L326\" title=\"All 2 branches missed.\">\t\t\tif(i==-1) {</span>\r\n<span class=\"nc\" id=\"L327\">\t\t\t\tdirectSum.setSlice(current_m, current_n, A);</span>\r\n<span class=\"nc\" id=\"L328\">\t\t\t\tcurrent_m += A.m;</span>\r\n<span class=\"nc\" id=\"L329\">\t\t\t\tcurrent_n += A.n;</span>\r\n\t\t\t} else {\r\n<span class=\"nc\" id=\"L331\">\t\t\t\tdirectSum.setSlice(current_m, current_n, matrixList[i]);</span>\r\n<span class=\"nc\" id=\"L332\">\t\t\t\tcurrent_m += matrixList[i].m;</span>\r\n<span class=\"nc\" id=\"L333\">\t\t\t\tcurrent_n += matrixList[i].n;</span>\r\n\t\t\t}\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L337\">\t\treturn directSum;</span>\r\n\t}\r\n\r\n\r\n\tdefault Matrix sudoDirectSum(Matrix... matrixList) {\r\n<span class=\"nc\" id=\"L342\">\t\tMatrix A = (Matrix) this;</span>\r\n<span class=\"nc\" id=\"L343\">\t\tint new_m = A.m, new_n = A.n,</span>\r\n<span class=\"nc\" id=\"L344\">\t\t\t\tcurrent_m = 0, current_n;</span>\r\n\r\n<span class=\"nc bnc\" id=\"L346\" title=\"All 2 branches missed.\">\t\tfor(int i=0; i&lt;matrixList.length; i++) {</span>\r\n<span class=\"nc\" id=\"L347\">\t\t\tnew_m += matrixList[i].m;</span>\r\n<span class=\"nc\" id=\"L348\">\t\t\tnew_n += matrixList[i].n;</span>\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L351\">\t\tcurrent_n = new_n;</span>\r\n<span class=\"nc\" id=\"L352\">\t\tMatrix directSum = new Matrix(new_m, new_n);</span>\r\n\r\n<span class=\"nc bnc\" id=\"L354\" title=\"All 2 branches missed.\">\t\tfor(int i=-1; i&lt;matrixList.length; i++) {</span>\r\n<span class=\"nc bnc\" id=\"L355\" title=\"All 2 branches missed.\">\t\t\tif(i==-1) {</span>\r\n<span class=\"nc\" id=\"L356\">\t\t\t\tdirectSum.setSlice(current_m, current_n-A.n, A);</span>\r\n<span class=\"nc\" id=\"L357\">\t\t\t\tcurrent_m += A.m;</span>\r\n<span class=\"nc\" id=\"L358\">\t\t\t\tcurrent_n -= A.n;</span>\r\n\t\t\t} else {\r\n<span class=\"nc\" id=\"L360\">\t\t\t\tdirectSum.setSlice(current_m, current_n-matrixList[i].n, matrixList[i]);</span>\r\n<span class=\"nc\" id=\"L361\">\t\t\t\tcurrent_m += matrixList[i].m;</span>\r\n<span class=\"nc\" id=\"L362\">\t\t\t\tcurrent_n -= matrixList[i].n;</span>\r\n\t\t\t}\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L366\">\t\treturn directSum;</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Computes element wise square root of the matrix. All square roots are the positive root or, in\r\n\t * the case of complex entries, the root with positive real part.\r\n\t *\r\n\t * @return The element-wise square root of this matrix.\r\n\t */\r\n\tdefault Matrix sqrt() {\r\n<span class=\"nc\" id=\"L377\">\t\tMatrix A = (Matrix) this;</span>\r\n<span class=\"nc\" id=\"L378\">\t\tCNumber[][] root = new CNumber[A.m][A.n];</span>\r\n\r\n<span class=\"nc bnc\" id=\"L380\" title=\"All 2 branches missed.\">\t\tfor(int i=0; i&lt;A.m; i++) {</span>\r\n<span class=\"nc bnc\" id=\"L381\" title=\"All 2 branches missed.\">\t\t\tfor(int j=0; j&lt;A.n; j++) {</span>\r\n<span class=\"nc\" id=\"L382\">\t\t\t\troot[i][j] = CNumber.sqrt(A.entries[i][j]);</span>\r\n\t\t\t}\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L386\">\t\treturn new Matrix(root);</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Computes absolute value, element-wise, of a matrix.\r\n\t * If any of the matrix cells are complex, this will result\r\n\t * in the magnitude of that value.\r\n\t *\r\n\t * @return - element-wise absolute value of matrix.\r\n\t */\r\n\tdefault Matrix abs() {\r\n<span class=\"nc\" id=\"L398\">\t\tMatrix A = (Matrix) this;</span>\r\n<span class=\"nc\" id=\"L399\">\t\tCNumber[][] abs = new CNumber[A.m][A.n];</span>\r\n\r\n<span class=\"nc bnc\" id=\"L401\" title=\"All 2 branches missed.\">\t\tfor(int i=0; i&lt;A.m; i++) {</span>\r\n<span class=\"nc bnc\" id=\"L402\" title=\"All 2 branches missed.\">\t\t\tfor(int j=0; j&lt;A.n; j++) {</span>\r\n<span class=\"nc\" id=\"L403\">\t\t\t\tabs[i][j] = CNumber.abs(A.entries[i][j]);</span>\r\n\t\t\t}\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L407\">\t\treturn new Matrix(abs);</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Transposes Matrix. Same as &lt;code&gt; Matrix.T() &lt;/code&gt;\r\n\t *\r\n\t * @return transpose of matrix\r\n\t */\r\n\tdefault Matrix transpose() {\r\n<span class=\"nc\" id=\"L417\">\t\treturn this.T();</span>\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Transposes Matrix. Same as &lt;code&gt; Matrix.transpose() &lt;/code&gt;\r\n\t *\r\n\t * @return transpose of matrix\r\n\t */\r\n\tdefault Matrix T() {\r\n<span class=\"nc\" id=\"L428\">\t\tMatrix A = (Matrix) this;</span>\r\n<span class=\"nc\" id=\"L429\">\t\tCNumber[][] At = new CNumber[A.n][A.m];</span>\r\n\r\n<span class=\"nc\" id=\"L431\">\t\tfinal int BLOCK_SIZE = 16;</span>\r\n\r\n\t\t// Compute transpose using blocked algorithm\r\n<span class=\"nc bnc\" id=\"L434\" title=\"All 2 branches missed.\">\t\tfor(int i = 0; i &lt; A.m; i += BLOCK_SIZE) {</span>\r\n<span class=\"nc bnc\" id=\"L435\" title=\"All 2 branches missed.\">\t\t\tfor (int j = 0; j &lt; A.n; j += BLOCK_SIZE) {</span>\r\n\t\t\t\t// transpose the block beginning at [i,j]\r\n<span class=\"nc bnc\" id=\"L437\" title=\"All 4 branches missed.\">\t\t\t\tfor (int k = i; k &lt; i + BLOCK_SIZE &amp;&amp; k &lt; A.m; ++k) {</span>\r\n<span class=\"nc bnc\" id=\"L438\" title=\"All 4 branches missed.\">\t\t\t\t\tfor (int l = j; l &lt; j + BLOCK_SIZE &amp;&amp; l &lt; A.n; ++l) {</span>\r\n<span class=\"nc\" id=\"L439\">\t\t\t\t\t\tAt[l][k] = A.entries[k][l];</span>\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L445\">\t\treturn new Matrix(At);</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Conjugates a matrix element-wise.\r\n\t *\r\n\t * @return Conjugate of matrix\r\n\t */\r\n\tdefault Matrix conjugate() {\r\n<span class=\"nc\" id=\"L455\">\t\tMatrix A = (Matrix) this;</span>\r\n<span class=\"nc\" id=\"L456\">\t\tCNumber[][] Ac = new CNumber[A.m][A.n];</span>\r\n\r\n<span class=\"nc bnc\" id=\"L458\" title=\"All 2 branches missed.\">\t\tfor(int i = 0; i &lt; A.m; i++) {</span>\r\n<span class=\"nc bnc\" id=\"L459\" title=\"All 2 branches missed.\">\t\t\tfor(int j = 0; j &lt; A.n; j++) {</span>\r\n<span class=\"nc\" id=\"L460\">\t\t\t\tAc[i][j] = CNumber.conjugate(A.entries[i][j]);</span>\r\n\t\t\t}\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L464\">\t\treturn new Matrix(Ac);</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Computes the conjugate transpose of this matrix.\r\n\t * &lt;br&gt;&lt;br&gt;\r\n\t * This method is the same as {@link #hermAdjoint() hermAdjoint()} and {@link #H() H()}.\r\n\t *\r\n\t * @return The conjugate transpose of this matrix.\r\n\t */\r\n\tdefault Matrix conjT() {\r\n<span class=\"nc\" id=\"L476\">\t\treturn this.conjugate().T();</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Computes the Hermation adjoint of a matrix. This is the transpose of the conjugate matrix.\r\n\t * &lt;br&gt;&lt;br&gt;\r\n\t * This method is the same as {@link #conjT() conjT()}  and {@link #H() H()}.\r\n\t *\r\n\t * @return adjoint of matrix.\r\n\t */\r\n\tdefault Matrix hermAdjoint() {\r\n<span class=\"nc\" id=\"L488\">\t\treturn this.conjugate().T();</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Computes the Hermation adjoint of a matrix. This is the transpose of the conjugate matrix.\r\n\t * &lt;br&gt;&lt;br&gt;\r\n\t * This method is the same as {@link #conjT() conjT()} and {@link #hermAdjoint() hermAdjpint()}.\r\n\t *\r\n\t * @return adjoint of matrix.\r\n\t */\r\n\tdefault Matrix H() {\r\n<span class=\"nc\" id=\"L500\">\t\treturn this.conjugate().T();</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Computes determinant of matrix using reccurisive definition. This method exists\r\n\t * for computing the determinant of non-real matrices.\r\n\t *\r\n\t * @param A - Matrix to compute determinant of\r\n\t * @return determinant of matrix A\r\n\t */\r\n\tstatic CNumber detRec(Matrix A) {\r\n<span class=\"nc\" id=\"L512\">\t\tCNumber value = CNumber.ZERO;</span>\r\n\r\n<span class=\"nc bnc\" id=\"L514\" title=\"All 4 branches missed.\">\t\tif(A.m == 1 &amp;&amp; A.n == 1) { // Then we simply have a 1x1 matrix.</span>\r\n<span class=\"nc\" id=\"L515\">\t\t\treturn A.entries[0][0];</span>\r\n\t\t}\r\n<span class=\"nc bnc\" id=\"L517\" title=\"All 4 branches missed.\">\t\telse if(A.m == 2 &amp;&amp; A.n == 2) { // Then we have a 2x2 matrix, which is the base case</span>\r\n<span class=\"nc\" id=\"L518\">\t\t\tCNumber a = A.entries[0][0];</span>\r\n<span class=\"nc\" id=\"L519\">\t\t\tCNumber b = A.entries[0][1];</span>\r\n<span class=\"nc\" id=\"L520\">\t\t\tCNumber c = A.entries[1][0];</span>\r\n<span class=\"nc\" id=\"L521\">\t\t\tCNumber d = A.entries[1][1];</span>\r\n\r\n<span class=\"nc\" id=\"L523\">\t\t\tvalue = CNumber.subtract(CNumber.multiply(a, d), CNumber.multiply(b, c));</span>\r\n<span class=\"nc\" id=\"L524\">\t\t}</span>\r\n\t\telse {\r\n<span class=\"nc bnc\" id=\"L526\" title=\"All 2 branches missed.\">\t\t\tfor(int j = 0; j &lt; A.n; j++) {</span>\r\n<span class=\"nc\" id=\"L527\">\t\t\t\tMatrix newA = A.removeRow(0).removeCol(j);</span>\r\n\r\n<span class=\"nc\" id=\"L529\">\t\t\t\tCNumber num = new CNumber(Math.pow(-1, j));</span>\r\n<span class=\"nc\" id=\"L530\">\t\t\t\tnum = CNumber.multiply(num, A.entries[0][j]);</span>\r\n\r\n<span class=\"nc\" id=\"L532\">\t\t\t\tvalue = CNumber.add(value, CNumber.multiply(detRec(newA), num));</span>\r\n\t\t\t}\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L536\">\t\treturn value;</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Computes determinant of real matrix using QR decomposition.\r\n\t *\r\n\t * @param A - Matrix to compute determinant of.\r\n\t * @return determinant of matrix A\r\n\t */\r\n\tstatic CNumber detQR(Matrix A) {\r\n<span class=\"nc\" id=\"L547\">\t\tCNumber detQ, detR = CNumber.ONE;</span>\r\n<span class=\"nc\" id=\"L548\">\t\tMatrix[] QRh = Decompose.QR(A, true);</span>\r\n\r\n<span class=\"nc\" id=\"L550\">\t\tdetQ = new CNumber(Math.pow(-1, QRh[2].entries[0][0].getReal()));</span>\r\n\r\n<span class=\"nc bnc\" id=\"L552\" title=\"All 2 branches missed.\">\t\tfor(int i = 0; i&lt;QRh[1].n; i++) {</span>\r\n<span class=\"nc\" id=\"L553\">\t\t\tdetR = CNumber.multiply(detR, QRh[1].entries[i][i]);</span>\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L556\">\t\treturn CNumber.multiply(detR, detQ);</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Computes determinant of matrix. If the matrix has\r\n\t * any complex entries, this may be a complex value.\r\n\t * Note: Currently this method only works for real matirces.\r\n\t *\r\n\t * @return determinant of matrix.\r\n\t */\r\n\tdefault CNumber det() {\r\n<span class=\"nc\" id=\"L568\">\t\tMatrix A = (Matrix) this;</span>\r\n\r\n<span class=\"nc bnc\" id=\"L570\" title=\"All 2 branches missed.\">\t\tif(!A.isSquare()) {</span>\r\n<span class=\"nc\" id=\"L571\">\t\t\tthrow new IllegalArgumentException(&quot;Matrix must be square but got shape &quot; + A.shape);</span>\r\n\t\t}\r\n\r\n<span class=\"nc bnc\" id=\"L574\" title=\"All 4 branches missed.\">\t\tif(A.m == 2 &amp;&amp; A.n == 2) { // Then we have a 2x2 matrix, which we can directly compute</span>\r\n<span class=\"nc\" id=\"L575\">\t\t\tCNumber a = A.entries[0][0];</span>\r\n<span class=\"nc\" id=\"L576\">\t\t\tCNumber b = A.entries[0][1];</span>\r\n<span class=\"nc\" id=\"L577\">\t\t\tCNumber c = A.entries[1][0];</span>\r\n<span class=\"nc\" id=\"L578\">\t\t\tCNumber d = A.entries[1][1];</span>\r\n\r\n<span class=\"nc\" id=\"L580\">\t\t\treturn CNumber.subtract(CNumber.multiply(a, d), CNumber.multiply(b, c));</span>\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L583\">\t\treturn detQR(A);</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Stacks matrices along rows. Both matrices must have the same number of columns\r\n\t * Also see {@link #stack(Matrix, int) stack(Matrix B, int axis)}\r\n\t *\r\n\t * @param B\r\n\t * @return\r\n\t */\r\n\tdefault Matrix stack(Matrix B) {\r\n<span class=\"nc\" id=\"L595\">\t\treturn this.stack(B, 0);</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Stacks matrices along specified axis. Axis 0 will stack matrices along the rows. Axis 1 will\r\n\t * stack matrices along columns.\r\n\t *\r\n\t * Note: To stack matrices along axis 0 they must have the same number of columns.\r\n\t * To stack matrices along axis 1 they must have the same number of rows.\r\n\t *\r\n\t * @param B - Matrix to stack\r\n\t * @param axis - Axis along which to stack matrices.\r\n\t * @return Returns A and B stacked along specified axis.\r\n\t */\r\n\tdefault Matrix stack(Matrix B, int axis) {\r\n<span class=\"nc\" id=\"L611\">\t\tMatrix A = (Matrix) this;</span>\r\n<span class=\"nc\" id=\"L612\">\t\tMatrix result = null;</span>\r\n\r\n<span class=\"nc bnc\" id=\"L614\" title=\"All 2 branches missed.\">\t\tif(axis == 0) { // Stack on rows</span>\r\n<span class=\"nc bnc\" id=\"L615\" title=\"All 2 branches missed.\">\t\t\tif(A.entries[0].length != B.entries[0].length) { // Ensure matrices have same number or columns</span>\r\n<span class=\"nc\" id=\"L616\">\t\t\t\tthrow new IllegalArgumentException(&quot;Must have same number of columns but &quot;</span>\r\n\t\t\t\t\t\t+ &quot;got &quot; + A.entries[0].length + &quot; and &quot; + B.entries[0].length);\r\n\t\t\t}\r\n\r\n<span class=\"nc\" id=\"L620\">\t\t\tresult = new Matrix(A.entries.length+B.entries.length, A.entries[0].length);</span>\r\n\r\n<span class=\"nc bnc\" id=\"L622\" title=\"All 2 branches missed.\">\t\t\tfor(int i = 0; i &lt; result.entries.length; i++) {</span>\r\n<span class=\"nc bnc\" id=\"L623\" title=\"All 2 branches missed.\">\t\t\t\tfor(int j = 0; j &lt; result.entries[0].length; j++) {</span>\r\n<span class=\"nc bnc\" id=\"L624\" title=\"All 2 branches missed.\">\t\t\t\t\tif(i &lt; A.entries.length) { // Then copy from A.entries</span>\r\n<span class=\"nc\" id=\"L625\">\t\t\t\t\t\tresult.entries[i][j] = A.entries[i][j];</span>\r\n\t\t\t\t\t} else { // the copy from B.entries\r\n<span class=\"nc\" id=\"L627\">\t\t\t\t\t\tresult.entries[i][j] = B.entries[i-A.entries.length][j];</span>\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n<span class=\"nc bnc\" id=\"L632\" title=\"All 2 branches missed.\">\t\telse if(axis == 1) { // Stack on cols</span>\r\n<span class=\"nc bnc\" id=\"L633\" title=\"All 2 branches missed.\">\t\t\tif(A.entries.length != B.entries.length) { // Ensure matrices have same number or rows</span>\r\n<span class=\"nc\" id=\"L634\">\t\t\t\tthrow new IllegalArgumentException(&quot;Must have same number of rows but &quot;</span>\r\n\t\t\t\t\t\t+ &quot;got &quot; + A.entries.length + &quot; and &quot; + B.entries.length);\r\n\t\t\t}\r\n\r\n<span class=\"nc\" id=\"L638\">\t\t\tresult = new Matrix(A.entries.length, A.entries[0].length + B.entries[0].length);</span>\r\n\r\n<span class=\"nc bnc\" id=\"L640\" title=\"All 2 branches missed.\">\t\t\tfor(int i = 0; i &lt; result.entries.length; i++) {</span>\r\n<span class=\"nc bnc\" id=\"L641\" title=\"All 2 branches missed.\">\t\t\t\tfor(int j = 0; j &lt; result.entries[0].length; j++) {</span>\r\n<span class=\"nc bnc\" id=\"L642\" title=\"All 2 branches missed.\">\t\t\t\t\tif(j &lt; A.entries[0].length) { // Then copy from A.entries</span>\r\n<span class=\"nc\" id=\"L643\">\t\t\t\t\t\tresult.entries[i][j] = A.entries[i][j];</span>\r\n\t\t\t\t\t} else { // the copy from B.entries\r\n<span class=\"nc\" id=\"L645\">\t\t\t\t\t\tresult.entries[i][j] = B.entries[i][j-A.entries[0].length];</span>\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n<span class=\"nc\" id=\"L651\">\t\t\tthrow new IllegalArgumentException(&quot;axis must be 0 or 1 but got &quot; + axis);</span>\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L654\">\t\treturn result;</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Augments two matrices. This is the same as {@link #stack(Matrix, int) stack(B, 1)}\r\n\t *\r\n\t * @param B - Matrix to augment to this matrix.\r\n\t * @return The matrix B augmented to this matrix.\r\n\t */\r\n\tdefault Matrix augment(Matrix B) {\r\n<span class=\"nc\" id=\"L665\">\t\treturn this.stack(B, 1);</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Computes row-echelon form of matrix. This will be an upper-triangular matrix.&lt;br&gt;\r\n\t *\r\n\t * &lt;pre&gt;\r\n\t * A matrix is in row-echelon form if:\r\n\t *  - The first non-zero element in each row, called the leading entry (also called the pivot), is 1.\r\n\t *  - The pivot of a nonzero row is always strictly to\r\n\t *    the right of the leading coefficient of the row above it.\r\n\t *  - Rows with all zero elements, if any, are below rows having a non-zero element.\r\n\t * &lt;/pre&gt;\r\n\t *\r\n\t * A matrix can be transformed into a row equivalent matrix in row-echelon form using row operations.\r\n\t * This is done using Gaussian (Gauss-Jordan) elimination. &lt;br&gt;&lt;br&gt;\r\n\t *\r\n\t * Also see &lt;code&gt;{@link #rref() rref()}&lt;/code&gt; for reduced row-echelon form.\r\n\t *\r\n\t * @return Row-echelon form of matrix\r\n\t */\r\n\tdefault Matrix ref() {\r\n<span class=\"nc\" id=\"L688\">\t\tMatrix A = ((Matrix) this).copy();</span>\r\n\t\tCNumber m, scale;\r\n\r\n<span class=\"nc\" id=\"L691\">\t\tint pivotRow = 0,</span>\r\n<span class=\"nc\" id=\"L692\">\t\t\t\tpivotCol = 0;</span>\r\n\r\n<span class=\"nc bnc\" id=\"L694\" title=\"All 4 branches missed.\">\t\twhile(pivotRow&lt;A.m &amp;&amp; pivotCol&lt;A.n) {</span>\r\n<span class=\"nc bnc\" id=\"L695\" title=\"All 2 branches missed.\">\t\t\tif(!A.entries[pivotRow][pivotCol].equals(CNumber.ZERO)) { // Then we can make the pivot one.</span>\r\n<span class=\"nc\" id=\"L696\">\t\t\t\tscale = CNumber.divide(CNumber.ONE, A.entries[pivotRow][pivotCol]);</span>\r\n\r\n<span class=\"nc bnc\" id=\"L698\" title=\"All 2 branches missed.\">\t\t\t\tfor(int k=pivotCol; k&lt;A.n; k++) { // scale the whole row</span>\r\n<span class=\"nc\" id=\"L699\">\t\t\t\t\tA.entries[pivotRow][k] = CNumber.multiply(A.entries[pivotRow][k], scale);</span>\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n<span class=\"nc bnc\" id=\"L703\" title=\"All 2 branches missed.\">\t\t\tfor(int i=pivotRow+1; i&lt;A.m; i++) {</span>\r\n<span class=\"nc\" id=\"L704\">\t\t\t\tm = A.entries[i][pivotCol];</span>\r\n\r\n<span class=\"nc bnc\" id=\"L706\" title=\"All 2 branches missed.\">\t\t\t\tfor(int k=pivotCol; k&lt;A.n; k++) {</span>\r\n<span class=\"nc\" id=\"L707\">\t\t\t\t\tA.entries[i][k] = CNumber.subtract(A.entries[i][k],</span>\r\n<span class=\"nc\" id=\"L708\">\t\t\t\t\t\t\tCNumber.multiply(A.entries[pivotRow][k], m));</span>\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t * This insures the entries to the left of the pivot are zero.\r\n\t\t\t\t * They may be a very small (in absolute value) non-zero value\r\n\t\t\t\t * resulting from errors in floating point arithmetic.\r\n\t\t\t\t */\r\n<span class=\"nc\" id=\"L717\">\t\t\t\tA.entries[i][pivotCol] = CNumber.ZERO;</span>\r\n\t\t\t}\r\n\r\n<span class=\"nc\" id=\"L720\">\t\t\tpivotRow++;</span>\r\n<span class=\"nc\" id=\"L721\">\t\t\tpivotCol++;</span>\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L724\">\t\treturn A;</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Computes reduced row-echelon form of matrix.&lt;br&gt;\r\n\t *\r\n\t * &lt;pre&gt;\r\n\t * A matrix is in reduced row-echelon form if:&lt;br&gt;\r\n\t *  - It is in row-echelon form. This is,\r\n\t *      ~ The first non-zero element in each row, called the leading entry (also called the pivot), is 1.\r\n\t *      ~ The pivot of a nonzero row is always strictly to\r\n\t *        the right of the leading coefficient of the row above it.\r\n\t *      ~ Rows with all zero elements, if any, are below rows having a non-zero element.&lt;br&gt;\r\n\t *  - The pivot in each row is the only non-zero entry in its column.\r\n\t * &lt;/pre&gt;\r\n\t *\r\n\t * A matrix can be transformed into a row eqivalent matrix in reduced row-echelon form using row operations.\r\n\t * This is done using Gaussian (Gauss-Jordan) elimination. &lt;br&gt;&lt;br&gt;\r\n\t *\r\n\t * @param partialPivoting - Falg for use of partial pivoting.\r\n\t * &lt;pre&gt;\r\n\t *  - If true then the rref will be computed using partial pivoting.\r\n\t * \t    ~ This is equivalent to the method {@link #rref() rref()}.\r\n\t *  - If false then the rref will be computed WITHOUT using partial pivoting.\r\n\t * &lt;/pre&gt;\r\n\t * @return\r\n\t */\r\n\tdefault Matrix rref(boolean partialPivoting) {\r\n<span class=\"nc bnc\" id=\"L753\" title=\"All 2 branches missed.\">\t\tif(partialPivoting) return rref();</span>\r\n<span class=\"nc\" id=\"L754\">\t\telse return rrefNoPivot();</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Computes reduced row-echelon form of matrix. This is done using partial pivoting.&lt;br&gt;\r\n\t *\r\n\t * &lt;pre&gt;\r\n\t * A matrix is in reduced row-echelon form if:&lt;br&gt;\r\n\t *  - It is in row-echelon form. This is,\r\n\t *      ~ The first non-zero element in each row, called the leading entry (also called the pivot), is 1.\r\n\t *      ~ The pivot of a nonzero row is always strictly to\r\n\t *        the right of the leading coefficient of the row above it.\r\n\t *      ~ Rows with all zero elements, if any, are below rows having a non-zero element.&lt;br&gt;\r\n\t *  - The pivot in each row is the only non-zero entry in its column.\r\n\t * &lt;/pre&gt;\r\n\t *\r\n\t * A matrix can be transformed into a row eqivalent matrix in reduced row-echelon form using row operations.\r\n\t * This is done using Gaussian (Gauss-Jordan) elimination. &lt;br&gt;&lt;br&gt;\r\n\t *\r\n\t * Also see &lt;code&gt;{@link #ref() ref()}&lt;/code&gt; for row-echelon form.\r\n\t *\r\n\t * @return Row-echelon form of matrix.\r\n\t */\r\n\tdefault Matrix rref() {\r\n<span class=\"nc\" id=\"L779\">\t\tMatrix A = ((Matrix) this).copy();</span>\r\n\t\tCNumber mult, scale, currentMax;\r\n\t\tint maxIndex;\r\n\r\n<span class=\"nc\" id=\"L783\">\t\tint pivotRow = 0,</span>\r\n<span class=\"nc\" id=\"L784\">\t\t\t\tpivotCol = 0;</span>\r\n\r\n<span class=\"nc bnc\" id=\"L786\" title=\"All 4 branches missed.\">\t\twhile(pivotRow&lt;A.m &amp;&amp; pivotCol&lt;A.n) {</span>\r\n<span class=\"nc\" id=\"L787\">\t\t\tmaxIndex = pivotRow;</span>\r\n<span class=\"nc\" id=\"L788\">\t\t\tcurrentMax = A.entries[pivotRow][pivotCol];</span>\r\n\r\n<span class=\"nc bnc\" id=\"L790\" title=\"All 2 branches missed.\">\t\t\tfor(int i=pivotRow; i&lt;A.m; i++) { // Find the maximum entry in the pivot column (at or below the pivot ).</span>\r\n<span class=\"nc bnc\" id=\"L791\" title=\"All 2 branches missed.\">\t\t\t\tif(A.entries[i][pivotCol].nearZero(1.0E-12)) {</span>\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t * If a number is very close to zero, assume it is supposed to be zero.\r\n\t\t\t\t\t * This protects against trying to manipulate a column which\r\n\t\t\t\t\t * is already in the correct form.\r\n\t\t\t\t\t */\r\n<span class=\"nc\" id=\"L798\">\t\t\t\t\tA.entries[i][pivotCol] = CNumber.ZERO;</span>\r\n\t\t\t\t}\r\n<span class=\"nc bnc\" id=\"L800\" title=\"All 2 branches missed.\">\t\t\t\telse if(A.entries[i][pivotCol].compareTo(currentMax) &gt; 0) {</span>\r\n<span class=\"nc\" id=\"L801\">\t\t\t\t\tmaxIndex = i;</span>\r\n<span class=\"nc\" id=\"L802\">\t\t\t\t\tcurrentMax = A.entries[i][pivotCol];</span>\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n<span class=\"nc bnc\" id=\"L806\" title=\"All 2 branches missed.\">\t\t\tif(!A.entries[maxIndex][pivotCol].equals(CNumber.ZERO)) { // Check that the maximum absolute value is not zero.</span>\r\n<span class=\"nc bnc\" id=\"L807\" title=\"All 2 branches missed.\">\t\t\t\tif(pivotRow != maxIndex) {</span>\r\n<span class=\"nc\" id=\"L808\">\t\t\t\t\tA = A.swapRows(pivotRow, maxIndex); // Make the row with the largest value in the pivot column the pivot for this row.</span>\r\n\t\t\t\t}\r\n\r\n<span class=\"nc\" id=\"L811\">\t\t\t\tscale = CNumber.divide(CNumber.ONE, A.entries[pivotRow][pivotCol]);</span>\r\n\r\n<span class=\"nc bnc\" id=\"L813\" title=\"All 2 branches missed.\">\t\t\t\tfor(int k=pivotCol; k&lt;A.n; k++) { // scale the whole row so that the pivot is 1</span>\r\n<span class=\"nc\" id=\"L814\">\t\t\t\t\tA.entries[pivotRow][k] = CNumber.multiply(A.entries[pivotRow][k], scale);</span>\r\n\t\t\t\t}\r\n\r\n<span class=\"nc bnc\" id=\"L817\" title=\"All 2 branches missed.\">\t\t\t\tfor(int i=0; i&lt;A.m; i++) {</span>\r\n<span class=\"nc\" id=\"L818\">\t\t\t\t\tmult = A.entries[i][pivotCol];</span>\r\n\r\n<span class=\"nc bnc\" id=\"L820\" title=\"All 2 branches missed.\">\t\t\t\t\tif(pivotRow != i) {</span>\r\n<span class=\"nc\" id=\"L821\">\t\t\t\t\t\tA.entries[i][pivotCol] = CNumber.ZERO;</span>\r\n\r\n<span class=\"nc bnc\" id=\"L823\" title=\"All 2 branches missed.\">\t\t\t\t\t\tfor(int k=pivotCol+1; k&lt;A.n; k++) {</span>\r\n\r\n<span class=\"nc\" id=\"L825\">\t\t\t\t\t\t\tCNumber value = CNumber.subtract(A.entries[i][k],</span>\r\n<span class=\"nc\" id=\"L826\">\t\t\t\t\t\t\t\t\tCNumber.multiply(A.entries[pivotRow][k], mult));</span>\r\n<span class=\"nc\" id=\"L827\">\t\t\t\t\t\t\tA.entries[i][k] = value;</span>\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n<span class=\"nc\" id=\"L833\">\t\t\t\tpivotRow++;</span>\r\n<span class=\"nc\" id=\"L834\">\t\t\t\tpivotCol++;</span>\r\n\t\t\t}\r\n\t\t\telse { // Then we do not have a pivot for this column (i.e. the column is all zeros).\r\n<span class=\"nc\" id=\"L837\">\t\t\t\tpivotCol++;</span>\r\n\t\t\t}\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L841\">\t\treturn A;</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Computes reduced row-echelon form of matrix.\r\n\t * This is done WITHOUT using partial pivoting.&lt;br&gt;\r\n\t *\r\n\t * &lt;pre&gt;\r\n\t * A matrix is in reduced row-echelon form if:&lt;br&gt;\r\n\t *  - It is in row-echelon form. This is,\r\n\t *      ~ The first non-zero element in each row, called the leading entry (also called the pivot), is 1.\r\n\t *      ~ The pivot of a nonzero row is always strictly to\r\n\t *        the right of the leading coefficient of the row above it.\r\n\t *      ~ Rows with all zero elements, if any, are below rows having a non-zero element.&lt;br&gt;\r\n\t *  - The pivot in each row is the only non-zero entry in its column.\r\n\t * &lt;/pre&gt;\r\n\t *\r\n\t * A matrix can be transformed into a row eqivalent matrix in reduced row-echelon form using row operations.\r\n\t * This is done using Gaussian (Gauss-Jordan) elimination. &lt;br&gt;&lt;br&gt;\r\n\t *\r\n\t * Also see &lt;code&gt;{@link #ref() ref()}&lt;/code&gt; for row-echelon form.\r\n\t *\r\n\t * @return Row-echelon form of matrix.\r\n\t */\r\n\tdefault Matrix rrefNoPivot() {\r\n<span class=\"nc\" id=\"L867\">\t\tMatrix A = ((Matrix) this).copy();</span>\r\n\t\tCNumber m, scale;\r\n\r\n<span class=\"nc\" id=\"L870\">\t\tint pivotRow = 0,</span>\r\n<span class=\"nc\" id=\"L871\">\t\t\t\tpivotCol = 0;</span>\r\n\r\n<span class=\"nc bnc\" id=\"L873\" title=\"All 4 branches missed.\">\t\twhile(pivotRow&lt;A.m &amp;&amp; pivotCol&lt;A.n) {</span>\r\n<span class=\"nc bnc\" id=\"L874\" title=\"All 2 branches missed.\">\t\t\tif(!A.entries[pivotRow][pivotCol].equals(CNumber.ZERO)) {</span>\r\n<span class=\"nc\" id=\"L875\">\t\t\t\tscale = CNumber.divide(CNumber.ONE, A.entries[pivotRow][pivotCol]);</span>\r\n\r\n<span class=\"nc bnc\" id=\"L877\" title=\"All 2 branches missed.\">\t\t\t\tfor(int k=pivotCol; k&lt;A.n; k++) { // scale the whole row</span>\r\n<span class=\"nc\" id=\"L878\">\t\t\t\t\tA.entries[pivotRow][k] = CNumber.multiply(A.entries[pivotRow][k], scale);</span>\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n<span class=\"nc bnc\" id=\"L882\" title=\"All 2 branches missed.\">\t\t\tfor(int i=0; i&lt;A.m; i++) {</span>\r\n<span class=\"nc\" id=\"L883\">\t\t\t\tm = A.entries[i][pivotCol];</span>\r\n\r\n<span class=\"nc bnc\" id=\"L885\" title=\"All 2 branches missed.\">\t\t\t\tif(pivotRow != i) {</span>\r\n<span class=\"nc bnc\" id=\"L886\" title=\"All 2 branches missed.\">\t\t\t\t\tfor(int k=pivotCol; k&lt;A.n; k++) {</span>\r\n<span class=\"nc\" id=\"L887\">\t\t\t\t\t\tA.entries[i][k] = CNumber.subtract(A.entries[i][k],</span>\r\n<span class=\"nc\" id=\"L888\">\t\t\t\t\t\t\t\tCNumber.multiply(A.entries[pivotRow][k], m));</span>\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n<span class=\"nc\" id=\"L893\">\t\t\tpivotRow++;</span>\r\n<span class=\"nc\" id=\"L894\">\t\t\tpivotCol++;</span>\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L897\">\t\treturn A;</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Computes reduced extended row-echelon form of matrix. That is, a Matrix with\r\n\t * the same number of rows is {@link #augment(Matrix) augmented} with this matrix and\r\n\t * then this augmented matrix is put into {@link #rref() reduced row-echelon form}.\r\n\t *\r\n\t * @return Returns extended row-echelon form of this matrix.\r\n\t */\r\n\tdefault Matrix erref() {\r\n<span class=\"nc\" id=\"L909\">\t\tMatrix A = (Matrix) this;</span>\r\n<span class=\"nc\" id=\"L910\">\t\tMatrix I = Matrix.I(A.m);</span>\r\n<span class=\"nc\" id=\"L911\">\t\tMatrix Aug = A.augment(I);</span>\r\n\r\n<span class=\"nc\" id=\"L913\">\t\treturn Aug.rref();</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Computes the trace of square matrix. That is, the sum\r\n\t * of the entries along the principle diagonal.\r\n\t * &lt;br&gt;&lt;br&gt;\r\n\t * This method is the same as {@link #tr() tr()}.\r\n\t *\r\n\t * @return trace of this matrix.\r\n\t */\r\n\tdefault CNumber trace() {\r\n<span class=\"nc\" id=\"L926\">\t\tMatrix A = (Matrix) this;</span>\r\n\r\n<span class=\"nc bnc\" id=\"L928\" title=\"All 2 branches missed.\">\t\tif(!A.isSquare()) {</span>\r\n<span class=\"nc\" id=\"L929\">\t\t\tthrow new IllegalArgumentException(&quot;Expecting matrix to be square but got &quot; + A.shape);</span>\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L932\">\t\tCNumber result = A.entries[0][0];</span>\r\n\r\n<span class=\"nc bnc\" id=\"L934\" title=\"All 2 branches missed.\">\t\tfor(int i = 1; i &lt; A.n; i++) {</span>\r\n<span class=\"nc\" id=\"L935\">\t\t\tresult = CNumber.add(result, A.entries[i][i]);</span>\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L938\">\t\treturn result;</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Computes the trace of a square matrix. That is, the sum\r\n\t * of the entries along the principle diagonal.\r\n\t * &lt;br&gt;&lt;br&gt;\r\n\t * This method is the same as {@link #trace() trace()}.\r\n\t *\r\n\t * @return trace of this matrix.\r\n\t */\r\n\tdefault CNumber tr() {\r\n<span class=\"nc\" id=\"L951\">\t\treturn this.trace();</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * The rank of a matrix A is the dimension of the vector space generated (or spanned) by its columns.\r\n\t * This is always an integer.\r\n\t * This corresponds to the maximal number of linearly independent columns of A.\r\n\t * This, in turn, is identical to the dimension of the vector space spanned by its rows\r\n\t *\r\n\t * @return Returns the rank of this matrix.\r\n\t */\r\n\t// TODO: Should be switched to rank revealing QR decomposition as it is more numerically stable.\r\n\tdefault int rank() {\r\n<span class=\"nc\" id=\"L965\">\t\tMatrix A = (Matrix) this;</span>\r\n<span class=\"nc\" id=\"L966\">\t\tMatrix rrefA = A.rref();</span>\r\n<span class=\"nc\" id=\"L967\">\t\tint rank = A.m;</span>\r\n\r\n<span class=\"nc bnc\" id=\"L969\" title=\"All 2 branches missed.\">\t\tfor(int i=rrefA.m-1; i&gt;=0; i--) {</span>\r\n<span class=\"nc bnc\" id=\"L970\" title=\"All 2 branches missed.\">\t\t\tif(rrefA.getRowAsVector(i).isZero()) {</span>\r\n<span class=\"nc\" id=\"L971\">\t\t\t\trank--;</span>\r\n\t\t\t} else {\r\n\t\t\t\t// Then we have no more zero rows as rrefA is in reduced row echelon form.\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L978\">\t\treturn rank;</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * The rank of a matrix A is the dimension of the vector space spanned by the nullspace of this matrix.\r\n\t * The nullify is always an integer.\r\n\t *\r\n\t * @return Returns the rank of this matrix.\r\n\t */\r\n\tdefault int nullity() {\r\n<span class=\"nc\" id=\"L989\">\t\tint rank = this.rank();</span>\r\n<span class=\"nc\" id=\"L990\">\t\treturn ((Matrix) this).m - rank;</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Computes the matrix inverse if it exists. This is done by first computing the {@link linalg.Decompose#QR(Matrix) QR decomposition}\r\n\t * The inverse of a Matrix A is A&lt;sup&gt;-1&lt;/sup&gt; satisfying AA&lt;sup&gt;-1&lt;/sup&gt;=I where I is the appropriately sized Identity matrix.\r\n\t *\r\n\t * @return The inverse of this matrix.\r\n\t */\r\n\tdefault Matrix inverse() {\r\n<span class=\"nc\" id=\"L1001\">\t\tMatrix A = (Matrix) this;</span>\r\n\r\n<span class=\"nc bnc\" id=\"L1003\" title=\"All 2 branches missed.\">\t\tif(!A.isSingular()) {</span>\r\n<span class=\"nc\" id=\"L1004\">\t\t\tthrow new IllegalArgumentException(&quot;Matrix is singular.&quot;);</span>\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L1007\">\t\tMatrix[] QR = Decompose.QR(A); // Compute the QR decomposition of A. This will be used to compute the inverse.</span>\r\n<span class=\"nc\" id=\"L1008\">\t\tCNumber detR = CNumber.ONE;</span>\r\n\r\n<span class=\"nc bnc\" id=\"L1010\" title=\"All 2 branches missed.\">\t\tfor(int i = 0; i&lt;QR[1].n; i++) { // Computing the determinant of R</span>\r\n<span class=\"nc\" id=\"L1011\">\t\t\tdetR = CNumber.multiply(detR, QR[1].entries[i][i]);</span>\r\n\t\t}\r\n\r\n<span class=\"nc bnc\" id=\"L1014\" title=\"All 2 branches missed.\">\t\tif(CNumber.round(detR, 10).re == 0) {</span>\r\n\t\t\t/* Then we know the matrix is singular.\r\n\t\t\t * We know this by exploiting properties of the orthogonal matrix Q and the upper triangular matrix R.\r\n\t\t\t * The determinant of an orthogonal matrix is either -1 or 1. The determinant of an upper triangular matrix R is the product\r\n\t\t\t * of the diagonals. Since A=QR det(A) = det(QR) = det(Q)*det(R). So if the determinant of R is zero, then the matrix A must be singular.\r\n\t\t\t *\r\n\t\t\t * The isSingular() method is not used here because it computes the QR decomposition to check if the matrix is singular. However, we have already done that,\r\n\t\t\t * so it would be redundant to call the isSingular() method and recompute the QR decomposition again.\r\n\t\t\t */\r\n<span class=\"nc\" id=\"L1023\">\t\t\tthrow new IllegalArgumentException(&quot;Matrix is singular, thus can not be inverted.&quot;);</span>\r\n\t\t}\r\n\r\n\t\t// Here we compute and return A^-1 = (R^-1)*(Q^-1)\r\n<span class=\"nc\" id=\"L1027\">\t\treturn inverseTriU(QR[1]).mult(QR[0].H());</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Computes the matrix inverse if it exists. This is done by first computing the {@link linalg.Decompose#QR(Matrix) QR decomposition}\r\n\t * The inverse of a Matrix A is A&lt;sup&gt;-1&lt;/sup&gt; satisfying AA&lt;sup&gt;-1&lt;/sup&gt;=I where I is the appropriately sized Identity matrix.\r\n\t *\r\n\t * @return The inverse of this matrix.\r\n\t */\r\n\tdefault Matrix inv() {\r\n<span class=\"nc\" id=\"L1038\">\t\treturn this.inverse();</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Helper method to invert an upper triangular matrix. &lt;br&gt;\r\n\t * We can compute the inverse of an n-by-n upper triangular matrix U by solving the n systems...&lt;br&gt;&lt;br&gt;\r\n\t *\r\n\t * Ux=I&lt;sub&gt;i&lt;/sub&gt;&lt;br&gt;\r\n\t *\r\n\t * where 1&lt;=i&lt;=n, I is the n-by-n identity matrix, I&lt;sub&gt;i&lt;/sub&gt; is the ith column of I.&lt;br&gt;&lt;br&gt;\r\n\t *\r\n\t * Each solution becomes a column in the inverse &lt;sup&gt;-1&lt;/sub&gt;.\r\n\t * Because U is upper triangular, we can solve these n systems using backsolve.\r\n\t *\r\n\t * @param U - U is a square upper triangular matrix\r\n\t * @return Returns the inverse of U, denoted U&lt;sup&gt;-1&lt;/sub&gt;\r\n\t */\r\n\tstatic Matrix inverseTriU(Matrix U) {\r\n<span class=\"nc\" id=\"L1057\">\t\tMatrix Uinv = new Matrix(U.m, U.m);</span>\r\n<span class=\"nc\" id=\"L1058\">\t\tMatrix I = Matrix.I(U.m);</span>\r\n\r\n<span class=\"nc bnc\" id=\"L1060\" title=\"All 2 branches missed.\">\t\tif(!U.isTriU()) {</span>\r\n<span class=\"nc\" id=\"L1061\">\t\t\tthrow new IllegalArgumentException(&quot;U must be upper triangular.&quot;);</span>\r\n\t\t}\r\n\r\n<span class=\"nc bnc\" id=\"L1064\" title=\"All 2 branches missed.\">\t\tfor(int i=0; i&lt;U.m; i++)  {</span>\r\n\t\t\t// U is upper triangular, so to solve the system we simply need to use back-solve function.\r\n<span class=\"nc\" id=\"L1066\">\t\t\tUinv.setCol(Solvers.backSolve(U, I.getColAsVector(i)), i);</span>\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L1069\">\t\treturn Uinv;</span>\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates a new matrix that contains the reciprocals of this matrix\r\n\t *\r\n\t * @return new matrix that contains the reciprocals of this matrix\r\n\t */\r\n\tdefault Matrix recep() {\r\n<span class=\"nc\" id=\"L1079\">\t\tMatrix A = new Matrix((Matrix) this).copy();</span>\r\n\r\n<span class=\"nc bnc\" id=\"L1081\" title=\"All 2 branches missed.\">\t\tfor(int i=0; i&lt;A.m; i++) {</span>\r\n<span class=\"nc bnc\" id=\"L1082\" title=\"All 2 branches missed.\">\t\t\tfor(int j=0; j&lt;A.n; j++) {</span>\r\n<span class=\"nc\" id=\"L1083\">\t\t\t\tA.entries[i][j] = CNumber.inv(A.entries[i][j]);</span>\r\n\t\t\t}\r\n\t\t}\r\n\r\n<span class=\"nc\" id=\"L1087\">\t\treturn A;</span>\r\n\t}\r\n}\r\n\r\n</pre><div class=\"footer\"><span class=\"right\">Created with <a href=\"http://www.jacoco.org/jacoco\">JaCoCo</a> 0.8.7.202105040129</span></div></body></html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/site/jacoco/linalg/MatrixOperations.java.html b/target/site/jacoco/linalg/MatrixOperations.java.html
--- a/target/site/jacoco/linalg/MatrixOperations.java.html	(revision 48dc0b3e0abf8d6b081fabfbe0061d32ae01ed50)
+++ b/target/site/jacoco/linalg/MatrixOperations.java.html	(date 1649895261237)
@@ -367,6 +367,69 @@
 	}
 
 
+	/**
+	 * Sums the columns of this matrix. If this matrix is an m-by-n matrix, then
+	 * @return Given an m-by-n matrix, returns an m-by-1 matrix.
+	 */
+	default Matrix sumCols() {
+<span class="nc" id="L375">		Matrix A = (Matrix) this;</span>
+<span class="nc" id="L376">		Matrix colSums = new Matrix(A.m, 1);</span>
+
+<span class="nc bnc" id="L378" title="All 2 branches missed.">		for(int i=0; i&lt;A.m; i++) {</span>
+<span class="nc bnc" id="L379" title="All 2 branches missed.">			for(int j=0; j&lt;A.n; j++) {</span>
+<span class="nc" id="L380">				colSums.entries[i][0] = CNumber.add(colSums.entries[i][0], A.entries[i][j]);</span>
+			}
+		}
+
+<span class="nc" id="L384">		return colSums;</span>
+	}
+
+
+	/**
+	 * Sums the rows of this matrix. If this matrix is an m-by-n matrix, then
+	 * @return Given an m-by-n matrix, returns an 1-by-n matrix
+	 */
+	default Matrix sumRows() {
+<span class="nc" id="L393">		Matrix A = (Matrix) this;</span>
+<span class="nc" id="L394">		Matrix rowSums = new Matrix(1, A.n);</span>
+
+<span class="nc bnc" id="L396" title="All 2 branches missed.">		for(int i=0; i&lt;A.m; i++) {</span>
+<span class="nc bnc" id="L397" title="All 2 branches missed.">			for(int j=0; j&lt;A.n; j++) {</span>
+<span class="nc" id="L398">				rowSums.entries[0][j] = CNumber.add(rowSums.entries[0][j], A.entries[i][j]);</span>
+			}
+		}
+
+<span class="nc" id="L402">		return rowSums;</span>
+	}
+
+
+	/**
+	 * Sums a column vector to each column of this matrix.
+	 *
+	 * @param B A matrix which is a column vector.
+	 * @return If this matri
+	 */
+	default Matrix sumToEachCol(Matrix B) {
+<span class="nc" id="L413">		Matrix A = (Matrix) this;</span>
+<span class="nc" id="L414">		CNumber[][] sum = new CNumber[A.m][A.n];</span>
+
+<span class="nc bnc" id="L416" title="All 2 branches missed.">		if(A.m != B.m) {</span>
+<span class="nc" id="L417">			throw new IllegalArgumentException(&quot;Matrices must have the same number of rows but got &quot; + A.m + &quot; and &quot; + A.n);</span>
+		}
+<span class="nc bnc" id="L419" title="All 2 branches missed.">		if(B.n==1) {</span>
+<span class="nc" id="L420">			throw new IllegalArgumentException(&quot;Argument must be a column vector but got shape &quot; + B.shape);</span>
+		}
+
+<span class="nc bnc" id="L423" title="All 2 branches missed.">		for(int i=0; i&lt;A.m; i++) {</span>
+<span class="nc bnc" id="L424" title="All 2 branches missed.">			for(int j=0; j&lt;A.n; j++) {</span>
+<span class="nc" id="L425">				sum[i][j] = CNumber.add(sum[i][j], B.entries[i][0]);</span>
+			}
+		}
+
+<span class="nc" id="L429">		return new Matrix(sum);</span>
+	}
+
+
 	/**
 	 * Computes element wise square root of the matrix. All square roots are the positive root or, in
 	 * the case of complex entries, the root with positive real part.
@@ -374,16 +437,16 @@
 	 * @return The element-wise square root of this matrix.
 	 */
 	default Matrix sqrt() {
-<span class="nc" id="L377">		Matrix A = (Matrix) this;</span>
-<span class="nc" id="L378">		CNumber[][] root = new CNumber[A.m][A.n];</span>
+<span class="nc" id="L440">		Matrix A = (Matrix) this;</span>
+<span class="nc" id="L441">		CNumber[][] root = new CNumber[A.m][A.n];</span>
 
-<span class="nc bnc" id="L380" title="All 2 branches missed.">		for(int i=0; i&lt;A.m; i++) {</span>
-<span class="nc bnc" id="L381" title="All 2 branches missed.">			for(int j=0; j&lt;A.n; j++) {</span>
-<span class="nc" id="L382">				root[i][j] = CNumber.sqrt(A.entries[i][j]);</span>
+<span class="nc bnc" id="L443" title="All 2 branches missed.">		for(int i=0; i&lt;A.m; i++) {</span>
+<span class="nc bnc" id="L444" title="All 2 branches missed.">			for(int j=0; j&lt;A.n; j++) {</span>
+<span class="nc" id="L445">				root[i][j] = CNumber.sqrt(A.entries[i][j]);</span>
 			}
 		}
 
-<span class="nc" id="L386">		return new Matrix(root);</span>
+<span class="nc" id="L449">		return new Matrix(root);</span>
 	}
 
 
@@ -395,16 +458,16 @@
 	 * @return - element-wise absolute value of matrix.
 	 */
 	default Matrix abs() {
-<span class="nc" id="L398">		Matrix A = (Matrix) this;</span>
-<span class="nc" id="L399">		CNumber[][] abs = new CNumber[A.m][A.n];</span>
+<span class="nc" id="L461">		Matrix A = (Matrix) this;</span>
+<span class="nc" id="L462">		CNumber[][] abs = new CNumber[A.m][A.n];</span>
 
-<span class="nc bnc" id="L401" title="All 2 branches missed.">		for(int i=0; i&lt;A.m; i++) {</span>
-<span class="nc bnc" id="L402" title="All 2 branches missed.">			for(int j=0; j&lt;A.n; j++) {</span>
-<span class="nc" id="L403">				abs[i][j] = CNumber.abs(A.entries[i][j]);</span>
+<span class="nc bnc" id="L464" title="All 2 branches missed.">		for(int i=0; i&lt;A.m; i++) {</span>
+<span class="nc bnc" id="L465" title="All 2 branches missed.">			for(int j=0; j&lt;A.n; j++) {</span>
+<span class="nc" id="L466">				abs[i][j] = CNumber.abs(A.entries[i][j]);</span>
 			}
 		}
 
-<span class="nc" id="L407">		return new Matrix(abs);</span>
+<span class="nc" id="L470">		return new Matrix(abs);</span>
 	}
 
 
@@ -414,7 +477,7 @@
 	 * @return transpose of matrix
 	 */
 	default Matrix transpose() {
-<span class="nc" id="L417">		return this.T();</span>
+<span class="nc" id="L480">		return this.T();</span>
 	}
 
 
@@ -425,24 +488,24 @@
 	 * @return transpose of matrix
 	 */
 	default Matrix T() {
-<span class="nc" id="L428">		Matrix A = (Matrix) this;</span>
-<span class="nc" id="L429">		CNumber[][] At = new CNumber[A.n][A.m];</span>
+<span class="nc" id="L491">		Matrix A = (Matrix) this;</span>
+<span class="nc" id="L492">		CNumber[][] At = new CNumber[A.n][A.m];</span>
 
-<span class="nc" id="L431">		final int BLOCK_SIZE = 16;</span>
+<span class="nc" id="L494">		final int BLOCK_SIZE = 16;</span>
 
 		// Compute transpose using blocked algorithm
-<span class="nc bnc" id="L434" title="All 2 branches missed.">		for(int i = 0; i &lt; A.m; i += BLOCK_SIZE) {</span>
-<span class="nc bnc" id="L435" title="All 2 branches missed.">			for (int j = 0; j &lt; A.n; j += BLOCK_SIZE) {</span>
+<span class="nc bnc" id="L497" title="All 2 branches missed.">		for(int i = 0; i &lt; A.m; i += BLOCK_SIZE) {</span>
+<span class="nc bnc" id="L498" title="All 2 branches missed.">			for (int j = 0; j &lt; A.n; j += BLOCK_SIZE) {</span>
 				// transpose the block beginning at [i,j]
-<span class="nc bnc" id="L437" title="All 4 branches missed.">				for (int k = i; k &lt; i + BLOCK_SIZE &amp;&amp; k &lt; A.m; ++k) {</span>
-<span class="nc bnc" id="L438" title="All 4 branches missed.">					for (int l = j; l &lt; j + BLOCK_SIZE &amp;&amp; l &lt; A.n; ++l) {</span>
-<span class="nc" id="L439">						At[l][k] = A.entries[k][l];</span>
+<span class="nc bnc" id="L500" title="All 4 branches missed.">				for (int k = i; k &lt; i + BLOCK_SIZE &amp;&amp; k &lt; A.m; ++k) {</span>
+<span class="nc bnc" id="L501" title="All 4 branches missed.">					for (int l = j; l &lt; j + BLOCK_SIZE &amp;&amp; l &lt; A.n; ++l) {</span>
+<span class="nc" id="L502">						At[l][k] = A.entries[k][l];</span>
 					}
 				}
 			}
 		}
 
-<span class="nc" id="L445">		return new Matrix(At);</span>
+<span class="nc" id="L508">		return new Matrix(At);</span>
 	}
 
 
@@ -452,16 +515,16 @@
 	 * @return Conjugate of matrix
 	 */
 	default Matrix conjugate() {
-<span class="nc" id="L455">		Matrix A = (Matrix) this;</span>
-<span class="nc" id="L456">		CNumber[][] Ac = new CNumber[A.m][A.n];</span>
+<span class="nc" id="L518">		Matrix A = (Matrix) this;</span>
+<span class="nc" id="L519">		CNumber[][] Ac = new CNumber[A.m][A.n];</span>
 
-<span class="nc bnc" id="L458" title="All 2 branches missed.">		for(int i = 0; i &lt; A.m; i++) {</span>
-<span class="nc bnc" id="L459" title="All 2 branches missed.">			for(int j = 0; j &lt; A.n; j++) {</span>
-<span class="nc" id="L460">				Ac[i][j] = CNumber.conjugate(A.entries[i][j]);</span>
+<span class="nc bnc" id="L521" title="All 2 branches missed.">		for(int i = 0; i &lt; A.m; i++) {</span>
+<span class="nc bnc" id="L522" title="All 2 branches missed.">			for(int j = 0; j &lt; A.n; j++) {</span>
+<span class="nc" id="L523">				Ac[i][j] = CNumber.conjugate(A.entries[i][j]);</span>
 			}
 		}
 
-<span class="nc" id="L464">		return new Matrix(Ac);</span>
+<span class="nc" id="L527">		return new Matrix(Ac);</span>
 	}
 
 
@@ -473,7 +536,7 @@
 	 * @return The conjugate transpose of this matrix.
 	 */
 	default Matrix conjT() {
-<span class="nc" id="L476">		return this.conjugate().T();</span>
+<span class="nc" id="L539">		return this.conjugate().T();</span>
 	}
 
 
@@ -485,7 +548,7 @@
 	 * @return adjoint of matrix.
 	 */
 	default Matrix hermAdjoint() {
-<span class="nc" id="L488">		return this.conjugate().T();</span>
+<span class="nc" id="L551">		return this.conjugate().T();</span>
 	}
 
 
@@ -497,7 +560,7 @@
 	 * @return adjoint of matrix.
 	 */
 	default Matrix H() {
-<span class="nc" id="L500">		return this.conjugate().T();</span>
+<span class="nc" id="L563">		return this.conjugate().T();</span>
 	}
 
 
@@ -509,31 +572,31 @@
 	 * @return determinant of matrix A
 	 */
 	static CNumber detRec(Matrix A) {
-<span class="nc" id="L512">		CNumber value = CNumber.ZERO;</span>
+<span class="nc" id="L575">		CNumber value = CNumber.ZERO;</span>
 
-<span class="nc bnc" id="L514" title="All 4 branches missed.">		if(A.m == 1 &amp;&amp; A.n == 1) { // Then we simply have a 1x1 matrix.</span>
-<span class="nc" id="L515">			return A.entries[0][0];</span>
+<span class="nc bnc" id="L577" title="All 4 branches missed.">		if(A.m == 1 &amp;&amp; A.n == 1) { // Then we simply have a 1x1 matrix.</span>
+<span class="nc" id="L578">			return A.entries[0][0];</span>
 		}
-<span class="nc bnc" id="L517" title="All 4 branches missed.">		else if(A.m == 2 &amp;&amp; A.n == 2) { // Then we have a 2x2 matrix, which is the base case</span>
-<span class="nc" id="L518">			CNumber a = A.entries[0][0];</span>
-<span class="nc" id="L519">			CNumber b = A.entries[0][1];</span>
-<span class="nc" id="L520">			CNumber c = A.entries[1][0];</span>
-<span class="nc" id="L521">			CNumber d = A.entries[1][1];</span>
+<span class="nc bnc" id="L580" title="All 4 branches missed.">		else if(A.m == 2 &amp;&amp; A.n == 2) { // Then we have a 2x2 matrix, which is the base case</span>
+<span class="nc" id="L581">			CNumber a = A.entries[0][0];</span>
+<span class="nc" id="L582">			CNumber b = A.entries[0][1];</span>
+<span class="nc" id="L583">			CNumber c = A.entries[1][0];</span>
+<span class="nc" id="L584">			CNumber d = A.entries[1][1];</span>
 
-<span class="nc" id="L523">			value = CNumber.subtract(CNumber.multiply(a, d), CNumber.multiply(b, c));</span>
-<span class="nc" id="L524">		}</span>
+<span class="nc" id="L586">			value = CNumber.subtract(CNumber.multiply(a, d), CNumber.multiply(b, c));</span>
+<span class="nc" id="L587">		}</span>
 		else {
-<span class="nc bnc" id="L526" title="All 2 branches missed.">			for(int j = 0; j &lt; A.n; j++) {</span>
-<span class="nc" id="L527">				Matrix newA = A.removeRow(0).removeCol(j);</span>
+<span class="nc bnc" id="L589" title="All 2 branches missed.">			for(int j = 0; j &lt; A.n; j++) {</span>
+<span class="nc" id="L590">				Matrix newA = A.removeRow(0).removeCol(j);</span>
 
-<span class="nc" id="L529">				CNumber num = new CNumber(Math.pow(-1, j));</span>
-<span class="nc" id="L530">				num = CNumber.multiply(num, A.entries[0][j]);</span>
+<span class="nc" id="L592">				CNumber num = new CNumber(Math.pow(-1, j));</span>
+<span class="nc" id="L593">				num = CNumber.multiply(num, A.entries[0][j]);</span>
 
-<span class="nc" id="L532">				value = CNumber.add(value, CNumber.multiply(detRec(newA), num));</span>
+<span class="nc" id="L595">				value = CNumber.add(value, CNumber.multiply(detRec(newA), num));</span>
 			}
 		}
 
-<span class="nc" id="L536">		return value;</span>
+<span class="nc" id="L599">		return value;</span>
 	}
 
 
@@ -544,16 +607,16 @@
 	 * @return determinant of matrix A
 	 */
 	static CNumber detQR(Matrix A) {
-<span class="nc" id="L547">		CNumber detQ, detR = CNumber.ONE;</span>
-<span class="nc" id="L548">		Matrix[] QRh = Decompose.QR(A, true);</span>
+<span class="nc" id="L610">		CNumber detQ, detR = CNumber.ONE;</span>
+<span class="nc" id="L611">		Matrix[] QRh = Decompose.QR(A, true);</span>
 
-<span class="nc" id="L550">		detQ = new CNumber(Math.pow(-1, QRh[2].entries[0][0].getReal()));</span>
+<span class="nc" id="L613">		detQ = new CNumber(Math.pow(-1, QRh[2].entries[0][0].getReal()));</span>
 
-<span class="nc bnc" id="L552" title="All 2 branches missed.">		for(int i = 0; i&lt;QRh[1].n; i++) {</span>
-<span class="nc" id="L553">			detR = CNumber.multiply(detR, QRh[1].entries[i][i]);</span>
+<span class="nc bnc" id="L615" title="All 2 branches missed.">		for(int i = 0; i&lt;QRh[1].n; i++) {</span>
+<span class="nc" id="L616">			detR = CNumber.multiply(detR, QRh[1].entries[i][i]);</span>
 		}
 
-<span class="nc" id="L556">		return CNumber.multiply(detR, detQ);</span>
+<span class="nc" id="L619">		return CNumber.multiply(detR, detQ);</span>
 	}
 
 
@@ -565,22 +628,22 @@
 	 * @return determinant of matrix.
 	 */
 	default CNumber det() {
-<span class="nc" id="L568">		Matrix A = (Matrix) this;</span>
+<span class="nc" id="L631">		Matrix A = (Matrix) this;</span>
 
-<span class="nc bnc" id="L570" title="All 2 branches missed.">		if(!A.isSquare()) {</span>
-<span class="nc" id="L571">			throw new IllegalArgumentException(&quot;Matrix must be square but got shape &quot; + A.shape);</span>
+<span class="nc bnc" id="L633" title="All 2 branches missed.">		if(!A.isSquare()) {</span>
+<span class="nc" id="L634">			throw new IllegalArgumentException(&quot;Matrix must be square but got shape &quot; + A.shape);</span>
 		}
 
-<span class="nc bnc" id="L574" title="All 4 branches missed.">		if(A.m == 2 &amp;&amp; A.n == 2) { // Then we have a 2x2 matrix, which we can directly compute</span>
-<span class="nc" id="L575">			CNumber a = A.entries[0][0];</span>
-<span class="nc" id="L576">			CNumber b = A.entries[0][1];</span>
-<span class="nc" id="L577">			CNumber c = A.entries[1][0];</span>
-<span class="nc" id="L578">			CNumber d = A.entries[1][1];</span>
+<span class="nc bnc" id="L637" title="All 4 branches missed.">		if(A.m == 2 &amp;&amp; A.n == 2) { // Then we have a 2x2 matrix, which we can directly compute</span>
+<span class="nc" id="L638">			CNumber a = A.entries[0][0];</span>
+<span class="nc" id="L639">			CNumber b = A.entries[0][1];</span>
+<span class="nc" id="L640">			CNumber c = A.entries[1][0];</span>
+<span class="nc" id="L641">			CNumber d = A.entries[1][1];</span>
 
-<span class="nc" id="L580">			return CNumber.subtract(CNumber.multiply(a, d), CNumber.multiply(b, c));</span>
+<span class="nc" id="L643">			return CNumber.subtract(CNumber.multiply(a, d), CNumber.multiply(b, c));</span>
 		}
 
-<span class="nc" id="L583">		return detQR(A);</span>
+<span class="nc" id="L646">		return detQR(A);</span>
 	}
 
 
@@ -592,7 +655,7 @@
 	 * @return
 	 */
 	default Matrix stack(Matrix B) {
-<span class="nc" id="L595">		return this.stack(B, 0);</span>
+<span class="nc" id="L658">		return this.stack(B, 0);</span>
 	}
 
 
@@ -608,50 +671,50 @@
 	 * @return Returns A and B stacked along specified axis.
 	 */
 	default Matrix stack(Matrix B, int axis) {
-<span class="nc" id="L611">		Matrix A = (Matrix) this;</span>
-<span class="nc" id="L612">		Matrix result = null;</span>
+<span class="nc" id="L674">		Matrix A = (Matrix) this;</span>
+<span class="nc" id="L675">		Matrix result = null;</span>
 
-<span class="nc bnc" id="L614" title="All 2 branches missed.">		if(axis == 0) { // Stack on rows</span>
-<span class="nc bnc" id="L615" title="All 2 branches missed.">			if(A.entries[0].length != B.entries[0].length) { // Ensure matrices have same number or columns</span>
-<span class="nc" id="L616">				throw new IllegalArgumentException(&quot;Must have same number of columns but &quot;</span>
+<span class="nc bnc" id="L677" title="All 2 branches missed.">		if(axis == 0) { // Stack on rows</span>
+<span class="nc bnc" id="L678" title="All 2 branches missed.">			if(A.entries[0].length != B.entries[0].length) { // Ensure matrices have same number or columns</span>
+<span class="nc" id="L679">				throw new IllegalArgumentException(&quot;Must have same number of columns but &quot;</span>
 						+ &quot;got &quot; + A.entries[0].length + &quot; and &quot; + B.entries[0].length);
 			}
 
-<span class="nc" id="L620">			result = new Matrix(A.entries.length+B.entries.length, A.entries[0].length);</span>
+<span class="nc" id="L683">			result = new Matrix(A.entries.length+B.entries.length, A.entries[0].length);</span>
 
-<span class="nc bnc" id="L622" title="All 2 branches missed.">			for(int i = 0; i &lt; result.entries.length; i++) {</span>
-<span class="nc bnc" id="L623" title="All 2 branches missed.">				for(int j = 0; j &lt; result.entries[0].length; j++) {</span>
-<span class="nc bnc" id="L624" title="All 2 branches missed.">					if(i &lt; A.entries.length) { // Then copy from A.entries</span>
-<span class="nc" id="L625">						result.entries[i][j] = A.entries[i][j];</span>
+<span class="nc bnc" id="L685" title="All 2 branches missed.">			for(int i = 0; i &lt; result.entries.length; i++) {</span>
+<span class="nc bnc" id="L686" title="All 2 branches missed.">				for(int j = 0; j &lt; result.entries[0].length; j++) {</span>
+<span class="nc bnc" id="L687" title="All 2 branches missed.">					if(i &lt; A.entries.length) { // Then copy from A.entries</span>
+<span class="nc" id="L688">						result.entries[i][j] = A.entries[i][j];</span>
 					} else { // the copy from B.entries
-<span class="nc" id="L627">						result.entries[i][j] = B.entries[i-A.entries.length][j];</span>
+<span class="nc" id="L690">						result.entries[i][j] = B.entries[i-A.entries.length][j];</span>
 					}
 				}
 			}
 		}
-<span class="nc bnc" id="L632" title="All 2 branches missed.">		else if(axis == 1) { // Stack on cols</span>
-<span class="nc bnc" id="L633" title="All 2 branches missed.">			if(A.entries.length != B.entries.length) { // Ensure matrices have same number or rows</span>
-<span class="nc" id="L634">				throw new IllegalArgumentException(&quot;Must have same number of rows but &quot;</span>
+<span class="nc bnc" id="L695" title="All 2 branches missed.">		else if(axis == 1) { // Stack on cols</span>
+<span class="nc bnc" id="L696" title="All 2 branches missed.">			if(A.entries.length != B.entries.length) { // Ensure matrices have same number or rows</span>
+<span class="nc" id="L697">				throw new IllegalArgumentException(&quot;Must have same number of rows but &quot;</span>
 						+ &quot;got &quot; + A.entries.length + &quot; and &quot; + B.entries.length);
 			}
 
-<span class="nc" id="L638">			result = new Matrix(A.entries.length, A.entries[0].length + B.entries[0].length);</span>
+<span class="nc" id="L701">			result = new Matrix(A.entries.length, A.entries[0].length + B.entries[0].length);</span>
 
-<span class="nc bnc" id="L640" title="All 2 branches missed.">			for(int i = 0; i &lt; result.entries.length; i++) {</span>
-<span class="nc bnc" id="L641" title="All 2 branches missed.">				for(int j = 0; j &lt; result.entries[0].length; j++) {</span>
-<span class="nc bnc" id="L642" title="All 2 branches missed.">					if(j &lt; A.entries[0].length) { // Then copy from A.entries</span>
-<span class="nc" id="L643">						result.entries[i][j] = A.entries[i][j];</span>
+<span class="nc bnc" id="L703" title="All 2 branches missed.">			for(int i = 0; i &lt; result.entries.length; i++) {</span>
+<span class="nc bnc" id="L704" title="All 2 branches missed.">				for(int j = 0; j &lt; result.entries[0].length; j++) {</span>
+<span class="nc bnc" id="L705" title="All 2 branches missed.">					if(j &lt; A.entries[0].length) { // Then copy from A.entries</span>
+<span class="nc" id="L706">						result.entries[i][j] = A.entries[i][j];</span>
 					} else { // the copy from B.entries
-<span class="nc" id="L645">						result.entries[i][j] = B.entries[i][j-A.entries[0].length];</span>
+<span class="nc" id="L708">						result.entries[i][j] = B.entries[i][j-A.entries[0].length];</span>
 					}
 				}
 			}
 		}
 		else {
-<span class="nc" id="L651">			throw new IllegalArgumentException(&quot;axis must be 0 or 1 but got &quot; + axis);</span>
+<span class="nc" id="L714">			throw new IllegalArgumentException(&quot;axis must be 0 or 1 but got &quot; + axis);</span>
 		}
 
-<span class="nc" id="L654">		return result;</span>
+<span class="nc" id="L717">		return result;</span>
 	}
 
 
@@ -662,7 +725,7 @@
 	 * @return The matrix B augmented to this matrix.
 	 */
 	default Matrix augment(Matrix B) {
-<span class="nc" id="L665">		return this.stack(B, 1);</span>
+<span class="nc" id="L728">		return this.stack(B, 1);</span>
 	}
 
 
@@ -685,27 +748,27 @@
 	 * @return Row-echelon form of matrix
 	 */
 	default Matrix ref() {
-<span class="nc" id="L688">		Matrix A = ((Matrix) this).copy();</span>
+<span class="nc" id="L751">		Matrix A = ((Matrix) this).copy();</span>
 		CNumber m, scale;
 
-<span class="nc" id="L691">		int pivotRow = 0,</span>
-<span class="nc" id="L692">				pivotCol = 0;</span>
+<span class="nc" id="L754">		int pivotRow = 0,</span>
+<span class="nc" id="L755">				pivotCol = 0;</span>
 
-<span class="nc bnc" id="L694" title="All 4 branches missed.">		while(pivotRow&lt;A.m &amp;&amp; pivotCol&lt;A.n) {</span>
-<span class="nc bnc" id="L695" title="All 2 branches missed.">			if(!A.entries[pivotRow][pivotCol].equals(CNumber.ZERO)) { // Then we can make the pivot one.</span>
-<span class="nc" id="L696">				scale = CNumber.divide(CNumber.ONE, A.entries[pivotRow][pivotCol]);</span>
+<span class="nc bnc" id="L757" title="All 4 branches missed.">		while(pivotRow&lt;A.m &amp;&amp; pivotCol&lt;A.n) {</span>
+<span class="nc bnc" id="L758" title="All 2 branches missed.">			if(!A.entries[pivotRow][pivotCol].equals(CNumber.ZERO)) { // Then we can make the pivot one.</span>
+<span class="nc" id="L759">				scale = CNumber.divide(CNumber.ONE, A.entries[pivotRow][pivotCol]);</span>
 
-<span class="nc bnc" id="L698" title="All 2 branches missed.">				for(int k=pivotCol; k&lt;A.n; k++) { // scale the whole row</span>
-<span class="nc" id="L699">					A.entries[pivotRow][k] = CNumber.multiply(A.entries[pivotRow][k], scale);</span>
+<span class="nc bnc" id="L761" title="All 2 branches missed.">				for(int k=pivotCol; k&lt;A.n; k++) { // scale the whole row</span>
+<span class="nc" id="L762">					A.entries[pivotRow][k] = CNumber.multiply(A.entries[pivotRow][k], scale);</span>
 				}
 			}
 
-<span class="nc bnc" id="L703" title="All 2 branches missed.">			for(int i=pivotRow+1; i&lt;A.m; i++) {</span>
-<span class="nc" id="L704">				m = A.entries[i][pivotCol];</span>
+<span class="nc bnc" id="L766" title="All 2 branches missed.">			for(int i=pivotRow+1; i&lt;A.m; i++) {</span>
+<span class="nc" id="L767">				m = A.entries[i][pivotCol];</span>
 
-<span class="nc bnc" id="L706" title="All 2 branches missed.">				for(int k=pivotCol; k&lt;A.n; k++) {</span>
-<span class="nc" id="L707">					A.entries[i][k] = CNumber.subtract(A.entries[i][k],</span>
-<span class="nc" id="L708">							CNumber.multiply(A.entries[pivotRow][k], m));</span>
+<span class="nc bnc" id="L769" title="All 2 branches missed.">				for(int k=pivotCol; k&lt;A.n; k++) {</span>
+<span class="nc" id="L770">					A.entries[i][k] = CNumber.subtract(A.entries[i][k],</span>
+<span class="nc" id="L771">							CNumber.multiply(A.entries[pivotRow][k], m));</span>
 				}
 
 
@@ -714,14 +777,14 @@
 				 * They may be a very small (in absolute value) non-zero value
 				 * resulting from errors in floating point arithmetic.
 				 */
-<span class="nc" id="L717">				A.entries[i][pivotCol] = CNumber.ZERO;</span>
+<span class="nc" id="L780">				A.entries[i][pivotCol] = CNumber.ZERO;</span>
 			}
 
-<span class="nc" id="L720">			pivotRow++;</span>
-<span class="nc" id="L721">			pivotCol++;</span>
+<span class="nc" id="L783">			pivotRow++;</span>
+<span class="nc" id="L784">			pivotCol++;</span>
 		}
 
-<span class="nc" id="L724">		return A;</span>
+<span class="nc" id="L787">		return A;</span>
 	}
 
 
@@ -750,8 +813,8 @@
 	 * @return
 	 */
 	default Matrix rref(boolean partialPivoting) {
-<span class="nc bnc" id="L753" title="All 2 branches missed.">		if(partialPivoting) return rref();</span>
-<span class="nc" id="L754">		else return rrefNoPivot();</span>
+<span class="nc bnc" id="L816" title="All 2 branches missed.">		if(partialPivoting) return rref();</span>
+<span class="nc" id="L817">		else return rrefNoPivot();</span>
 	}
 
 
@@ -776,69 +839,69 @@
 	 * @return Row-echelon form of matrix.
 	 */
 	default Matrix rref() {
-<span class="nc" id="L779">		Matrix A = ((Matrix) this).copy();</span>
+<span class="nc" id="L842">		Matrix A = ((Matrix) this).copy();</span>
 		CNumber mult, scale, currentMax;
 		int maxIndex;
 
-<span class="nc" id="L783">		int pivotRow = 0,</span>
-<span class="nc" id="L784">				pivotCol = 0;</span>
+<span class="nc" id="L846">		int pivotRow = 0,</span>
+<span class="nc" id="L847">				pivotCol = 0;</span>
 
-<span class="nc bnc" id="L786" title="All 4 branches missed.">		while(pivotRow&lt;A.m &amp;&amp; pivotCol&lt;A.n) {</span>
-<span class="nc" id="L787">			maxIndex = pivotRow;</span>
-<span class="nc" id="L788">			currentMax = A.entries[pivotRow][pivotCol];</span>
+<span class="nc bnc" id="L849" title="All 4 branches missed.">		while(pivotRow&lt;A.m &amp;&amp; pivotCol&lt;A.n) {</span>
+<span class="nc" id="L850">			maxIndex = pivotRow;</span>
+<span class="nc" id="L851">			currentMax = A.entries[pivotRow][pivotCol];</span>
 
-<span class="nc bnc" id="L790" title="All 2 branches missed.">			for(int i=pivotRow; i&lt;A.m; i++) { // Find the maximum entry in the pivot column (at or below the pivot ).</span>
-<span class="nc bnc" id="L791" title="All 2 branches missed.">				if(A.entries[i][pivotCol].nearZero(1.0E-12)) {</span>
+<span class="nc bnc" id="L853" title="All 2 branches missed.">			for(int i=pivotRow; i&lt;A.m; i++) { // Find the maximum entry in the pivot column (at or below the pivot ).</span>
+<span class="nc bnc" id="L854" title="All 2 branches missed.">				if(A.entries[i][pivotCol].nearZero(1.0E-12)) {</span>
 
 					/*
 					 * If a number is very close to zero, assume it is supposed to be zero.
 					 * This protects against trying to manipulate a column which
 					 * is already in the correct form.
 					 */
-<span class="nc" id="L798">					A.entries[i][pivotCol] = CNumber.ZERO;</span>
+<span class="nc" id="L861">					A.entries[i][pivotCol] = CNumber.ZERO;</span>
 				}
-<span class="nc bnc" id="L800" title="All 2 branches missed.">				else if(A.entries[i][pivotCol].compareTo(currentMax) &gt; 0) {</span>
-<span class="nc" id="L801">					maxIndex = i;</span>
-<span class="nc" id="L802">					currentMax = A.entries[i][pivotCol];</span>
+<span class="nc bnc" id="L863" title="All 2 branches missed.">				else if(A.entries[i][pivotCol].compareTo(currentMax) &gt; 0) {</span>
+<span class="nc" id="L864">					maxIndex = i;</span>
+<span class="nc" id="L865">					currentMax = A.entries[i][pivotCol];</span>
 				}
 			}
 
-<span class="nc bnc" id="L806" title="All 2 branches missed.">			if(!A.entries[maxIndex][pivotCol].equals(CNumber.ZERO)) { // Check that the maximum absolute value is not zero.</span>
-<span class="nc bnc" id="L807" title="All 2 branches missed.">				if(pivotRow != maxIndex) {</span>
-<span class="nc" id="L808">					A = A.swapRows(pivotRow, maxIndex); // Make the row with the largest value in the pivot column the pivot for this row.</span>
+<span class="nc bnc" id="L869" title="All 2 branches missed.">			if(!A.entries[maxIndex][pivotCol].equals(CNumber.ZERO)) { // Check that the maximum absolute value is not zero.</span>
+<span class="nc bnc" id="L870" title="All 2 branches missed.">				if(pivotRow != maxIndex) {</span>
+<span class="nc" id="L871">					A = A.swapRows(pivotRow, maxIndex); // Make the row with the largest value in the pivot column the pivot for this row.</span>
 				}
 
-<span class="nc" id="L811">				scale = CNumber.divide(CNumber.ONE, A.entries[pivotRow][pivotCol]);</span>
+<span class="nc" id="L874">				scale = CNumber.divide(CNumber.ONE, A.entries[pivotRow][pivotCol]);</span>
 
-<span class="nc bnc" id="L813" title="All 2 branches missed.">				for(int k=pivotCol; k&lt;A.n; k++) { // scale the whole row so that the pivot is 1</span>
-<span class="nc" id="L814">					A.entries[pivotRow][k] = CNumber.multiply(A.entries[pivotRow][k], scale);</span>
+<span class="nc bnc" id="L876" title="All 2 branches missed.">				for(int k=pivotCol; k&lt;A.n; k++) { // scale the whole row so that the pivot is 1</span>
+<span class="nc" id="L877">					A.entries[pivotRow][k] = CNumber.multiply(A.entries[pivotRow][k], scale);</span>
 				}
 
-<span class="nc bnc" id="L817" title="All 2 branches missed.">				for(int i=0; i&lt;A.m; i++) {</span>
-<span class="nc" id="L818">					mult = A.entries[i][pivotCol];</span>
+<span class="nc bnc" id="L880" title="All 2 branches missed.">				for(int i=0; i&lt;A.m; i++) {</span>
+<span class="nc" id="L881">					mult = A.entries[i][pivotCol];</span>
 
-<span class="nc bnc" id="L820" title="All 2 branches missed.">					if(pivotRow != i) {</span>
-<span class="nc" id="L821">						A.entries[i][pivotCol] = CNumber.ZERO;</span>
+<span class="nc bnc" id="L883" title="All 2 branches missed.">					if(pivotRow != i) {</span>
+<span class="nc" id="L884">						A.entries[i][pivotCol] = CNumber.ZERO;</span>
 
-<span class="nc bnc" id="L823" title="All 2 branches missed.">						for(int k=pivotCol+1; k&lt;A.n; k++) {</span>
+<span class="nc bnc" id="L886" title="All 2 branches missed.">						for(int k=pivotCol+1; k&lt;A.n; k++) {</span>
 
-<span class="nc" id="L825">							CNumber value = CNumber.subtract(A.entries[i][k],</span>
-<span class="nc" id="L826">									CNumber.multiply(A.entries[pivotRow][k], mult));</span>
-<span class="nc" id="L827">							A.entries[i][k] = value;</span>
+<span class="nc" id="L888">							CNumber value = CNumber.subtract(A.entries[i][k],</span>
+<span class="nc" id="L889">									CNumber.multiply(A.entries[pivotRow][k], mult));</span>
+<span class="nc" id="L890">							A.entries[i][k] = value;</span>
 						}
 
 					}
 				}
 
-<span class="nc" id="L833">				pivotRow++;</span>
-<span class="nc" id="L834">				pivotCol++;</span>
+<span class="nc" id="L896">				pivotRow++;</span>
+<span class="nc" id="L897">				pivotCol++;</span>
 			}
 			else { // Then we do not have a pivot for this column (i.e. the column is all zeros).
-<span class="nc" id="L837">				pivotCol++;</span>
+<span class="nc" id="L900">				pivotCol++;</span>
 			}
 		}
 
-<span class="nc" id="L841">		return A;</span>
+<span class="nc" id="L904">		return A;</span>
 	}
 
 
@@ -864,37 +927,37 @@
 	 * @return Row-echelon form of matrix.
 	 */
 	default Matrix rrefNoPivot() {
-<span class="nc" id="L867">		Matrix A = ((Matrix) this).copy();</span>
+<span class="nc" id="L930">		Matrix A = ((Matrix) this).copy();</span>
 		CNumber m, scale;
 
-<span class="nc" id="L870">		int pivotRow = 0,</span>
-<span class="nc" id="L871">				pivotCol = 0;</span>
+<span class="nc" id="L933">		int pivotRow = 0,</span>
+<span class="nc" id="L934">				pivotCol = 0;</span>
 
-<span class="nc bnc" id="L873" title="All 4 branches missed.">		while(pivotRow&lt;A.m &amp;&amp; pivotCol&lt;A.n) {</span>
-<span class="nc bnc" id="L874" title="All 2 branches missed.">			if(!A.entries[pivotRow][pivotCol].equals(CNumber.ZERO)) {</span>
-<span class="nc" id="L875">				scale = CNumber.divide(CNumber.ONE, A.entries[pivotRow][pivotCol]);</span>
+<span class="nc bnc" id="L936" title="All 4 branches missed.">		while(pivotRow&lt;A.m &amp;&amp; pivotCol&lt;A.n) {</span>
+<span class="nc bnc" id="L937" title="All 2 branches missed.">			if(!A.entries[pivotRow][pivotCol].equals(CNumber.ZERO)) {</span>
+<span class="nc" id="L938">				scale = CNumber.divide(CNumber.ONE, A.entries[pivotRow][pivotCol]);</span>
 
-<span class="nc bnc" id="L877" title="All 2 branches missed.">				for(int k=pivotCol; k&lt;A.n; k++) { // scale the whole row</span>
-<span class="nc" id="L878">					A.entries[pivotRow][k] = CNumber.multiply(A.entries[pivotRow][k], scale);</span>
+<span class="nc bnc" id="L940" title="All 2 branches missed.">				for(int k=pivotCol; k&lt;A.n; k++) { // scale the whole row</span>
+<span class="nc" id="L941">					A.entries[pivotRow][k] = CNumber.multiply(A.entries[pivotRow][k], scale);</span>
 				}
 			}
 
-<span class="nc bnc" id="L882" title="All 2 branches missed.">			for(int i=0; i&lt;A.m; i++) {</span>
-<span class="nc" id="L883">				m = A.entries[i][pivotCol];</span>
+<span class="nc bnc" id="L945" title="All 2 branches missed.">			for(int i=0; i&lt;A.m; i++) {</span>
+<span class="nc" id="L946">				m = A.entries[i][pivotCol];</span>
 
-<span class="nc bnc" id="L885" title="All 2 branches missed.">				if(pivotRow != i) {</span>
-<span class="nc bnc" id="L886" title="All 2 branches missed.">					for(int k=pivotCol; k&lt;A.n; k++) {</span>
-<span class="nc" id="L887">						A.entries[i][k] = CNumber.subtract(A.entries[i][k],</span>
-<span class="nc" id="L888">								CNumber.multiply(A.entries[pivotRow][k], m));</span>
+<span class="nc bnc" id="L948" title="All 2 branches missed.">				if(pivotRow != i) {</span>
+<span class="nc bnc" id="L949" title="All 2 branches missed.">					for(int k=pivotCol; k&lt;A.n; k++) {</span>
+<span class="nc" id="L950">						A.entries[i][k] = CNumber.subtract(A.entries[i][k],</span>
+<span class="nc" id="L951">								CNumber.multiply(A.entries[pivotRow][k], m));</span>
 					}
 				}
 			}
 
-<span class="nc" id="L893">			pivotRow++;</span>
-<span class="nc" id="L894">			pivotCol++;</span>
+<span class="nc" id="L956">			pivotRow++;</span>
+<span class="nc" id="L957">			pivotCol++;</span>
 		}
 
-<span class="nc" id="L897">		return A;</span>
+<span class="nc" id="L960">		return A;</span>
 	}
 
 
@@ -906,11 +969,11 @@
 	 * @return Returns extended row-echelon form of this matrix.
 	 */
 	default Matrix erref() {
-<span class="nc" id="L909">		Matrix A = (Matrix) this;</span>
-<span class="nc" id="L910">		Matrix I = Matrix.I(A.m);</span>
-<span class="nc" id="L911">		Matrix Aug = A.augment(I);</span>
+<span class="nc" id="L972">		Matrix A = (Matrix) this;</span>
+<span class="nc" id="L973">		Matrix I = Matrix.I(A.m);</span>
+<span class="nc" id="L974">		Matrix Aug = A.augment(I);</span>
 
-<span class="nc" id="L913">		return Aug.rref();</span>
+<span class="nc" id="L976">		return Aug.rref();</span>
 	}
 
 
@@ -923,19 +986,19 @@
 	 * @return trace of this matrix.
 	 */
 	default CNumber trace() {
-<span class="nc" id="L926">		Matrix A = (Matrix) this;</span>
+<span class="nc" id="L989">		Matrix A = (Matrix) this;</span>
 
-<span class="nc bnc" id="L928" title="All 2 branches missed.">		if(!A.isSquare()) {</span>
-<span class="nc" id="L929">			throw new IllegalArgumentException(&quot;Expecting matrix to be square but got &quot; + A.shape);</span>
+<span class="nc bnc" id="L991" title="All 2 branches missed.">		if(!A.isSquare()) {</span>
+<span class="nc" id="L992">			throw new IllegalArgumentException(&quot;Expecting matrix to be square but got &quot; + A.shape);</span>
 		}
 
-<span class="nc" id="L932">		CNumber result = A.entries[0][0];</span>
+<span class="nc" id="L995">		CNumber result = A.entries[0][0];</span>
 
-<span class="nc bnc" id="L934" title="All 2 branches missed.">		for(int i = 1; i &lt; A.n; i++) {</span>
-<span class="nc" id="L935">			result = CNumber.add(result, A.entries[i][i]);</span>
+<span class="nc bnc" id="L997" title="All 2 branches missed.">		for(int i = 1; i &lt; A.n; i++) {</span>
+<span class="nc" id="L998">			result = CNumber.add(result, A.entries[i][i]);</span>
 		}
 
-<span class="nc" id="L938">		return result;</span>
+<span class="nc" id="L1001">		return result;</span>
 	}
 
 
@@ -948,7 +1011,7 @@
 	 * @return trace of this matrix.
 	 */
 	default CNumber tr() {
-<span class="nc" id="L951">		return this.trace();</span>
+<span class="nc" id="L1014">		return this.trace();</span>
 	}
 
 
@@ -962,20 +1025,20 @@
 	 */
 	// TODO: Should be switched to rank revealing QR decomposition as it is more numerically stable.
 	default int rank() {
-<span class="nc" id="L965">		Matrix A = (Matrix) this;</span>
-<span class="nc" id="L966">		Matrix rrefA = A.rref();</span>
-<span class="nc" id="L967">		int rank = A.m;</span>
+<span class="nc" id="L1028">		Matrix A = (Matrix) this;</span>
+<span class="nc" id="L1029">		Matrix rrefA = A.rref();</span>
+<span class="nc" id="L1030">		int rank = A.m;</span>
 
-<span class="nc bnc" id="L969" title="All 2 branches missed.">		for(int i=rrefA.m-1; i&gt;=0; i--) {</span>
-<span class="nc bnc" id="L970" title="All 2 branches missed.">			if(rrefA.getRowAsVector(i).isZero()) {</span>
-<span class="nc" id="L971">				rank--;</span>
+<span class="nc bnc" id="L1032" title="All 2 branches missed.">		for(int i=rrefA.m-1; i&gt;=0; i--) {</span>
+<span class="nc bnc" id="L1033" title="All 2 branches missed.">			if(rrefA.getRowAsVector(i).isZero()) {</span>
+<span class="nc" id="L1034">				rank--;</span>
 			} else {
 				// Then we have no more zero rows as rrefA is in reduced row echelon form.
 				break;
 			}
 		}
 
-<span class="nc" id="L978">		return rank;</span>
+<span class="nc" id="L1041">		return rank;</span>
 	}
 
 
@@ -986,8 +1049,8 @@
 	 * @return Returns the rank of this matrix.
 	 */
 	default int nullity() {
-<span class="nc" id="L989">		int rank = this.rank();</span>
-<span class="nc" id="L990">		return ((Matrix) this).m - rank;</span>
+<span class="nc" id="L1052">		int rank = this.rank();</span>
+<span class="nc" id="L1053">		return ((Matrix) this).m - rank;</span>
 	}
 
 
@@ -998,20 +1061,20 @@
 	 * @return The inverse of this matrix.
 	 */
 	default Matrix inverse() {
-<span class="nc" id="L1001">		Matrix A = (Matrix) this;</span>
+<span class="nc" id="L1064">		Matrix A = (Matrix) this;</span>
 
-<span class="nc bnc" id="L1003" title="All 2 branches missed.">		if(!A.isSingular()) {</span>
-<span class="nc" id="L1004">			throw new IllegalArgumentException(&quot;Matrix is singular.&quot;);</span>
+<span class="nc bnc" id="L1066" title="All 2 branches missed.">		if(!A.isSingular()) {</span>
+<span class="nc" id="L1067">			throw new IllegalArgumentException(&quot;Matrix is singular.&quot;);</span>
 		}
 
-<span class="nc" id="L1007">		Matrix[] QR = Decompose.QR(A); // Compute the QR decomposition of A. This will be used to compute the inverse.</span>
-<span class="nc" id="L1008">		CNumber detR = CNumber.ONE;</span>
+<span class="nc" id="L1070">		Matrix[] QR = Decompose.QR(A); // Compute the QR decomposition of A. This will be used to compute the inverse.</span>
+<span class="nc" id="L1071">		CNumber detR = CNumber.ONE;</span>
 
-<span class="nc bnc" id="L1010" title="All 2 branches missed.">		for(int i = 0; i&lt;QR[1].n; i++) { // Computing the determinant of R</span>
-<span class="nc" id="L1011">			detR = CNumber.multiply(detR, QR[1].entries[i][i]);</span>
+<span class="nc bnc" id="L1073" title="All 2 branches missed.">		for(int i = 0; i&lt;QR[1].n; i++) { // Computing the determinant of R</span>
+<span class="nc" id="L1074">			detR = CNumber.multiply(detR, QR[1].entries[i][i]);</span>
 		}
 
-<span class="nc bnc" id="L1014" title="All 2 branches missed.">		if(CNumber.round(detR, 10).re == 0) {</span>
+<span class="nc bnc" id="L1077" title="All 2 branches missed.">		if(CNumber.round(detR, 10).re == 0) {</span>
 			/* Then we know the matrix is singular.
 			 * We know this by exploiting properties of the orthogonal matrix Q and the upper triangular matrix R.
 			 * The determinant of an orthogonal matrix is either -1 or 1. The determinant of an upper triangular matrix R is the product
@@ -1020,11 +1083,11 @@
 			 * The isSingular() method is not used here because it computes the QR decomposition to check if the matrix is singular. However, we have already done that,
 			 * so it would be redundant to call the isSingular() method and recompute the QR decomposition again.
 			 */
-<span class="nc" id="L1023">			throw new IllegalArgumentException(&quot;Matrix is singular, thus can not be inverted.&quot;);</span>
+<span class="nc" id="L1086">			throw new IllegalArgumentException(&quot;Matrix is singular, thus can not be inverted.&quot;);</span>
 		}
 
 		// Here we compute and return A^-1 = (R^-1)*(Q^-1)
-<span class="nc" id="L1027">		return inverseTriU(QR[1]).mult(QR[0].H());</span>
+<span class="nc" id="L1090">		return inverseTriU(QR[1]).mult(QR[0].H());</span>
 	}
 
 
@@ -1035,7 +1098,7 @@
 	 * @return The inverse of this matrix.
 	 */
 	default Matrix inv() {
-<span class="nc" id="L1038">		return this.inverse();</span>
+<span class="nc" id="L1101">		return this.inverse();</span>
 	}
 
 
@@ -1054,19 +1117,19 @@
 	 * @return Returns the inverse of U, denoted U&lt;sup&gt;-1&lt;/sub&gt;
 	 */
 	static Matrix inverseTriU(Matrix U) {
-<span class="nc" id="L1057">		Matrix Uinv = new Matrix(U.m, U.m);</span>
-<span class="nc" id="L1058">		Matrix I = Matrix.I(U.m);</span>
+<span class="nc" id="L1120">		Matrix Uinv = new Matrix(U.m, U.m);</span>
+<span class="nc" id="L1121">		Matrix I = Matrix.I(U.m);</span>
 
-<span class="nc bnc" id="L1060" title="All 2 branches missed.">		if(!U.isTriU()) {</span>
-<span class="nc" id="L1061">			throw new IllegalArgumentException(&quot;U must be upper triangular.&quot;);</span>
+<span class="nc bnc" id="L1123" title="All 2 branches missed.">		if(!U.isTriU()) {</span>
+<span class="nc" id="L1124">			throw new IllegalArgumentException(&quot;U must be upper triangular.&quot;);</span>
 		}
 
-<span class="nc bnc" id="L1064" title="All 2 branches missed.">		for(int i=0; i&lt;U.m; i++)  {</span>
+<span class="nc bnc" id="L1127" title="All 2 branches missed.">		for(int i=0; i&lt;U.m; i++)  {</span>
 			// U is upper triangular, so to solve the system we simply need to use back-solve function.
-<span class="nc" id="L1066">			Uinv.setCol(Solvers.backSolve(U, I.getColAsVector(i)), i);</span>
+<span class="nc" id="L1129">			Uinv.setCol(Solvers.backSolve(U, I.getColAsVector(i)), i);</span>
 		}
 
-<span class="nc" id="L1069">		return Uinv;</span>
+<span class="nc" id="L1132">		return Uinv;</span>
 	}
 
 
@@ -1076,15 +1139,15 @@
 	 * @return new matrix that contains the reciprocals of this matrix
 	 */
 	default Matrix recep() {
-<span class="nc" id="L1079">		Matrix A = new Matrix((Matrix) this).copy();</span>
+<span class="nc" id="L1142">		Matrix A = new Matrix((Matrix) this).copy();</span>
 
-<span class="nc bnc" id="L1081" title="All 2 branches missed.">		for(int i=0; i&lt;A.m; i++) {</span>
-<span class="nc bnc" id="L1082" title="All 2 branches missed.">			for(int j=0; j&lt;A.n; j++) {</span>
-<span class="nc" id="L1083">				A.entries[i][j] = CNumber.inv(A.entries[i][j]);</span>
+<span class="nc bnc" id="L1144" title="All 2 branches missed.">		for(int i=0; i&lt;A.m; i++) {</span>
+<span class="nc bnc" id="L1145" title="All 2 branches missed.">			for(int j=0; j&lt;A.n; j++) {</span>
+<span class="nc" id="L1146">				A.entries[i][j] = CNumber.inv(A.entries[i][j]);</span>
 			}
 		}
 
-<span class="nc" id="L1087">		return A;</span>
+<span class="nc" id="L1150">		return A;</span>
 	}
 }
 
